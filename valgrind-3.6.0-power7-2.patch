svn diff -r11906:11908
svn diff -r2183:2184 VEX/
--- valgrind/VEX/priv/guest_ppc_defs.h	(revision 2183)
+++ valgrind/VEX/priv/guest_ppc_defs.h	(revision 2184)
@@ -126,6 +126,8 @@ enum {
    /* 11 */ PPCG_FLAG_OP_SRAWI,   // srawi
    /* 12 */ PPCG_FLAG_OP_SRAD,    // srad
    /* 13 */ PPCG_FLAG_OP_SRADI,   // sradi
+   /* 14 */ PPCG_FLAG_OP_DIVDE,   // divdeo
+   /* 15 */ PPCG_FLAG_OP_DIVWEU,  // divweuo
    PPCG_FLAG_OP_NUMBER
 };
 
--- valgrind/VEX/priv/ir_defs.c	(revision 2183)
+++ valgrind/VEX/priv/ir_defs.c	(revision 2184)
@@ -220,6 +220,8 @@ void ppIROp ( IROp op )
       case Iop_DivS32: vex_printf("DivS32"); return;
       case Iop_DivU64: vex_printf("DivU64"); return;
       case Iop_DivS64: vex_printf("DivS64"); return;
+      case Iop_DivS64E: vex_printf("DivS64E"); return;
+      case Iop_DivU32E: vex_printf("DivU32E"); return;
 
       case Iop_DivModU64to32: vex_printf("DivModU64to32"); return;
       case Iop_DivModS64to32: vex_printf("DivModS64to32"); return;
@@ -356,6 +358,7 @@ void ppIROp ( IROp op )
       case Iop_F64toI16S: vex_printf("F64toI16S"); return;
       case Iop_F64toI32S: vex_printf("F64toI32S"); return;
       case Iop_F64toI64S: vex_printf("F64toI64S"); return;
+      case Iop_F64toI64U: vex_printf("F64toI64U"); return;
 
       case Iop_F64toI32U: vex_printf("F64toI32U"); return;
 
@@ -2161,10 +2164,10 @@ void typeOfPrimop ( IROp op,
       case Iop_Clz64: case Iop_Ctz64:
          UNARY(Ity_I64, Ity_I64);
 
-      case Iop_DivU32: case Iop_DivS32:
+      case Iop_DivU32: case Iop_DivS32: case Iop_DivU32E:
          BINARY(Ity_I32,Ity_I32, Ity_I32);
 
-      case Iop_DivU64: case Iop_DivS64:
+      case Iop_DivU64: case Iop_DivS64: case Iop_DivS64E:
          BINARY(Ity_I64,Ity_I64, Ity_I64);
 
       case Iop_DivModU64to32: case Iop_DivModS64to32:
@@ -2263,7 +2266,8 @@ void typeOfPrimop ( IROp op,
 
       case Iop_F64toI16S: BINARY(ity_RMode,Ity_F64, Ity_I16);
       case Iop_F64toI32S: BINARY(ity_RMode,Ity_F64, Ity_I32);
-      case Iop_F64toI64S: BINARY(ity_RMode,Ity_F64, Ity_I64);
+      case Iop_F64toI64S: case Iop_F64toI64U:
+         BINARY(ity_RMode,Ity_F64, Ity_I64);
 
       case Iop_F64toI32U: BINARY(ity_RMode,Ity_F64, Ity_I32);
 
--- valgrind/VEX/priv/host_ppc_defs.c	(revision 2183)
+++ valgrind/VEX/priv/host_ppc_defs.c	(revision 2184)
@@ -805,10 +805,11 @@ PPCInstr* PPCInstr_MulL ( Bool syned, Bo
    if (!hi) vassert(!syned);
    return i;
 }
-PPCInstr* PPCInstr_Div ( Bool syned, Bool sz32,
+PPCInstr* PPCInstr_Div ( Bool extended, Bool syned, Bool sz32,
                          HReg dst, HReg srcL, HReg srcR ) {
    PPCInstr* i      = LibVEX_Alloc(sizeof(PPCInstr));
    i->tag           = Pin_Div;
+   i->Pin.Div.extended = extended;
    i->Pin.Div.syned = syned;
    i->Pin.Div.sz32  = sz32;
    i->Pin.Div.dst   = dst;
@@ -1303,8 +1304,9 @@ void ppPPCInstr ( PPCInstr* i, Bool mode
       ppHRegPPC(i->Pin.MulL.srcR);
       return;
    case Pin_Div:
-      vex_printf("div%c%s ",
+      vex_printf("div%c%s%s ",
                  i->Pin.Div.sz32 ? 'w' : 'd',
+                 i->Pin.Div.extended ? "e" : "",
                  i->Pin.Div.syned ? "" : "u");
       ppHRegPPC(i->Pin.Div.dst);
       vex_printf(",");
@@ -1491,19 +1493,32 @@ void ppPPCInstr ( PPCInstr* i, Bool mode
       return;
    case Pin_FpCftI: {
       HChar* str = "fc?????";
+      /* Note that "fcfids" is missing from below. That instruction would
+       * satisfy the predicate:
+       *    (i->Pin.FpCftI.fromI == True && i->Pin.FpCftI.int32 == False)
+       * which would go into a final "else" clause to make this if-else
+       * block balanced.  But we're able to implement fcfids by leveraging
+       * the fcfid implementation, so it wasn't necessary to include it here.
+       */
       if (i->Pin.FpCftI.fromI == False && i->Pin.FpCftI.int32 == False)
-         str = "fctid";
-      else
-      if (i->Pin.FpCftI.fromI == False && i->Pin.FpCftI.int32 == True)
-         str = "fctiw";
-      else
-      if (i->Pin.FpCftI.fromI == True && i->Pin.FpCftI.int32 == False) {
          if (i->Pin.FpCftI.syned == True)
-            str = "fcfid";
-         else if (i->Pin.FpCftI.flt64 == True)
-            str = "fcfidu";
+            str = "fctid";
+         else
+            str = "fctidu";
+      else if (i->Pin.FpCftI.fromI == False && i->Pin.FpCftI.int32 == True)
+         if (i->Pin.FpCftI.syned == True)
+            str = "fctiw";
          else
-            str = "fcfidus";
+            str = "fctiwu";
+      else if (i->Pin.FpCftI.fromI == True && i->Pin.FpCftI.int32 == False) {
+         if (i->Pin.FpCftI.syned == True) {
+            str = "fcfid";
+         } else {
+            if (i->Pin.FpCftI.flt64 == True)
+               str = "fcfidu";
+            else
+               str = "fcfidus";
+         }
       }
       vex_printf("%s ", str);
       ppHRegPPC(i->Pin.FpCftI.dst);
@@ -2987,7 +3002,19 @@ Int emit_PPCInstr ( UChar* buf, Int nbuf
       if (!mode64)
          vassert(sz32);
 
-      if (sz32) {
+      if (i->Pin.Div.extended) {
+         if (sz32) {
+            if (syned)
+               // divwe r_dst,r_srcL,r_srcR
+               p = mkFormXO(p, 31, r_dst, r_srcL, r_srcR, 0, 427, 0);
+            else
+               // divweu r_dst,r_srcL,r_srcR
+               p = mkFormXO(p, 31, r_dst, r_srcL, r_srcR, 0, 395, 0);
+         } else {
+            // divde r_dst,r_srcL,r_srcR
+            p = mkFormXO(p, 31, r_dst, r_srcL, r_srcR, 0, 425, 0);
+         }
+      } else if (sz32) {
          if (syned)  // divw r_dst,r_srcL,r_srcR
             p = mkFormXO(p, 31, r_dst, r_srcL, r_srcR, 0, 491, 0);
          else        // divwu r_dst,r_srcL,r_srcR
@@ -3441,14 +3468,26 @@ Int emit_PPCInstr ( UChar* buf, Int nbuf
       UInt fr_dst = fregNo(i->Pin.FpCftI.dst);
       UInt fr_src = fregNo(i->Pin.FpCftI.src);
       if (i->Pin.FpCftI.fromI == False && i->Pin.FpCftI.int32 == True) {
-         // fctiw (conv f64 to i32), PPC32 p404
-         p = mkFormX(p, 63, fr_dst, 0, fr_src, 14, 0);
-         goto done;
+         if (i->Pin.FpCftI.syned == True) {
+            // fctiw (conv f64 to i32), PPC32 p404
+            p = mkFormX(p, 63, fr_dst, 0, fr_src, 14, 0);
+            goto done;
+         } else {
+            // fctiwu (conv f64 to u32)
+            p = mkFormX(p, 63, fr_dst, 0, fr_src, 142, 0);
+            goto done;
+         }
       }
       if (i->Pin.FpCftI.fromI == False && i->Pin.FpCftI.int32 == False) {
-         // fctid (conv f64 to i64), PPC64 p437
-         p = mkFormX(p, 63, fr_dst, 0, fr_src, 814, 0);
-         goto done;
+         if (i->Pin.FpCftI.syned == True) {
+            // fctid (conv f64 to i64), PPC64 p437
+            p = mkFormX(p, 63, fr_dst, 0, fr_src, 814, 0);
+            goto done;
+         } else {
+            // fctidu (conv f64 to u64)
+            p = mkFormX(p, 63, fr_dst, 0, fr_src, 942, 0);
+            goto done;
+         }
       }
       if (i->Pin.FpCftI.fromI == True && i->Pin.FpCftI.int32 == False) {
          if (i->Pin.FpCftI.syned == True) {
--- valgrind/VEX/priv/host_ppc_defs.h	(revision 2183)
+++ valgrind/VEX/priv/host_ppc_defs.h	(revision 2184)
@@ -560,6 +560,7 @@ typedef
          } MulL;
          /* ppc32 div/divu instruction. */
          struct {
+            Bool extended;
             Bool syned;
             Bool sz32;   /* mode64 has both 32 & 64bit div */
             HReg dst;
@@ -793,7 +794,7 @@ extern PPCInstr* PPCInstr_AddSubC    ( B
 extern PPCInstr* PPCInstr_Cmp        ( Bool, Bool, UInt, HReg, PPCRH* );
 extern PPCInstr* PPCInstr_Unary      ( PPCUnaryOp op, HReg dst, HReg src );
 extern PPCInstr* PPCInstr_MulL       ( Bool syned, Bool hi32, Bool sz32, HReg, HReg, HReg );
-extern PPCInstr* PPCInstr_Div        ( Bool syned, Bool sz32, HReg dst, HReg srcL, HReg srcR );
+extern PPCInstr* PPCInstr_Div        ( Bool extended, Bool syned, Bool sz32, HReg dst, HReg srcL, HReg srcR );
 extern PPCInstr* PPCInstr_Call       ( PPCCondCode, Addr64, UInt );
 extern PPCInstr* PPCInstr_Goto       ( IRJumpKind, PPCCondCode cond, PPCRI* dst );
 extern PPCInstr* PPCInstr_CMov       ( PPCCondCode, HReg dst, PPCRI* src );
--- valgrind/VEX/priv/guest_ppc_toIR.c	(revision 2183)
+++ valgrind/VEX/priv/guest_ppc_toIR.c	(revision 2184)
@@ -185,6 +185,11 @@ static void* fnptr_to_fnentry( VexAbiInf
    }
 }
 
+#define SIGN_BIT  0x8000000000000000ULL
+#define SIGN_MASK 0x7fffffffffffffffULL
+#define SIGN_BIT32  0x80000000
+#define SIGN_MASK32 0x7fffffff
+
 
 /*------------------------------------------------------------*/
 /*--- Debugging output                                     ---*/
@@ -303,6 +308,14 @@ static UChar ifieldRegC ( UInt instr ) {
    return toUChar( IFIELD( instr, 6, 5 ) );
 }
 
+/* Extract XC (3rd source register) field, instr[3,10:6] */
+static UChar ifieldRegXC ( UInt instr )
+{
+  UChar upper_bit = toUChar (IFIELD (instr, 3, 1));
+  UChar lower_bits = toUChar (IFIELD (instr, 6, 5));
+  return (upper_bit << 5) | lower_bits;
+}
+
 /* Extract bit 10, instr[10] */
 static UChar ifieldBIT10 ( UInt instr ) {
    return toUChar( IFIELD( instr, 10, 1 ) );
@@ -647,6 +660,44 @@ static void expand16Sx8( IRExpr* vIn,
                        binop(Iop_ShrV128, vIn, mkU8(16))) );
 }
 
+/* break V128 to 4xF64's*/
+static void breakV128to4xF64( IRExpr* t128,
+                              /*OUTs*/
+                              IRTemp* t3, IRTemp* t2,
+                              IRTemp* t1, IRTemp* t0 )
+{
+   IRTemp hi64 = newTemp(Ity_I64);
+   IRTemp lo64 = newTemp(Ity_I64);
+
+   vassert(typeOfIRExpr(irsb->tyenv, t128) == Ity_V128);
+   vassert(t0 && *t0 == IRTemp_INVALID);
+   vassert(t1 && *t1 == IRTemp_INVALID);
+   vassert(t2 && *t2 == IRTemp_INVALID);
+   vassert(t3 && *t3 == IRTemp_INVALID);
+   *t0 = newTemp(Ity_F64);
+   *t1 = newTemp(Ity_F64);
+   *t2 = newTemp(Ity_F64);
+   *t3 = newTemp(Ity_F64);
+
+   assign( hi64, unop(Iop_V128HIto64, t128) );
+   assign( lo64, unop(Iop_V128to64,   t128) );
+   assign( *t3,
+           unop( Iop_F32toF64,
+                 unop( Iop_ReinterpI32asF32,
+                       unop( Iop_64HIto32, mkexpr( hi64 ) ) ) ) );
+   assign( *t2,
+           unop( Iop_F32toF64,
+                 unop( Iop_ReinterpI32asF32, unop( Iop_64to32, mkexpr( hi64 ) ) ) ) );
+   assign( *t1,
+           unop( Iop_F32toF64,
+                 unop( Iop_ReinterpI32asF32,
+                       unop( Iop_64HIto32, mkexpr( lo64 ) ) ) ) );
+   assign( *t0,
+           unop( Iop_F32toF64,
+                 unop( Iop_ReinterpI32asF32, unop( Iop_64to32, mkexpr( lo64 ) ) ) ) );
+}
+
+
 /* break V128 to 4xI32's, then sign-extend to I64's */
 static void breakV128to4x64S( IRExpr* t128,
                               /*OUTs*/
@@ -1573,7 +1624,9 @@ static void set_CR0 ( IRExpr* result )
 }
 
 
-/* Set the CR6 flags following an AltiVec compare operation. */
+/* Set the CR6 flags following an AltiVec compare operation.
+ * NOTE: This also works for VSX single-precision compares.
+ * */
 static void set_AV_CR6 ( IRExpr* result, Bool test_all_ones )
 {
    /* CR6[0:3] = {all_ones, 0, all_zeros, 0}
@@ -1793,6 +1846,13 @@ static void set_XER_OV_32( UInt op, IREx
          = binop(Iop_Shr32, xer_ov, mkU8(31) );
       break;
       
+   case PPCG_FLAG_OP_DIVWEU:
+      xer_ov
+               = binop( Iop_Or32,
+                        unop( Iop_1Uto32, binop( Iop_CmpEQ32, argR, mkU32( 0 ) ) ),
+                        unop( Iop_1Uto32, binop( Iop_CmpLT32U, argR, argL ) ) );
+      break;
+
    default: 
       vex_printf("set_XER_OV: op = %u\n", op);
       vpanic("set_XER_OV(ppc)");
@@ -1898,6 +1958,20 @@ static void set_XER_OV_64( UInt op, IREx
          = unop(Iop_64to1, binop(Iop_Shr64, xer_ov, mkU8(63)));
       break;
       
+   case PPCG_FLAG_OP_DIVDE:
+
+      /* If argR == 0, we must set the OV bit.  But there's another condition
+       * where we can get overflow set for divde . . . when the
+       * result cannot fit in the 64-bit destination register.  If dest reg is 0 AND
+       * both dividend and divisor are non-zero, it implies an overflow.
+       */
+      xer_ov
+                  = mkOR1( binop( Iop_CmpEQ64, argR, mkU64( 0 ) ),
+                           mkAND1( binop( Iop_CmpEQ64, res, mkU64( 0 ) ),
+                                   mkAND1( binop( Iop_CmpNE64, argL, mkU64( 0 ) ),
+                                           binop( Iop_CmpNE64, argR, mkU64( 0 ) ) ) ) );
+      break;
+
    default: 
       vex_printf("set_XER_OV: op = %u\n", op);
       vpanic("set_XER_OV(ppc64)");
@@ -2564,7 +2638,6 @@ static IRExpr * is_Inf(IRTemp src)
 // Zero: exp is zero and fraction is zero; s = 0/1
 static IRExpr * is_Zero(IRTemp src)
 {
-#define SIGN_MASK 0x7fffffffffffffffULL
    IRExpr * hi32, * low32;
    IRTemp sign_less_part = newTemp(Ity_I64);
 
@@ -2587,12 +2660,115 @@ static IRExpr * is_NaN(IRTemp src)
    assign( frac_part, FP_FRAC_PART(src) );
    hi32 = unop( Iop_64HIto32, mkexpr( frac_part ) );
    low32 = unop( Iop_64to32, mkexpr( frac_part ) );
-   NaN_exp = binop( Iop_CmpEQ32, fp_exp_part( src ), mkU32( 0x7ffULL ) );
+   NaN_exp = binop( Iop_CmpEQ32, fp_exp_part( src ), mkU32( 0x7ff ) );
 
    return mkAND1( NaN_exp, binop( Iop_CmpNE32, binop( Iop_Or32, low32, hi32 ),
                                                mkU32( 0 ) ) );
 }
 
+/* This function returns an IRExpr value of '1' for any type of NaN.
+ * The passed 'src' argument is assumed to be Ity_I32.
+ */
+static IRExpr * is_NaN_32(IRTemp src)
+{
+#define NONZERO_FRAC_MASK32 0x007fffffULL
+#define FP_FRAC_PART32(x) binop( Iop_And32, \
+                                 mkexpr( x ), \
+                                 mkU32( NONZERO_FRAC_MASK32 ) )
+
+   IRExpr * frac_part = FP_FRAC_PART32(src);
+   IRExpr * exp_part = binop( Iop_And32,
+                              binop( Iop_Shr32, mkexpr( src ), mkU8( 23 ) ),
+                              mkU32( 0x0ff ) );
+   IRExpr * NaN_exp = binop( Iop_CmpEQ32, exp_part, mkU32( 0xff ) );
+
+   return mkAND1( NaN_exp, binop( Iop_CmpNE32, frac_part, mkU32( 0 ) ) );
+}
+
+/* This helper function performs the negation part of operations of the form:
+ *    "Negate Multiply-<op>"
+ *  where "<op>" is either "Add" or "Sub".
+ *
+ * This function takes one argument -- the floating point intermediate result (converted to
+ * Ity_I64 via Iop_ReinterpF64asI64) that was obtained from the "Multip-<op>" part of
+ * the operation described above.
+ */
+static IRTemp getNegatedResult(IRTemp intermediateResult)
+{
+   ULong signbit_mask = 0x8000000000000000ULL;
+   IRTemp signbit_32 = newTemp(Ity_I32);
+   IRTemp resultantSignbit = newTemp(Ity_I1);
+   IRTemp negatedResult = newTemp(Ity_I64);
+   assign( signbit_32, binop( Iop_Shr32,
+                          unop( Iop_64HIto32,
+                                 binop( Iop_And64, mkexpr( intermediateResult ),
+                                        mkU64( signbit_mask ) ) ),
+                                 mkU8( 31 ) ) );
+   /* We negate the signbit if and only if the intermediate result from the
+    * multiply-<op> was NOT a NaN.  This is an XNOR predicate.
+    */
+   assign( resultantSignbit,
+        unop( Iop_Not1,
+              binop( Iop_CmpEQ32,
+                     binop( Iop_Xor32,
+                            mkexpr( signbit_32 ),
+                            unop( Iop_1Uto32, is_NaN( intermediateResult ) ) ),
+                     mkU32( 1 ) ) ) );
+
+   assign( negatedResult,
+        binop( Iop_Or64,
+               binop( Iop_And64,
+                      mkexpr( intermediateResult ),
+                      mkU64( ~signbit_mask ) ),
+               binop( Iop_32HLto64,
+                      binop( Iop_Shl32,
+                             unop( Iop_1Uto32, mkexpr( resultantSignbit ) ),
+                             mkU8( 31 ) ),
+                      mkU32( 0 ) ) ) );
+
+   return negatedResult;
+}
+
+/* This helper function performs the negation part of operations of the form:
+ *    "Negate Multiply-<op>"
+ *  where "<op>" is either "Add" or "Sub".
+ *
+ * This function takes one argument -- the floating point intermediate result (converted to
+ * Ity_I32 via Iop_ReinterpF32asI32) that was obtained from the "Multip-<op>" part of
+ * the operation described above.
+ */
+static IRTemp getNegatedResult_32(IRTemp intermediateResult)
+{
+   UInt signbit_mask = 0x80000000;
+   IRTemp signbit_32 = newTemp(Ity_I32);
+   IRTemp resultantSignbit = newTemp(Ity_I1);
+   IRTemp negatedResult = newTemp(Ity_I32);
+   assign( signbit_32, binop( Iop_Shr32,
+                                 binop( Iop_And32, mkexpr( intermediateResult ),
+                                        mkU32( signbit_mask ) ),
+                                 mkU8( 31 ) ) );
+   /* We negate the signbit if and only if the intermediate result from the
+    * multiply-<op> was NOT a NaN.  This is an XNOR predicate.
+    */
+   assign( resultantSignbit,
+        unop( Iop_Not1,
+              binop( Iop_CmpEQ32,
+                     binop( Iop_Xor32,
+                            mkexpr( signbit_32 ),
+                            unop( Iop_1Uto32, is_NaN_32( intermediateResult ) ) ),
+                     mkU32( 1 ) ) ) );
+
+   assign( negatedResult,
+           binop( Iop_Or32,
+                  binop( Iop_And32,
+                         mkexpr( intermediateResult ),
+                         mkU32( ~signbit_mask ) ),
+                  binop( Iop_Shl32,
+                         unop( Iop_1Uto32, mkexpr( resultantSignbit ) ),
+                         mkU8( 31 ) ) ) );
+
+   return negatedResult;
+}
 
 /*------------------------------------------------------------*/
 /*--- Integer Instruction Translation                     --- */
@@ -3114,6 +3290,58 @@ static Bool dis_int_arith ( UInt theInst
          break;
          /* Note: ditto comment divd, for (x / 0) */
 
+      case 0x18B: // divweu (Divide Word Extended Unsigned)
+      {
+        /*
+         *  If (RA) >= (RB), or if an attempt is made to perform the division
+         *         <anything> / 0
+         * then the contents of register RD are undefined as are (if Rc=1) the contents of
+         * the LT, GT, and EQ bits of CR Field 0. In these cases, if OE=1 then OV is set
+         * to 1.
+         */
+         IRTemp res = newTemp(Ity_I32);
+         IRExpr * dividend, * divisor;
+         DIP("divweu%s%s r%u,r%u,r%u\n",
+             flag_OE ? "o" : "", flag_rC ? ".":"",
+                                         rD_addr, rA_addr, rB_addr);
+         if (mode64) {
+            dividend = unop( Iop_64to32, mkexpr( rA ) );
+            divisor = unop( Iop_64to32, mkexpr( rB ) );
+            assign( res, binop( Iop_DivU32E, dividend, divisor ) );
+            assign( rD, binop( Iop_32HLto64, mkU32( 0 ), mkexpr( res ) ) );
+         } else {
+            dividend = mkexpr( rA );
+            divisor =  mkexpr( rB );
+            assign( res, binop( Iop_DivU32E, dividend, divisor ) );
+            assign( rD, mkexpr( res) );
+         }
+
+         if (flag_OE) {
+            set_XER_OV_32( PPCG_FLAG_OP_DIVWEU,
+                           mkexpr(res), dividend, divisor );
+         }
+         break;
+      }
+
+      case 0x1A9: // divde (Divide Doubleword Extended)
+        /*
+         * If the quotient cannot be represented in 64 bits, or if an
+         * attempt is made to perform the division
+         *      <anything> / 0
+         * then the contents of register RD are undefined as are (if
+         * Rc=1) the contents of the LT, GT, and EQ bits of CR
+         * Field 0. In these cases, if OE=1 then OV is set to 1.
+         */
+         DIP("divde%s%s r%u,r%u,r%u\n",
+             flag_OE ? "o" : "", flag_rC ? ".":"",
+             rD_addr, rA_addr, rB_addr);
+         assign( rD, binop(Iop_DivS64E, mkexpr(rA), mkexpr(rB)) );
+         if (flag_OE) {
+            set_XER_OV_64( PPCG_FLAG_OP_DIVDE, mkexpr( rD ),
+                           mkexpr( rA ), mkexpr( rB ) );
+         }
+         break;
+
       default:
          vex_printf("dis_int_arith(ppc)(opc2)\n");
          return False;
@@ -3322,7 +3550,7 @@ static Bool dis_int_logic ( UInt theInst
 
    /* X Form */
    case 0x1F:
-      do_rc = True;    // All below record to CR
+      do_rc = True; // All below record to CR, except for where we return at case end.
 
       switch (opc2) {
       case 0x01C: // and (AND, PPC32 p356)
@@ -3519,6 +3747,64 @@ static Bool dis_int_logic ( UInt theInst
     	  return True;
       }
 
+       case 0x0FC: // bpermd (Bit Permute Doubleword)
+       {
+          /* This is a lot of rigmarole to emulate bpermd like this, as it
+           * could be done much faster by implementing a call to the native
+           * instruction.  However, where possible I want to avoid using new
+           * native instructions so that we can use valgrind to emulate those
+           * instructions on older PPC64 hardware.
+           */
+ #define BPERMD_IDX_MASK 0x00000000000000FFULL
+ #define BPERMD_BIT_MASK 0x8000000000000000ULL
+          int i;
+          IRExpr * rS_expr = mkexpr(rS);
+          IRExpr * res = binop(Iop_And64, mkU64(0), mkU64(0));
+          DIP("bpermd r%u,r%u,r%u\n", rA_addr, rS_addr, rB_addr);
+          for (i = 0; i < 8; i++) {
+             IRTemp idx_tmp = newTemp( Ity_I64 );
+             IRTemp perm_bit = newTemp( Ity_I64 );
+             IRTemp idx = newTemp( Ity_I8 );
+             IRTemp idx_LT64 = newTemp( Ity_I1 );
+             IRTemp idx_LT64_ity64 = newTemp( Ity_I64 );
+
+             assign( idx_tmp,
+                     binop( Iop_And64, mkU64( BPERMD_IDX_MASK ), rS_expr ) );
+             assign( idx_LT64,
+                           binop( Iop_CmpLT64U, mkexpr( idx_tmp ), mkU64( 64 ) ) );
+             assign( idx,
+                           binop( Iop_And8,
+                                  unop( Iop_1Sto8,
+                                        mkexpr(idx_LT64) ),
+                                  unop( Iop_64to8, mkexpr( idx_tmp ) ) ) );
+             /* If idx_LT64 == 0, we must force the perm bit to '0'. Below, we se idx
+              * to determine which bit of rB to use for the perm bit, and then we shift
+              * that bit to the MSB position.  We AND that with a 64-bit-ized idx_LT64
+              * to set the final perm bit.
+              */
+             assign( idx_LT64_ity64,
+                           unop( Iop_32Uto64, unop( Iop_1Uto32, mkexpr(idx_LT64 ) ) ) );
+             assign( perm_bit,
+                           binop( Iop_And64,
+                                  mkexpr( idx_LT64_ity64 ),
+                                  binop( Iop_Shr64,
+                                         binop( Iop_And64,
+                                                mkU64( BPERMD_BIT_MASK ),
+                                                binop( Iop_Shl64,
+                                                       mkexpr( rB ),
+                                                       mkexpr( idx ) ) ),
+                                         mkU8( 63 ) ) ) );
+             res = binop( Iop_Or64,
+                                res,
+                                binop( Iop_Shl64,
+                                       mkexpr( perm_bit ),
+                                       mkU8( i ) ) );
+             rS_expr = binop( Iop_Shr64, rS_expr, mkU8( 8 ) );
+          }
+          putIReg(rA_addr, res);
+          return True;
+       }
+
       default:
          vex_printf("dis_int_logic(ppc)(opc2)\n");
          return False;
@@ -5767,7 +6053,21 @@ static Bool dis_int_ldst_rev ( UInt theI
          assign( w1, mkNarrowTo32(ty, getIReg(rS_addr)) );
          storeBE( mkexpr(EA), gen_byterev32(w1) );
          break;
-      
+
+      case 0x294: // stdbrx (Store Doubleword Byte-Reverse Indexed)
+      {
+         IRTemp lo = newTemp(Ity_I32);
+         IRTemp hi = newTemp(Ity_I32);
+         IRTemp rS = newTemp(Ity_I64);
+         assign( rS, getIReg( rS_addr ) );
+         DIP("stdbrx r%u,r%u,r%u\n", rS_addr, rA_addr, rB_addr);
+         assign(lo, unop(Iop_64HIto32, mkexpr(rS)));
+         assign(hi, unop(Iop_64to32, mkexpr(rS)));
+         storeBE( mkexpr( EA ),
+                  binop( Iop_32HLto64, gen_byterev32( hi ), gen_byterev32( lo ) ) );
+         break;
+      }
+
       default:
          vex_printf("dis_int_ldst_rev(ppc)(opc2)\n");
          return False;
@@ -6895,18 +7195,9 @@ static Bool dis_fp_multadd ( UInt theIns
  *  Otherwise fg_flag is set to 0.
  *
  */
-static Bool dis_fp_ftdiv ( UInt theInstr )
+static IRExpr * do_fp_tdiv(IRTemp frA_I64, IRTemp frB_I64)
 {
-   UChar opc1     = ifieldOPC(theInstr);
-   UChar crfD     = toUChar( IFIELD( theInstr, 23, 3 ) );
-   UChar b21to22  = toUChar( IFIELD( theInstr, 21, 2 ) );
-   UChar frA_addr = ifieldRegA(theInstr);
-   UChar frB_addr = ifieldRegB(theInstr);
-   UChar b0       = ifieldBIT0(theInstr);
-
    // The following temps are for holding intermediate results
-   IRTemp frA_I64     = newTemp(Ity_I64);
-   IRTemp frB_I64     = newTemp(Ity_I64);
    IRTemp e_a = newTemp(Ity_I32);
    IRTemp e_b = newTemp(Ity_I32);
    IRTemp frA_exp_shR = newTemp(Ity_I32);
@@ -6927,19 +7218,11 @@ static Bool dis_fp_ftdiv ( UInt theInstr
    IRTemp  fraNotZero_tmp = newTemp(Ity_I1);
 
 /* The following are the flags that are set by OR'ing the results of
- * all the tests done for ftdiv.  These flags are the input to the specified CR.
+ * all the tests done for tdiv.  These flags are the input to the specified CR.
  */
    IRExpr * fe_flag, * fl_flag, * fg_flag;
 
-
-   if (opc1 != 0x3F || b21to22 != 0 || b0 != 0) {
-      vex_printf("dis_fp_ftdiv(ppc)(instr)\n");
-      return False;
-   }
-
    // Create temps that will be used throughout the following tests.
-   assign( frA_I64, unop( Iop_ReinterpF64asI64, getFReg( frA_addr ) ) );
-   assign( frB_I64, unop( Iop_ReinterpF64asI64, getFReg( frB_addr ) ) );
    assign( frA_exp_shR, fp_exp_part( frA_I64 ) );
    assign( frB_exp_shR, fp_exp_part( frB_I64 ) );
    /* Let e_[a|b] be the unbiased exponent: i.e. exp - 1023. */
@@ -7095,11 +7378,35 @@ static Bool dis_fp_ftdiv ( UInt theInstr
                                                         frbDenorm ) ) );
    fg_flag = unop(Iop_1Uto32, fg_flag);
 
-   putGST_field( PPC_GST_CR, binop( Iop_Or32,
-                           binop( Iop_Or32,
-                                  binop( Iop_Shl32, fl_flag, mkU8( 3 ) ),
-                                  binop( Iop_Shl32, fg_flag, mkU8( 2 ) ) ),
-                           binop( Iop_Shl32, fe_flag, mkU8( 1 ) ) ), crfD );
+   return binop( Iop_Or32,
+                 binop( Iop_Or32,
+                        binop( Iop_Shl32, fl_flag, mkU8( 3 ) ),
+                        binop( Iop_Shl32, fg_flag, mkU8( 2 ) ) ),
+                 binop( Iop_Shl32, fe_flag, mkU8( 1 ) ) );
+}
+
+static Bool dis_fp_ftdiv ( UInt theInstr )
+{
+   UChar opc1     = ifieldOPC(theInstr);
+   UChar crfD     = toUChar( IFIELD( theInstr, 23, 3 ) );
+   UChar b21to22  = toUChar( IFIELD( theInstr, 21, 2 ) );
+   UChar frA_addr = ifieldRegA(theInstr);
+   UChar frB_addr = ifieldRegB(theInstr);
+   UChar b0       = ifieldBIT0(theInstr);
+
+   IRTemp frA_I64     = newTemp(Ity_I64);
+   IRTemp frB_I64     = newTemp(Ity_I64);
+
+
+   if (opc1 != 0x3F || b21to22 != 0 || b0 != 0) {
+      vex_printf("dis_fp_ftdiv(ppc)(instr)\n");
+      return False;
+   }
+
+   assign( frA_I64, unop( Iop_ReinterpF64asI64, getFReg( frA_addr ) ) );
+   assign( frB_I64, unop( Iop_ReinterpF64asI64, getFReg( frB_addr ) ) );
+
+   putGST_field( PPC_GST_CR, do_fp_tdiv(frA_I64, frB_I64), crfD );
 
    DIP("ftdiv crf%d,fr%u,fr%u\n", crfD, frA_addr, frB_addr);
    return True;
@@ -7288,6 +7595,20 @@ static Bool dis_fp_round ( UInt theInstr
       set_FPRF = False;
       break;
 
+   case 0x08F: case 0x08E: // fctiwu[z]
+      DIP("fctiwu%s%s fr%u,fr%u\n", opc2 == 0x08F ? "z" : "",
+               flag_rC ? ".":"", frD_addr, frB_addr);
+      assign( r_tmp32,
+              binop( Iop_F64toI32U,
+                     opc2 == 0x08F ? mkU32( Irrm_ZERO ) : rm,
+                     mkexpr( frB ) ) );
+      assign( frD, unop( Iop_ReinterpI64asF64,
+                         unop( Iop_32Uto64, mkexpr(r_tmp32))));
+      /* FPRF is undefined after fctiwz.  Leave unchanged. */
+      set_FPRF = False;
+      break;
+
+
    case 0x32E: // fctid (Float Conv to Int DWord, PPC64 p437)
       DIP("fctid%s fr%u,fr%u\n", flag_rC ? ".":"", frD_addr, frB_addr);
       assign( r_tmp64,
@@ -7306,6 +7627,17 @@ static Bool dis_fp_round ( UInt theInstr
       set_FPRF = False;
       break;
 
+   case 0x3AE: case 0x3AF: // fctidu[z] (Float Conv to Int DWord Unsigned [Round to Zero])
+   {
+      DIP("fctidu%s%s fr%u,fr%u\n", opc2 == 0x3AE ? "" : "z",
+               flag_rC ? ".":"", frD_addr, frB_addr);
+      assign( r_tmp64,
+              binop(Iop_F64toI64U, opc2 == 0x3AE ? rm : mkU32(Irrm_ZERO), mkexpr(frB)) );
+      assign( frD, unop( Iop_ReinterpI64asF64, mkexpr(r_tmp64)) );
+      /* FPRF is undefined after fctidz.  Leave unchanged. */
+      set_FPRF = False;
+      break;
+   }
    case 0x34E: // fcfid (Float Conv from Int DWord, PPC64 p434)
       DIP("fcfid%s fr%u,fr%u\n", flag_rC ? ".":"", frD_addr, frB_addr);
       assign( r_tmp64, unop( Iop_ReinterpF64asI64, mkexpr(frB)) );
@@ -7810,7 +8142,7 @@ static Bool dis_av_procctl ( UInt theIns
 }
 
 /*
- *
+ * VSX scalar and vector convert instructions
  */
 static Bool
 dis_vx_conv ( UInt theInstr, UInt opc2 )
@@ -7821,7 +8153,6 @@ dis_vx_conv ( UInt theInstr, UInt opc2 )
    UChar XB = ifieldRegXB( theInstr );
    IRTemp frB = newTemp(Ity_F64);
    IRTemp r_tmp64 = newTemp(Ity_I64);
-   IRExpr* rm = get_IR_roundingmode();
 
    if (opc1 != 0x3C) {
       vex_printf( "dis_vx_conv(ppc)(instr)\n" );
@@ -7829,7 +8160,7 @@ dis_vx_conv ( UInt theInstr, UInt opc2 )
    }
 
    assign(frB, unop(Iop_ReinterpI64asF64, unop(Iop_V128HIto64, getVSReg( XB ))));
-   /* For all the VSX convert instructions, the contents of doubleword element 1
+   /* For all the VSX scalar convert instructions, the contents of doubleword element 1
     * of VSX[XT] are undefined after the operation; therefore, we can simply
     * move the entire array element where it makes sense to do so.
     */
@@ -7844,6 +8175,27 @@ dis_vx_conv ( UInt theInstr, UInt opc2 )
                                                  mkU32( Irrm_ZERO ),
                                                  mkexpr( frB ) ), mkU64( 0 ) ) );
       break;
+   case 0x0b0: // xscvdpsxws (VSX Scalar truncate Double-Precision to integer and
+               //             Convert to Signed Integer Word format with Saturate)
+      DIP("xscvdpsxws v%u,v%u\n",  (UInt)XT, (UInt)XB);
+      putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          unop( Iop_32Sto64,
+                                binop( Iop_F64toI32S,
+                                       mkU32( Irrm_ZERO ),
+                                       mkexpr( frB ) ) ),
+                          mkU64( 0ULL ) ) );
+         break;
+   case 0x290: // xscvdpuxds (VSX Scalar truncate Double-Precision integer and Convert
+               //             to Unsigned Integer Doubleword format with Saturate)
+      DIP("xscvdpuxds v%u,v%u\n",  (UInt)XT, (UInt)XB);
+      putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_F64toI64U,
+                                 mkU32( Irrm_ZERO ),
+                                 mkexpr( frB ) ),
+                          mkU64( 0ULL ) ) );
+      break;
    case 0x2F0:
       // xscvsxddp (VSX Scalar Convert and round Signed Integer Doubleword to
       //            Double-Precision format)
@@ -7852,7 +8204,7 @@ dis_vx_conv ( UInt theInstr, UInt opc2 )
       assign( r_tmp64, unop( Iop_ReinterpF64asI64, mkexpr(frB)) );
       putVSReg( XT,
                    binop( Iop_64HLtoV128, unop( Iop_ReinterpF64asI64,
-                                                binop( Iop_I64StoF64, rm,
+                                                binop( Iop_I64StoF64, get_IR_roundingmode(),
                                                        mkexpr( r_tmp64 ) ) ),
                           mkU64( 0 ) ) );
       break;
@@ -7864,11 +8216,92 @@ dis_vx_conv ( UInt theInstr, UInt opc2 )
       assign( r_tmp64, unop( Iop_ReinterpF64asI64, mkexpr(frB)) );
       putVSReg( XT,
                    binop( Iop_64HLtoV128, unop( Iop_ReinterpF64asI64,
-                                                binop( Iop_I64UtoF64, rm,
+                                                binop( Iop_I64UtoF64, get_IR_roundingmode(),
                                                        mkexpr( r_tmp64 ) ) ),
                           mkU64( 0 ) ) );
       break;
 
+   case 0x1b0: // xvcvdpsxws (VSX Vector truncate Double-Precision to integer and Convert
+               //             to Signed Integer Word format with Saturate)
+   {
+      IRTemp frB2 = newTemp(Ity_F64);
+      IRTemp hiResult_32 = newTemp(Ity_I32);
+      IRTemp loResult_32 = newTemp(Ity_I32);
+      IRExpr* rmZero = mkU32(Irrm_ZERO);
+
+      DIP("xvcvdpsxws v%u,v%u\n",  (UInt)XT, (UInt)XB);
+      assign(frB2, unop(Iop_ReinterpI64asF64, unop(Iop_V128to64, getVSReg( XB ))));
+      assign(hiResult_32, binop(Iop_F64toI32S, rmZero, mkexpr(frB)));
+      assign(loResult_32, binop(Iop_F64toI32S, rmZero, mkexpr(frB2)));
+      putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          unop( Iop_32Sto64, mkexpr( hiResult_32 ) ),
+                          unop( Iop_32Sto64, mkexpr( loResult_32 ) ) ) );
+      break;
+   }
+   case 0x130: // xvcvspsxws (VSX Vector truncate Single-Precision to integer and
+               // Convert to Signed Integer Word format with Saturate)
+   {
+      IRTemp tempResult = newTemp(Ity_V128);
+      IRTemp b3, b2, b1, b0;
+      IRTemp res0 = newTemp(Ity_I32);
+      IRTemp res1 = newTemp(Ity_I32);
+      IRTemp res2 = newTemp(Ity_I32);
+      IRTemp res3 = newTemp(Ity_I32);
+      IRTemp b0_32 = newTemp(Ity_I32);
+      IRTemp b1_32 = newTemp(Ity_I32);
+      IRTemp b2_32 = newTemp(Ity_I32);
+      IRTemp b3_32 = newTemp(Ity_I32);
+      IRTemp hi64 = newTemp(Ity_I64);
+      IRTemp lo64 = newTemp(Ity_I64);
+      IRExpr * b0_result, * b1_result, * b2_result, * b3_result;
+      b3 = b2 = b1 = b0 = IRTemp_INVALID;
+
+      DIP("xvcvspsxws v%u,v%u\n",  (UInt)XT, (UInt)XB);
+      /* The xvcvspsxws instruction is similar to vctsxs, except if src is a NaN,
+       * then result is set to 0x80000000.  */
+      assign(tempResult, unop(Iop_QFtoI32Sx4_RZ, getVSReg(XB)));
+      breakV128to4x64U(getVSReg(XB), &b3, &b2, &b1, &b0);
+      assign(b3_32, unop(Iop_64to32, mkexpr(b3)));
+      assign(b2_32, unop(Iop_64to32, mkexpr(b2)));
+      assign(b1_32, unop(Iop_64to32, mkexpr(b1)));
+      assign(b0_32, unop(Iop_64to32, mkexpr(b0)));
+
+      assign( hi64, unop(Iop_V128HIto64, mkexpr(tempResult)) );
+      assign( lo64, unop(Iop_V128to64,   mkexpr(tempResult)) );
+      assign( res3, unop(Iop_64HIto32, mkexpr(hi64)) );
+      assign( res2, unop(Iop_64to32,   mkexpr(hi64)) );
+      assign( res1, unop(Iop_64HIto32, mkexpr(lo64)) );
+      assign( res0, unop(Iop_64to32,   mkexpr(lo64)) );
+
+      b3_result = IRExpr_Mux0X(unop(Iop_1Uto8, is_NaN_32(b3_32)),
+                               // else: result is from the Iop_QFtoI32Sx4_RZ
+                               mkexpr(res3),
+                               // then: result is 0x80000000
+                               mkU32(0x80000000));
+      b2_result = IRExpr_Mux0X(unop(Iop_1Uto8, is_NaN_32(b2_32)),
+                               // else: result is from the Iop_QFtoI32Sx4_RZ
+                               mkexpr(res2),
+                               // then: result is 0x80000000
+                               mkU32(0x80000000));
+      b1_result = IRExpr_Mux0X(unop(Iop_1Uto8, is_NaN_32(b1_32)),
+                               // else: result is from the Iop_QFtoI32Sx4_RZ
+                               mkexpr(res1),
+                               // then: result is 0x80000000
+                               mkU32(0x80000000));
+      b0_result = IRExpr_Mux0X(unop(Iop_1Uto8, is_NaN_32(b0_32)),
+                               // else: result is from the Iop_QFtoI32Sx4_RZ
+                               mkexpr(res0),
+                               // then: result is 0x80000000
+                               mkU32(0x80000000));
+
+      putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_32HLto64, b3_result, b2_result ),
+                          binop( Iop_32HLto64, b1_result, b0_result ) ) );
+      break;
+   }
+
    default:
       vex_printf( "dis_vx_conv(ppc)(opc2)\n" );
       return False;
@@ -7877,10 +8310,756 @@ dis_vx_conv ( UInt theInstr, UInt opc2 )
 }
 
 /*
+ * VSX vector Double Precision Floating Point Arithmetic Instructions
+ */
+static Bool
+dis_vxv_dp_arith ( UInt theInstr, UInt opc2 )
+{
+   /* XX3-Form */
+   UChar opc1 = ifieldOPC( theInstr );
+   UChar XT = ifieldRegXT( theInstr );
+   UChar XA = ifieldRegXA( theInstr );
+   UChar XB = ifieldRegXB( theInstr );
+   IRExpr* rm = get_IR_roundingmode();
+   IRTemp frA = newTemp(Ity_F64);
+   IRTemp frB = newTemp(Ity_F64);
+   IRTemp frA2 = newTemp(Ity_F64);
+   IRTemp frB2 = newTemp(Ity_F64);
+
+   if (opc1 != 0x3C) {
+      vex_printf( "dis_vxv_dp_arith(ppc)(instr)\n" );
+      return False;
+   }
+
+   assign(frA,  unop(Iop_ReinterpI64asF64, unop(Iop_V128HIto64, getVSReg( XA ))));
+   assign(frB,  unop(Iop_ReinterpI64asF64, unop(Iop_V128HIto64, getVSReg( XB ))));
+   assign(frA2, unop(Iop_ReinterpI64asF64, unop(Iop_V128to64, getVSReg( XA ))));
+   assign(frB2, unop(Iop_ReinterpI64asF64, unop(Iop_V128to64, getVSReg( XB ))));
+
+   switch (opc2) {
+      case 0x1E0: // xvdivdp (VSX Vector Divide Double-Precision)
+      case 0x1C0: // xvmuldp (VSX Vector Multiply Double-Precision)
+      case 0x180: // xvadddp (VSX Vector Add Double-Precision)
+      case 0x1A0: // xvsubdp (VSX Vector Subtract Double-Precision)
+      {
+         IROp mOp;
+         Char * oper_name;
+         switch (opc2) {
+            case 0x1E0:
+               mOp = Iop_DivF64;
+               oper_name = "div";
+               break;
+            case 0x1C0:
+               mOp = Iop_MulF64;
+               oper_name = "mul";
+               break;
+            case 0x180:
+               mOp = Iop_AddF64;
+               oper_name = "add";
+               break;
+            case 0x1A0:
+               mOp = Iop_SubF64;
+               oper_name = "sub";
+               break;
+
+            default:
+               vpanic("The impossible happened: dis_vxv_dp_arith(ppc)");
+         }
+         IRTemp hiResult = newTemp(Ity_I64);
+         IRTemp loResult = newTemp(Ity_I64);
+         DIP("xv%sdp v%d,v%d,v%d\n", oper_name, (UInt)XT, (UInt)XA, (UInt)XB);
+
+         assign( hiResult,
+                 unop( Iop_ReinterpF64asI64,
+                       triop( mOp, rm, mkexpr( frA ), mkexpr( frB ) ) ) );
+         assign( loResult,
+                 unop( Iop_ReinterpF64asI64,
+                       triop( mOp, rm, mkexpr( frA2 ), mkexpr( frB2 ) ) ) );
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128, mkexpr( hiResult ), mkexpr( loResult ) ) );
+         break;
+      }
+
+      case 0x184: case 0x1A4: // xvmaddadp, xvmaddmdp (VSX Vector Multiply-Add Double-Precision)
+      case 0x1C4: case 0x1E4: // xvmsubadp, xvmsubmdp (VSX Vector Multiply-Subtract Double-Precision)
+      case 0x384: case 0x3A4: // xvnmaddadp, xvnmaddmdp (VSX Vector Negate Multiply-Add Double-Precision)
+      case 0x3C4: case 0x3E4: // xvnmsubadp, xvnmsubmdp (VSX Vector Negate Multiply-Subtract Double-Precision)
+      {
+         /* xvm{add|sub}mdp XT,XA,XB is element-wise equivalent to fm{add|sub} FRT,FRA,FRC,FRB with . . .
+          *    XT == FRC
+          *    XA == FRA
+          *    XB == FRB
+          *
+          * and for xvm{add|sub}adp . . .
+          *    XT == FRB
+          *    XA == FRA
+          *    XB == FRC
+          */
+         Bool negate;
+         IROp mOp = Iop_INVALID;
+         Char * oper_name = NULL;
+         Bool mdp = False;
+
+         switch (opc2) {
+            case 0x184: case 0x1A4:
+            case 0x384: case 0x3A4:
+               mOp = Iop_MAddF64;
+               oper_name = "add";
+               mdp = (opc2 & 0x0FF) == 0x0A4;
+               break;
+
+            case 0x1C4: case 0x1E4:
+            case 0x3C4: case 0x3E4:
+               mOp = Iop_MSubF64;
+               oper_name = "sub";
+               mdp = (opc2 & 0x0FF) == 0x0E4;
+               break;
+
+            default:
+               vpanic("The impossible happened: dis_vxv_sp_arith(ppc)");
+         }
+
+         switch (opc2) {
+            case 0x384: case 0x3A4:
+            case 0x3C4: case 0x3E4:
+               negate = True;
+               break;
+            default:
+               negate = False;
+         }
+         IRTemp hiResult = newTemp(Ity_I64);
+         IRTemp loResult = newTemp(Ity_I64);
+         IRTemp frT = newTemp(Ity_F64);
+         IRTemp frT2 = newTemp(Ity_F64);
+         DIP("xv%sm%s%s v%d,v%d,v%d\n", negate ? "n" : "", oper_name, mdp ? "mdp" : "adp",
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         assign(frT,  unop(Iop_ReinterpI64asF64, unop(Iop_V128HIto64, getVSReg( XT ) ) ) );
+         assign(frT2, unop(Iop_ReinterpI64asF64, unop(Iop_V128to64, getVSReg( XT ) ) ) );
+
+         assign( hiResult,
+                 unop( Iop_ReinterpF64asI64,
+                       qop( mOp,
+                            rm,
+                            mkexpr( frA ),
+                            mkexpr( mdp ? frT : frB ),
+                            mkexpr( mdp ? frB : frT ) ) ) );
+         assign( loResult,
+                 unop( Iop_ReinterpF64asI64,
+                       qop( mOp,
+                            rm,
+                            mkexpr( frA2 ),
+                            mkexpr( mdp ? frT2 : frB2 ),
+                            mkexpr( mdp ? frB2 : frT2 ) ) ) );
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          mkexpr( negate ? getNegatedResult( hiResult )
+                                         : hiResult ),
+                          mkexpr( negate ? getNegatedResult( loResult )
+                                         : loResult ) ) );
+         break;
+      }
+
+      default:
+         vex_printf( "dis_vxv_dp_arith(ppc)(opc2)\n" );
+         return False;
+   }
+   return True;
+}
+
+/*
+ * VSX vector Single Precision Floating Point Arithmetic Instructions
+ */
+static Bool
+dis_vxv_sp_arith ( UInt theInstr, UInt opc2 )
+{
+   /* XX3-Form */
+   UChar opc1 = ifieldOPC( theInstr );
+   UChar XT = ifieldRegXT( theInstr );
+   UChar XA = ifieldRegXA( theInstr );
+   UChar XB = ifieldRegXB( theInstr );
+   IRExpr* rm = get_IR_roundingmode();
+   IRTemp a3, a2, a1, a0;
+   IRTemp b3, b2, b1, b0;
+   IRTemp res0 = newTemp(Ity_I32);
+   IRTemp res1 = newTemp(Ity_I32);
+   IRTemp res2 = newTemp(Ity_I32);
+   IRTemp res3 = newTemp(Ity_I32);
+
+   a3 = a2 = a1 = a0 = IRTemp_INVALID;
+   b3 = b2 = b1 = b0 = IRTemp_INVALID;
+
+   if (opc1 != 0x3C) {
+      vex_printf( "dis_vxv_sp_arith(ppc)(instr)\n" );
+      return False;
+   }
+
+   switch (opc2) {
+      case 0x100: // xvaddsp (VSX Vector Add Single-Precision)
+         DIP("xvaddsp v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB);
+         putVSReg( XT, binop(Iop_Add32Fx4, getVSReg( XA ), getVSReg( XB )) );
+         break;
+
+      case 0x140: // xvmulsp (VSX Vector Multiply Single-Precision)
+         DIP("xvmulsp v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB);
+         putVSReg( XT, binop(Iop_Mul32Fx4, getVSReg( XA ), getVSReg( XB )) );
+         break;
+
+      case 0x120: // xvsubsp (VSX Vector Subtract Single-Precision)
+         DIP("xvsubsp v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB);
+         putVSReg( XT, binop(Iop_Sub32Fx4, getVSReg( XA ), getVSReg( XB )) );
+         break;
+
+      case 0x160: // xvdivsp (VSX Vector Divide Single-Precision)
+      {
+         /* Iop_Div32Fx4 is not implemented for ppc64 (in host_ppc_{isel|defs}.c.
+          * So there are two choices:
+          *   1. Implement the xvdivsp with a native insn; or
+          *   2. Extract the 4 single precision floats from each vector
+          *      register inputs and perform fdivs on each pair
+          * I will do the latter, due to the general philosophy of
+          * reusing existing implementations when practical.
+          */
+         DIP("xvdivsp v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB);
+         breakV128to4xF64( getVSReg( XA ), &a3, &a2, &a1, &a0 );
+         breakV128to4xF64( getVSReg( XB ), &b3, &b2, &b1, &b0 );
+
+         assign( res0,
+              unop( Iop_ReinterpF32asI32,
+                    unop( Iop_TruncF64asF32,
+                          triop( Iop_DivF64r32, rm, mkexpr( a0 ), mkexpr( b0 ) ) ) ) );
+         assign( res1,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, mkexpr( a1 ), mkexpr( b1 ) ) ) ) );
+         assign( res2,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, mkexpr( a2 ), mkexpr( b2 ) ) ) ) );
+         assign( res3,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, mkexpr( a3 ), mkexpr( b3 ) ) ) ) );
+
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_32HLto64, mkexpr( res3 ), mkexpr( res2 ) ),
+                          binop( Iop_32HLto64, mkexpr( res1 ), mkexpr( res0 ) ) ) );
+         break;
+      }
+
+      case 0x104: case 0x124: // xvmaddasp, xvmaddmsp (VSX Vector Multiply-Add Single-Precision)
+      case 0x144: case 0x164: // xvmsubasp, xvmsubmsp (VSX Vector Multiply-Subtract Single-Precision)
+      case 0x304: case 0x324: // xvnmaddasp, xvnmaddmsp (VSX Vector Negate Multiply-Add Single-Precision)
+      case 0x344: case 0x364: // xvnmsubasp, xvnmsubmsp (VSX Vector Negate Multiply-Subtract Single-Precision)
+      {
+         IRTemp t3, t2, t1, t0;
+         Bool msp = False;
+         Bool negate;
+         Char * oper_name = NULL;
+         IROp mOp = Iop_INVALID;
+         switch (opc2) {
+            case 0x104: case 0x124:
+            case 0x304: case 0x324:
+               msp = (opc2 & 0x0FF) == 0x024;
+               mOp = Iop_MAddF64r32;
+               oper_name = "madd";
+               break;
+
+            case 0x144: case 0x164:
+            case 0x344: case 0x364:
+               msp = (opc2 & 0x0FF) == 0x064;
+               mOp = Iop_MSubF64r32;
+               oper_name = "sub";
+               break;
+
+            default:
+               vpanic("The impossible happened: dis_vxv_sp_arith(ppc)");
+         }
+
+         switch (opc2) {
+            case 0x304: case 0x324:
+            case 0x344: case 0x364:
+               negate = True;
+               break;
+
+            default:
+               negate = False;
+         }
+
+         DIP("xv%sm%s%s v%d,v%d,v%d\n", negate ? "n" : "", oper_name, msp ? "msp" : "asp",
+             (UInt)XT, (UInt)XA, (UInt)XB);
+
+         t3 = t2 = t1 = t0 = IRTemp_INVALID;
+         breakV128to4xF64( getVSReg( XA ), &a3, &a2, &a1, &a0 );
+         breakV128to4xF64( getVSReg( XB ), &b3, &b2, &b1, &b0 );
+         breakV128to4xF64( getVSReg( XT ), &t3, &t2, &t1, &t0 );
+
+         assign( res0,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             qop( mOp,
+                                  rm,
+                                  mkexpr( a0 ),
+                                  mkexpr( msp ? t0 : b0 ),
+                                  mkexpr( msp ? b0 : t0 ) ) ) ) );
+         assign( res1,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             qop( mOp,
+                                  rm,
+                                  mkexpr( a1 ),
+                                  mkexpr( msp ? t1 : b1 ),
+                                  mkexpr( msp ? b1 : t1 ) ) ) ) );
+         assign( res2,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             qop( mOp,
+                                  rm,
+                                  mkexpr( a2 ),
+                                  mkexpr( msp ? t2 : b2 ),
+                                  mkexpr( msp ? b2 : t2 ) ) ) ) );
+         assign( res3,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             qop( mOp,
+                                  rm,
+                                  mkexpr( a3 ),
+                                  mkexpr( msp ? t3 : b3 ),
+                                  mkexpr( msp ? b3 : t3 ) ) ) ) );
+
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_32HLto64, mkexpr( negate ? getNegatedResult_32( res3 ) : res3 ),
+                                 mkexpr( negate ? getNegatedResult_32( res2 ) : res2 ) ),
+                          binop( Iop_32HLto64, mkexpr( negate ? getNegatedResult_32( res1 ) : res1 ),
+                                 mkexpr( negate ? getNegatedResult_32( res0 ) : res0 ) ) ) );
+
+         break;
+      }
+
+      default:
+         vex_printf( "dis_vxv_sp_arith(ppc)(opc2)\n" );
+         return False;
+   }
+   return True;
+}
+
+typedef enum {
+   PPC_CMP_EQ = 2,
+   PPC_CMP_GT = 4,
+   PPC_CMP_GE = 6,
+   PPC_CMP_LT = 8
+} ppc_cmp_t;
+
+
+/*
+  This helper function takes as input the IRExpr returned
+  from a binop( Iop_CmpF64, fpA, fpB), whose result is returned
+  in IR form.  This helper function converts it to PPC form.
+
+  Map compare result from IR to PPC
+
+  FP cmp result | PPC | IR
+  --------------------------
+  UN            | 0x1 | 0x45
+  EQ            | 0x2 | 0x40
+  GT            | 0x4 | 0x00
+  LT            | 0x8 | 0x01
+
+ condcode = Shl(1, (~(ccIR>>5) & 2)
+                    | ((ccIR ^ (ccIR>>6)) & 1)
+*/
+static IRTemp
+get_fp_cmp_CR_val (IRExpr * ccIR_expr)
+{
+   IRTemp condcode = newTemp( Ity_I32 );
+   IRTemp ccIR = newTemp( Ity_I32 );
+
+   assign(ccIR, ccIR_expr);
+   assign( condcode,
+           binop( Iop_Shl32,
+                  mkU32( 1 ),
+                  unop( Iop_32to8,
+                        binop( Iop_Or32,
+                               binop( Iop_And32,
+                                      unop( Iop_Not32,
+                                            binop( Iop_Shr32,
+                                                   mkexpr( ccIR ),
+                                                   mkU8( 5 ) ) ),
+                                      mkU32( 2 ) ),
+                               binop( Iop_And32,
+                                      binop( Iop_Xor32,
+                                             mkexpr( ccIR ),
+                                             binop( Iop_Shr32,
+                                                    mkexpr( ccIR ),
+                                                    mkU8( 6 ) ) ),
+                                      mkU32( 1 ) ) ) ) ) );
+   return condcode;
+}
+
+/*
+ * Helper function for get_max_min_fp for ascertaining the max or min between two doubles
+ * following these special rules:
+ *   - The max/min of a QNaN and any value is that value
+ *     (When two QNaNs are being compared, the frA QNaN is the return value.)
+ *   - The max/min of any value and an SNaN is that SNaN converted to a QNaN
+ *     (When two SNaNs are being compared, the frA SNaN is converted to a QNaN.)
+ */
+static IRExpr * _get_maxmin_fp_NaN(IRTemp frA_I64, IRTemp frB_I64)
+{
+   IRTemp frA_isNaN = newTemp(Ity_I1);
+   IRTemp frB_isNaN = newTemp(Ity_I1);
+   IRTemp frA_isSNaN = newTemp(Ity_I1);
+   IRTemp frB_isSNaN = newTemp(Ity_I1);
+   IRTemp frA_isQNaN = newTemp(Ity_I1);
+   IRTemp frB_isQNaN = newTemp(Ity_I1);
+
+   assign( frA_isNaN, is_NaN( frA_I64 ) );
+   assign( frB_isNaN, is_NaN( frB_I64 ) );
+   // If operand is a NAN and bit 12 is '0', then it's an SNaN
+   assign( frA_isSNaN,
+           mkAND1( mkexpr(frA_isNaN),
+                   binop( Iop_CmpEQ32,
+                          binop( Iop_And32,
+                                 unop( Iop_64HIto32, mkexpr( frA_I64 ) ),
+                                 mkU32( 0x00080000 ) ),
+                          mkU32( 0 ) ) ) );
+   assign( frB_isSNaN,
+           mkAND1( mkexpr(frB_isNaN),
+                   binop( Iop_CmpEQ32,
+                          binop( Iop_And32,
+                                 unop( Iop_64HIto32, mkexpr( frB_I64 ) ),
+                                 mkU32( 0x00080000 ) ),
+                          mkU32( 0 ) ) ) );
+   assign( frA_isQNaN,
+           mkAND1( mkexpr( frA_isNaN ), unop( Iop_Not1, mkexpr( frA_isSNaN ) ) ) );
+   assign( frB_isQNaN,
+           mkAND1( mkexpr( frB_isNaN ), unop( Iop_Not1, mkexpr( frB_isSNaN ) ) ) );
+
+   /* Based on the rules specified in the function prologue, the algorithm is as follows:
+    *  <<<<<<<<<>>>>>>>>>>>>>>>>>>
+    *   if frA is a SNaN
+    *     result = frA converted to QNaN
+    *   else if frB is a SNaN
+    *     result = frB converted to QNaN
+    *   else if frB is a QNaN
+    *     result = frA
+    *   // One of frA or frB was a NaN in order for this function to be called, so
+    *   // if we get to this point, we KNOW that frA must be a QNaN.
+    *   else // frA is a QNaN
+    *     result = frB
+    *  <<<<<<<<<>>>>>>>>>>>>>>>>>>
+    */
+
+#define SNAN_MASK 0x0008000000000000ULL
+   return
+   IRExpr_Mux0X(unop(Iop_1Uto8, mkexpr(frA_isSNaN)),
+                /* else:  if frB is a SNaN */
+                IRExpr_Mux0X(unop(Iop_1Uto8, mkexpr(frB_isSNaN)),
+                             /* else:  if frB is a QNaN */
+                             IRExpr_Mux0X(unop(Iop_1Uto8, mkexpr(frB_isQNaN)),
+                                          /* else:  frA is a QNaN, so result = frB */
+                                          mkexpr(frB_I64),
+                                          /* then: result = frA */
+                                          mkexpr(frA_I64)),
+                             /* then: result = frB converted to QNaN */
+                             binop(Iop_Or64, mkexpr(frB_I64), mkU64(SNAN_MASK))),
+                /* then: result = frA converted to QNaN */
+                binop(Iop_Or64, mkexpr(frA_I64), mkU64(SNAN_MASK)));
+}
+
+/*
+ * Helper function for get_max_min_fp.
+ */
+static IRExpr * _get_maxmin_fp_cmp(IRTemp src1, IRTemp src2, Bool isMin)
+{
+   IRTemp src1cmpsrc2 = get_fp_cmp_CR_val( binop( Iop_CmpF64,
+                                                  unop( Iop_ReinterpI64asF64,
+                                                        mkexpr( src1 ) ),
+                                                  unop( Iop_ReinterpI64asF64,
+                                                        mkexpr( src2 ) ) ) );
+
+   return IRExpr_Mux0X( unop( Iop_1Uto8,
+                              binop( Iop_CmpEQ32,
+                                     mkexpr( src1cmpsrc2 ),
+                                     mkU32( isMin ? PPC_CMP_LT : PPC_CMP_GT ) ) ),
+                        /* else: use src2 */
+                        mkexpr( src2 ),
+                        /* then: use src1 */
+                        mkexpr( src1 ) );
+}
+
+/*
+ * Helper function for "Maximum/Minimum Double Precision" operations.
+ * Arguments: frA and frb are Ity_I64
+ * Returns Ity_I64 IRExpr that answers the "which is Maxiumum/Minimum" question
+ */
+static IRExpr * get_max_min_fp(IRTemp frA_I64, IRTemp frB_I64, Bool isMin)
+{
+   /* There are three special cases where get_fp_cmp_CR_val is not helpful
+    * for ascertaining the maximum between two doubles:
+    *   1. The max/min of +0 and -0 is +0.
+    *   2. The max/min of a QNaN and any value is that value.
+    *   3. The max/min of any value and an SNaN is that SNaN converted to a QNaN.
+    * We perform the check for [+/-]0 here in this function and use the
+    * _get_maxmin_fp_NaN helper for the two NaN cases; otherwise we call _get_maxmin_fp_cmp
+    * to do the standard comparison function.
+    */
+   IRTemp anyNaN = newTemp(Ity_I1);
+   IRTemp frA_isZero = newTemp(Ity_I1);
+   IRTemp frB_isZero = newTemp(Ity_I1);
+   assign(frA_isZero, is_Zero(frA_I64));
+   assign(frB_isZero, is_Zero(frB_I64));
+   assign(anyNaN, mkOR1(is_NaN(frA_I64), is_NaN(frB_I64)));
+#define MINUS_ZERO 0x8000000000000000ULL
+
+   return IRExpr_Mux0X( unop( Iop_1Uto8,
+                              /* If both arguments are zero . . . */
+                              mkAND1( mkexpr( frA_isZero ), mkexpr( frB_isZero ) ) ),
+                        /* else: check if either input is a NaN*/
+                        IRExpr_Mux0X( unop( Iop_1Uto8, mkexpr( anyNaN ) ),
+                                      /* else: use "comparison helper" */
+                                      _get_maxmin_fp_cmp( frB_I64, frA_I64, isMin ),
+                                      /* then: use "NaN helper" */
+                                      _get_maxmin_fp_NaN( frA_I64, frB_I64 ) ),
+                        /* then: if frA is -0 and isMin==True, return -0;
+                         *     else if frA is +0 and isMin==False; return +0;
+                         *     otherwise, simply return frB. */
+                        IRExpr_Mux0X( unop( Iop_1Uto8,
+                                            binop( Iop_CmpEQ32,
+                                                   unop( Iop_64HIto32,
+                                                         mkexpr( frA_I64 ) ),
+                                                   mkU32( isMin ? 0x80000000 : 0 ) ) ),
+                                      mkexpr( frB_I64 ),
+                                      mkU64( isMin ? MINUS_ZERO : 0ULL ) ) );
+}
+/*
+ * Miscellaneous VSX vector instructions
+ */
+static Bool
+dis_vxv_misc ( UInt theInstr, UInt opc2 )
+{
+   /* XX3-Form */
+   UChar opc1 = ifieldOPC( theInstr );
+   UChar XT = ifieldRegXT( theInstr );
+   UChar XB = ifieldRegXB( theInstr );
+
+   if (opc1 != 0x3C) {
+      vex_printf( "dis_vxv_misc(ppc)(instr)\n" );
+      return False;
+   }
+
+   switch (opc2) {
+      case 0x134: // xvresp (VSX Vector Reciprocal Estimate Single-Precision)
+      {
+         IRTemp b3, b2, b1, b0;
+         IRTemp res0 = newTemp(Ity_I32);
+         IRTemp res1 = newTemp(Ity_I32);
+         IRTemp res2 = newTemp(Ity_I32);
+         IRTemp res3 = newTemp(Ity_I32);
+         IRExpr* rm  = get_IR_roundingmode();
+         IRExpr* ieee_one = IRExpr_Const(IRConst_F64i(0x3ff0000000000000ULL));
+
+         b3 = b2 = b1 = b0 = IRTemp_INVALID;
+         DIP("xvresp v%d,v%d\n", (UInt)XT, (UInt)XB);
+         breakV128to4xF64( getVSReg( XB ), &b3, &b2, &b1, &b0 );
+         assign( res0,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, ieee_one, mkexpr( b0 ) ) ) ) );
+         assign( res1,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, ieee_one, mkexpr( b1 ) ) ) ) );
+         assign( res2,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, ieee_one, mkexpr( b2 ) ) ) ) );
+         assign( res3,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             triop( Iop_DivF64r32, rm, ieee_one, mkexpr( b3 ) ) ) ) );
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_32HLto64, mkexpr( res3 ), mkexpr( res2 ) ),
+                          binop( Iop_32HLto64, mkexpr( res1 ), mkexpr( res0 ) ) ) );
+         break;
+      }
+      case 0x300: // xvmaxsp (VSX Vector Maximum Single-Precision)
+      case 0x320: // xvminsp (VSX Vector Minimum Single-Precision)
+      {
+         UChar XA = ifieldRegXA( theInstr );
+         IRTemp a3, a2, a1, a0;
+         IRTemp b3, b2, b1, b0;
+         IRTemp res0 = newTemp( Ity_I32 );
+         IRTemp res1 = newTemp( Ity_I32 );
+         IRTemp res2 = newTemp( Ity_I32 );
+         IRTemp res3 = newTemp( Ity_I32 );
+         IRTemp a0_I64 = newTemp( Ity_I64 );
+         IRTemp a1_I64 = newTemp( Ity_I64 );
+         IRTemp a2_I64 = newTemp( Ity_I64 );
+         IRTemp a3_I64 = newTemp( Ity_I64 );
+         IRTemp b0_I64 = newTemp( Ity_I64 );
+         IRTemp b1_I64 = newTemp( Ity_I64 );
+         IRTemp b2_I64 = newTemp( Ity_I64 );
+         IRTemp b3_I64 = newTemp( Ity_I64 );
+
+         Bool isMin = opc2 == 0x320 ? True : False;
+
+         a3 = a2 = a1 = a0 = IRTemp_INVALID;
+         b3 = b2 = b1 = b0 = IRTemp_INVALID;
+         DIP("%s v%d,v%d v%d\n", isMin ? "xvminsp" : "xvmaxsp", (UInt)XT, (UInt)XA, (UInt)XB);
+         breakV128to4xF64( getVSReg( XA ), &a3, &a2, &a1, &a0 );
+         breakV128to4xF64( getVSReg( XB ), &b3, &b2, &b1, &b0 );
+         assign( a0_I64, unop( Iop_ReinterpF64asI64, mkexpr( a0 ) ) );
+         assign( b0_I64, unop( Iop_ReinterpF64asI64, mkexpr( b0 ) ) );
+         assign( a1_I64, unop( Iop_ReinterpF64asI64, mkexpr( a1 ) ) );
+         assign( b1_I64, unop( Iop_ReinterpF64asI64, mkexpr( b1 ) ) );
+         assign( a2_I64, unop( Iop_ReinterpF64asI64, mkexpr( a2 ) ) );
+         assign( b2_I64, unop( Iop_ReinterpF64asI64, mkexpr( b2 ) ) );
+         assign( a3_I64, unop( Iop_ReinterpF64asI64, mkexpr( a3 ) ) );
+         assign( b3_I64, unop( Iop_ReinterpF64asI64, mkexpr( b3 ) ) );
+         assign( res0,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             unop( Iop_ReinterpI64asF64,
+                                   get_max_min_fp( a0_I64, b0_I64, isMin ) ) ) ) );
+         assign( res1,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             unop( Iop_ReinterpI64asF64,
+                                   get_max_min_fp( a1_I64, b1_I64, isMin ) ) ) ) );
+         assign( res2,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             unop( Iop_ReinterpI64asF64,
+                                   get_max_min_fp( a2_I64, b2_I64, isMin ) ) ) ) );
+         assign( res3,
+                 unop( Iop_ReinterpF32asI32,
+                       unop( Iop_TruncF64asF32,
+                             unop( Iop_ReinterpI64asF64,
+                                   get_max_min_fp( a3_I64, b3_I64, isMin ) ) ) ) );
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_32HLto64, mkexpr( res3 ), mkexpr( res2 ) ),
+                          binop( Iop_32HLto64, mkexpr( res1 ), mkexpr( res0 ) ) ) );
+         break;
+      }
+      case 0x380: // xvmaxdp (VSX Vector Maximum Double-Precision)
+      case 0x3A0: // xvmindp (VSX Vector Minimum Double-Precision)
+      {
+         UChar XA = ifieldRegXA( theInstr );
+         IRTemp frA = newTemp(Ity_I64);
+         IRTemp frB = newTemp(Ity_I64);
+         IRTemp frA2 = newTemp(Ity_I64);
+         IRTemp frB2 = newTemp(Ity_I64);
+         Bool isMin = opc2 == 0x3A0 ? True : False;
+
+         assign(frA,  unop(Iop_V128HIto64, getVSReg( XA )));
+         assign(frB,  unop(Iop_V128HIto64, getVSReg( XB )));
+         assign(frA2, unop(Iop_V128to64, getVSReg( XA )));
+         assign(frB2, unop(Iop_V128to64, getVSReg( XB )));
+         DIP("%s v%d,v%d v%d\n", isMin ? "xvmindp" : "xvmaxdp", (UInt)XT, (UInt)XA, (UInt)XB);
+         putVSReg( XT, binop( Iop_64HLtoV128, get_max_min_fp(frA, frB, isMin), get_max_min_fp(frA2, frB2, isMin) ) );
+
+         break;
+      }
+      case 0x3c0: // xvcpsgndp (VSX Vector Copy Sign Double-Precision)
+      {
+         UChar XA = ifieldRegXA( theInstr );
+         IRTemp frA = newTemp(Ity_I64);
+         IRTemp frB = newTemp(Ity_I64);
+         IRTemp frA2 = newTemp(Ity_I64);
+         IRTemp frB2 = newTemp(Ity_I64);
+         assign(frA,  unop(Iop_V128HIto64, getVSReg( XA )));
+         assign(frB,  unop(Iop_V128HIto64, getVSReg( XB )));
+         assign(frA2, unop(Iop_V128to64, getVSReg( XA )));
+         assign(frB2, unop(Iop_V128to64, getVSReg( XB )));
+
+         DIP("xvcpsgndp v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB);
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          binop( Iop_Or64,
+                                 binop( Iop_And64,
+                                        mkexpr( frA ),
+                                        mkU64( SIGN_BIT ) ),
+                                 binop( Iop_And64,
+                                        mkexpr( frB ),
+                                        mkU64( SIGN_MASK ) ) ),
+                          binop( Iop_Or64,
+                                 binop( Iop_And64,
+                                        mkexpr( frA2 ),
+                                        mkU64( SIGN_BIT ) ),
+                                 binop( Iop_And64,
+                                        mkexpr( frB2 ),
+                                        mkU64( SIGN_MASK ) ) ) ) );
+         break;
+      }
+      case 0x340: // xvcpsgnsp
+      {
+         UChar XA = ifieldRegXA( theInstr );
+         IRTemp a3_I64, a2_I64, a1_I64, a0_I64;
+         IRTemp b3_I64, b2_I64, b1_I64, b0_I64;
+         IRTemp resHi = newTemp(Ity_I64);
+         IRTemp resLo = newTemp(Ity_I64);
+
+         a3_I64 = a2_I64 = a1_I64 = a0_I64 = IRTemp_INVALID;
+         b3_I64 = b2_I64 = b1_I64 = b0_I64 = IRTemp_INVALID;
+         DIP("xvcpsgnsp v%d,v%d v%d\n",(UInt)XT, (UInt)XA, (UInt)XB);
+         breakV128to4x64U( getVSReg( XA ), &a3_I64, &a2_I64, &a1_I64, &a0_I64 );
+         breakV128to4x64U( getVSReg( XB ), &b3_I64, &b2_I64, &b1_I64, &b0_I64 );
+
+         assign( resHi,
+                 binop( Iop_32HLto64,
+                        binop( Iop_Or32,
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( a3_I64 ) ),
+                                      mkU32( SIGN_BIT32 ) ),
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( b3_I64 ) ),
+                                      mkU32( SIGN_MASK32) ) ),
+
+                        binop( Iop_Or32,
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( a2_I64 ) ),
+                                      mkU32( SIGN_BIT32 ) ),
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( b2_I64 ) ),
+                                      mkU32( SIGN_MASK32 ) ) ) ) );
+         assign( resLo,
+                 binop( Iop_32HLto64,
+                        binop( Iop_Or32,
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( a1_I64 ) ),
+                                      mkU32( SIGN_BIT32 ) ),
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( b1_I64 ) ),
+                                      mkU32( SIGN_MASK32 ) ) ),
+
+                        binop( Iop_Or32,
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( a0_I64 ) ),
+                                      mkU32( SIGN_BIT32 ) ),
+                               binop( Iop_And32,
+                                      unop(Iop_64to32, mkexpr( b0_I64 ) ),
+                                      mkU32( SIGN_MASK32 ) ) ) ) );
+         putVSReg( XT, binop( Iop_64HLtoV128, mkexpr( resHi ), mkexpr( resLo ) ) );
+         break;
+      }
+
+      default:
+         vex_printf( "dis_vxv_misc(ppc)(opc2)\n" );
+         return False;
+   }
+   return True;
+}
+
+
+/*
  * VSX Scalar Floating Point Arithmetic Instructions
  */
 static Bool
-dis_vx_arith ( UInt theInstr, UInt opc2 )
+dis_vxs_arith ( UInt theInstr, UInt opc2 )
 {
    /* XX3-Form */
    UChar opc1 = ifieldOPC( theInstr );
@@ -7892,7 +9071,7 @@ dis_vx_arith ( UInt theInstr, UInt opc2
    IRTemp frB = newTemp(Ity_F64);
 
    if (opc1 != 0x3C) {
-      vex_printf( "dis_vx_arith(ppc)(instr)\n" );
+      vex_printf( "dis_vxs_arith(ppc)(instr)\n" );
       return False;
    }
 
@@ -7957,13 +9136,9 @@ dis_vx_arith ( UInt theInstr, UInt opc2
           * way it blindly negates the signbit, even if the floating point result is a NaN.
           * So, the TODO is to fix fnmadd (which I'll do in a different patch).
           */
-         ULong signbit_mask = 0x8000000000000000ULL;
          Bool mdp = opc2 == 0x2A4;
          IRTemp frT = newTemp(Ity_F64);
          IRTemp maddResult = newTemp(Ity_I64);
-         IRTemp negatedResult = newTemp(Ity_I64);
-         IRTemp signbit_32 = newTemp(Ity_I32);
-         IRTemp resultantSignbit = newTemp(Ity_I1);
 
          DIP("xsnmadd%sdp v%d,v%d,v%d\n", mdp ? "m" : "a", (UInt)XT, (UInt)XA, (UInt)XB);
          assign( frT, unop( Iop_ReinterpI64asF64, unop( Iop_V128HIto64,
@@ -7972,35 +9147,32 @@ dis_vx_arith ( UInt theInstr, UInt opc2
                                                               mkexpr( frA ),
                                                               mkexpr( mdp ? frT : frB ),
                                                               mkexpr( mdp ? frB : frT ) ) ) );
-         assign( signbit_32, binop( Iop_Shr32,
-                                unop( Iop_64HIto32,
-                                       binop( Iop_And64, mkexpr( maddResult ),
-                                              mkU64( signbit_mask ) ) ),
-                                       mkU8( 31 ) ) );
-         /* We negate the signbit if and only if the intermediate result from the
-          * multiply-add was NOT a NaN.  This is an XNOR predicate.
-          */
-         assign( resultantSignbit,
-                 unop( Iop_Not1,
-                       binop( Iop_CmpEQ32,
-                                     binop( Iop_Xor32, mkexpr( signbit_32 ),
-                                            unop( Iop_1Uto32,
-                                                  is_NaN( maddResult ) ) ),
-                                     mkU32( 1 ) ) ) );
-
-         assign( negatedResult,
-                 binop( Iop_Or64, binop( Iop_And64, mkexpr( maddResult ),
-                                         mkU64( ~signbit_mask ) ),
-                        binop( Iop_32HLto64,
-                               binop( Iop_Shl32,
-                                      unop( Iop_1Uto32,
-                                            mkexpr( resultantSignbit ) ),
-                                      mkU8( 31 ) ), mkU32( 0 ) ) ) );
 
-         putVSReg( XT, binop( Iop_64HLtoV128, mkexpr( negatedResult ),
+         putVSReg( XT, binop( Iop_64HLtoV128, mkexpr( getNegatedResult(maddResult) ),
                               mkU64( 0 ) ) );
          break;
       }
+      case 0x2C4: case 0x2E4: // xsnmsubadp, xsnmsubmdp (VSX Scalar Negative Multiply-Subtract Double-Precision)
+      {
+         IRTemp frT = newTemp(Ity_F64);
+         Bool mdp = opc2 == 0x2E4;
+         IRTemp msubResult = newTemp(Ity_I64);
+
+         DIP("xsnmsub%sdp v%d,v%d,v%d\n", mdp ? "m" : "a", (UInt)XT, (UInt)XA, (UInt)XB);
+         assign( frT, unop( Iop_ReinterpI64asF64, unop( Iop_V128HIto64,
+                                                        getVSReg( XT ) ) ) );
+         assign(msubResult, unop( Iop_ReinterpF64asI64,
+                                      qop( Iop_MSubF64,
+                                           rm,
+                                           mkexpr( frA ),
+                                           mkexpr( mdp ? frT : frB ),
+                                           mkexpr( mdp ? frB : frT ) ) ));
+
+         putVSReg( XT, binop( Iop_64HLtoV128, mkexpr( getNegatedResult(msubResult) ), mkU64( 0 ) ) );
+
+         break;
+      }
+
       case 0x0C0: // xsmuldp (VSX Scalar Multiply Double-Precision)
          DIP("xsmuldp v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB);
          putVSReg( XT, binop( Iop_64HLtoV128, unop( Iop_ReinterpF64asI64,
@@ -8018,13 +9190,35 @@ dis_vx_arith ( UInt theInstr, UInt opc2
                               mkU64( 0 ) ) );
          break;
 
+      case 0x096: // xssqrtdp (VSX Scalar Square Root Double-Precision)
+         DIP("xssqrtdp v%d,v%d\n", (UInt)XT, (UInt)XB);
+         putVSReg( XT,  binop( Iop_64HLtoV128, unop( Iop_ReinterpF64asI64,
+                                                     binop( Iop_SqrtF64, rm,
+                                                            mkexpr( frB ) ) ),
+                               mkU64( 0 ) ) );
+         break;
+
+      case 0x0F4: // xstdivdp (VSX Scalar Test for software Divide Double-Precision)
+      {
+         UChar crfD     = toUChar( IFIELD( theInstr, 23, 3 ) );
+         IRTemp frA_I64 = newTemp(Ity_I64);
+         IRTemp frB_I64 = newTemp(Ity_I64);
+         DIP("xstdivdp crf%d,v%d,v%d\n", crfD, (UInt)XA, (UInt)XB);
+         assign( frA_I64, unop( Iop_ReinterpF64asI64, mkexpr( frA ) ) );
+         assign( frB_I64, unop( Iop_ReinterpF64asI64, mkexpr( frB ) ) );
+         putGST_field( PPC_GST_CR, do_fp_tdiv(frA_I64, frB_I64), crfD );
+         break;
+      }
+
       default:
-         vex_printf( "dis_vx_arith(ppc)(opc2)\n" );
+         vex_printf( "dis_vxs_arith(ppc)(opc2)\n" );
          return False;
    }
+
    return True;
 }
 
+
 /*
  * VSX Floating Point Compare Instructions
  */
@@ -8034,8 +9228,7 @@ dis_vx_cmp( UInt theInstr, UInt opc2 )
    /* XX3-Form and XX2-Form */
    UChar opc1 = ifieldOPC( theInstr );
    UChar crfD     = toUChar( IFIELD( theInstr, 23, 3 ) );
-   IRTemp ccPPC32 = newTemp(Ity_I32);
-   IRTemp ccIR    = newTemp(Ity_I32);
+   IRTemp ccPPC32;
    UChar XA       = ifieldRegXA ( theInstr );
    UChar XB       = ifieldRegXB ( theInstr );
    IRTemp frA     = newTemp(Ity_F64);
@@ -8054,65 +9247,203 @@ dis_vx_cmp( UInt theInstr, UInt opc2 )
           * exception flag settings, which aren't supported anyway. */
          DIP("xscmp%sdp crf%d,fr%u,fr%u\n", opc2 == 0x08c ? "u" : "o",
                                            crfD, (UInt)XA, (UInt)XB);
-         assign( ccIR, binop(Iop_CmpF64, mkexpr(frA), mkexpr(frB)) );
+         ccPPC32 = get_fp_cmp_CR_val( binop(Iop_CmpF64, mkexpr(frA), mkexpr(frB)));
+         putGST_field( PPC_GST_CR, mkexpr(ccPPC32), crfD );
+         break;
 
-         /* Map compare result from IR to PPC32 */
-         /*
-           FP cmp result | PPC | IR
-           --------------------------
-           UN            | 0x1 | 0x45
-           EQ            | 0x2 | 0x40
-           GT            | 0x4 | 0x00
-           LT            | 0x8 | 0x01
-         */
+      default:
+         vex_printf( "dis_vx_cmp(ppc)(opc2)\n" );
+         return False;
+   }
+   return True;
+}
 
-         // ccPPC32 = Shl(1, (~(ccIR>>5) & 2)
-         //                    | ((ccIR ^ (ccIR>>6)) & 1)
-         assign(
-            ccPPC32,
-            binop(
-               Iop_Shl32,
-               mkU32(1),
-               unop(
-                  Iop_32to8,
-                  binop(
-                     Iop_Or32,
-                     binop(
-                        Iop_And32,
-                        unop(
-                           Iop_Not32,
-                           binop(Iop_Shr32, mkexpr(ccIR), mkU8(5))
-                        ),
-                        mkU32(2)
-                     ),
-                     binop(
-                        Iop_And32,
-                        binop(
-                           Iop_Xor32,
-                           mkexpr(ccIR),
-                           binop(Iop_Shr32, mkexpr(ccIR), mkU8(6))
-                        ),
-                        mkU32(1)
-                     )
-                  )
-               )
-            )
-         );
+static void
+do_vvec_fp_cmp ( IRTemp vA, IRTemp vB, UChar XT, UChar flag_rC,
+                 ppc_cmp_t cmp_type )
+{
+   IRTemp frA_hi     = newTemp(Ity_F64);
+   IRTemp frB_hi     = newTemp(Ity_F64);
+   IRTemp frA_lo     = newTemp(Ity_F64);
+   IRTemp frB_lo     = newTemp(Ity_F64);
+   IRTemp ccPPC32    = newTemp(Ity_I32);
+   IRTemp ccIR_hi;
+   IRTemp ccIR_lo;
+
+   IRTemp hiResult = newTemp(Ity_I64);
+   IRTemp loResult = newTemp(Ity_I64);
+   IRTemp hiEQlo = newTemp(Ity_I1);
+   IRTemp all_elem_true = newTemp(Ity_I32);
+   IRTemp all_elem_false = newTemp(Ity_I32);
+
+   assign(frA_hi, unop(Iop_ReinterpI64asF64, unop(Iop_V128HIto64, mkexpr( vA ))));
+   assign(frB_hi, unop(Iop_ReinterpI64asF64, unop(Iop_V128HIto64, mkexpr( vB ))));
+   assign(frA_lo, unop(Iop_ReinterpI64asF64, unop(Iop_V128to64, mkexpr( vA ))));
+   assign(frB_lo, unop(Iop_ReinterpI64asF64, unop(Iop_V128to64, mkexpr( vB ))));
+
+   ccIR_hi = get_fp_cmp_CR_val( binop( Iop_CmpF64,
+                                       mkexpr( frA_hi ),
+                                       mkexpr( frB_hi ) ) );
+   ccIR_lo = get_fp_cmp_CR_val( binop( Iop_CmpF64,
+                                       mkexpr( frA_lo ),
+                                       mkexpr( frB_lo ) ) );
+
+   if (cmp_type != PPC_CMP_GE) {
+      assign( hiResult,
+              unop( Iop_1Sto64,
+                    binop( Iop_CmpEQ32, mkexpr( ccIR_hi ), mkU32( cmp_type ) ) ) );
+      assign( loResult,
+              unop( Iop_1Sto64,
+                    binop( Iop_CmpEQ32, mkexpr( ccIR_lo ), mkU32( cmp_type ) ) ) );
+   } else {
+      // For PPC_CMP_GE, one element compare may return "4" (for "greater than") and
+      // the other element compare may return "2" (for "equal to").
+      IRTemp lo_GE = newTemp(Ity_I1);
+      IRTemp hi_GE = newTemp(Ity_I1);
+
+      assign(hi_GE, mkOR1( binop( Iop_CmpEQ32, mkexpr( ccIR_hi ), mkU32( 2 ) ),
+                           binop( Iop_CmpEQ32, mkexpr( ccIR_hi ), mkU32( 4 ) ) ) );
+      assign( hiResult,unop( Iop_1Sto64, mkexpr( hi_GE ) ) );
+
+      assign(lo_GE, mkOR1( binop( Iop_CmpEQ32, mkexpr( ccIR_lo ), mkU32( 2 ) ),
+                           binop( Iop_CmpEQ32, mkexpr( ccIR_lo ), mkU32( 4 ) ) ) );
+      assign( loResult, unop( Iop_1Sto64, mkexpr( lo_GE ) ) );
+   }
+
+   // The [hi/lo]Result will be all 1's or all 0's.  We just look at the lower word.
+   assign( hiEQlo,
+           binop( Iop_CmpEQ32,
+                  unop( Iop_64to32, mkexpr( hiResult ) ),
+                  unop( Iop_64to32, mkexpr( loResult ) ) ) );
+   putVSReg( XT,
+             binop( Iop_64HLtoV128, mkexpr( hiResult ), mkexpr( loResult ) ) );
+
+   assign( all_elem_true,
+           unop( Iop_1Uto32,
+                 mkAND1( mkexpr( hiEQlo ),
+                         binop( Iop_CmpEQ32,
+                                mkU32( 0xffffffff ),
+                                unop( Iop_64to32,
+                                mkexpr( hiResult ) ) ) ) ) );
+
+   assign( all_elem_false,
+           unop( Iop_1Uto32,
+                 mkAND1( mkexpr( hiEQlo ),
+                         binop( Iop_CmpEQ32,
+                                mkU32( 0 ),
+                                unop( Iop_64to32,
+                                mkexpr( hiResult ) ) ) ) ) );
+   assign( ccPPC32,
+           binop( Iop_Or32,
+                  binop( Iop_Shl32, mkexpr( all_elem_false ), mkU8( 1 ) ),
+                  binop( Iop_Shl32, mkexpr( all_elem_true ), mkU8( 3 ) ) ) );
 
-         putGST_field( PPC_GST_CR, mkexpr(ccPPC32), crfD );
+   if (flag_rC) {
+      putGST_field( PPC_GST_CR, mkexpr(ccPPC32), 6 );
+   }
+}
+
+/*
+ * VSX Vector Compare Instructions
+ */
+static Bool
+dis_vvec_cmp( UInt theInstr, UInt opc2 )
+{
+   /* XX3-Form */
+   UChar opc1 = ifieldOPC( theInstr );
+   UChar XT = ifieldRegXT ( theInstr );
+   UChar XA = ifieldRegXA ( theInstr );
+   UChar XB = ifieldRegXB ( theInstr );
+   UChar flag_rC  = ifieldBIT10(theInstr);
+   IRTemp vA = newTemp( Ity_V128 );
+   IRTemp vB = newTemp( Ity_V128 );
+
+   if (opc1 != 0x3C) {
+      vex_printf( "dis_vvec_cmp(ppc)(instr)\n" );
+      return False;
+   }
+
+   assign( vA, getVSReg( XA ) );
+   assign( vB, getVSReg( XB ) );
+
+   switch (opc2) {
+      case 0x18C: case 0x38C:  // xvcmpeqdp[.] (VSX Vector Compare Equal To Double-Precision [ & Record ])
+      {
+         DIP("xvcmpeqdp%s crf%d,fr%u,fr%u\n", (flag_rC ? ".":""),
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         do_vvec_fp_cmp(vA, vB, XT, flag_rC, PPC_CMP_EQ);
+         break;
+      }
+
+      case 0x1CC: case 0x3CC: // xvcmpgedp[.] (VSX Vector Compare Greater Than or Equal To Double-Precision [ & Record ])
+      {
+         DIP("xvcmpgedp%s crf%d,fr%u,fr%u\n", (flag_rC ? ".":""),
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         do_vvec_fp_cmp(vA, vB, XT, flag_rC, PPC_CMP_GE);
+         break;
+      }
+
+      case 0x1AC: case 0x3AC: // xvcmpgtdp[.] (VSX Vector Compare Greater Than Double-Precision [ & Record ])
+      {
+         DIP("xvcmpgtdp%s crf%d,fr%u,fr%u\n", (flag_rC ? ".":""),
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         do_vvec_fp_cmp(vA, vB, XT, flag_rC, PPC_CMP_GT);
+         break;
+      }
 
+      case 0x10C: case 0x30C: // xvcmpeqsp[.] (VSX Vector Compare Equal To Single-Precision [ & Record ])
+      {
+         IRTemp vD = newTemp(Ity_V128);
+
+         DIP("xvcmpeqsp%s crf%d,fr%u,fr%u\n", (flag_rC ? ".":""),
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         assign( vD, binop(Iop_CmpEQ32Fx4, mkexpr(vA), mkexpr(vB)) );
+         putVSReg( XT, mkexpr(vD) );
+         if (flag_rC) {
+            set_AV_CR6( mkexpr(vD), True );
+         }
          break;
+      }
+
+      case 0x14C: case 0x34C: // xvcmpgesp[.] (VSX Vector Compare Greater Than or Equal To Single-Precision [ & Record ])
+      {
+         IRTemp vD = newTemp(Ity_V128);
+
+         DIP("xvcmpgesp%s crf%d,fr%u,fr%u\n", (flag_rC ? ".":""),
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         assign( vD, binop(Iop_CmpGE32Fx4, mkexpr(vA), mkexpr(vB)) );
+         putVSReg( XT, mkexpr(vD) );
+         if (flag_rC) {
+            set_AV_CR6( mkexpr(vD), True );
+         }
+         break;
+      }
+
+      case 0x12C: case 0x32C: //xvcmpgtsp[.] (VSX Vector Compare Greater Than Single-Precision [ & Record ])
+      {
+         IRTemp vD = newTemp(Ity_V128);
+
+         DIP("xvcmpgtsp%s crf%d,fr%u,fr%u\n", (flag_rC ? ".":""),
+             (UInt)XT, (UInt)XA, (UInt)XB);
+         assign( vD, binop(Iop_CmpGT32Fx4, mkexpr(vA), mkexpr(vB)) );
+         putVSReg( XT, mkexpr(vD) );
+         if (flag_rC) {
+            set_AV_CR6( mkexpr(vD), True );
+         }
+         break;
+      }
+
       default:
-         vex_printf( "dis_vx_cmp(ppc)(opc2)\n" );
+         vex_printf( "dis_vvec_cmp(ppc)(opc2)\n" );
          return False;
    }
    return True;
 }
 /*
- * VSX Move Instructions
+ * Miscellaneous VSX Scalar Instructions
  */
 static Bool
-dis_vx_move( UInt theInstr, UInt opc2 )
+dis_vxs_misc( UInt theInstr, UInt opc2 )
 {
    /* XX3-Form and XX2-Form */
    UChar opc1 = ifieldOPC( theInstr );
@@ -8123,7 +9454,7 @@ dis_vx_move( UInt theInstr, UInt opc2 )
    IRTemp vB = newTemp( Ity_V128 );
 
    if (opc1 != 0x3C) {
-      vex_printf( "dis_vx_move(ppc)(instr)\n" );
+      vex_printf( "dis_vxs_misc(ppc)(instr)\n" );
       return False;
    }
 
@@ -8195,9 +9526,91 @@ dis_vx_move( UInt theInstr, UInt opc2 )
                               mkexpr( vecB_signbit_comp ) ) );
          break;
       }
+      case 0x280: // xsmaxdp (VSX Scalar Maximum Double-Precision)
+      case 0x2A0: // xsmindp (VSX Scalar Minimum Double-Precision)
+      {
+         IRTemp frA     = newTemp(Ity_I64);
+         IRTemp frB     = newTemp(Ity_I64);
+         Bool isMin = opc2 == 0x2A0 ? True : False;
+         DIP("%s v%d,v%d v%d\n", isMin ? "xsmaxdp" : "xsmindp", (UInt)XT, (UInt)XA, (UInt)XB);
+
+         assign(frA, unop(Iop_V128HIto64, mkexpr( vA )));
+         assign(frB, unop(Iop_V128HIto64, mkexpr( vB )));
+         putVSReg( XT, binop( Iop_64HLtoV128, get_max_min_fp(frA, frB, isMin), mkU64( 0 ) ) );
+
+         break;
+      }
+      case 0x0F2: // xsrdpim (VSX Scalar Round to Double-Precision Integer using round toward -Infinity)
+      case 0x0D2: // xsrdpim (VSX Scalar Round to Double-Precision Integer using round toward +Infinity)
+      {
+         /* The same rules apply for xsrdpi{m|p} as for floating point round operations (e.g., frim) */
+         IRTemp frB = newTemp(Ity_F64);
+         IRTemp frD = newTemp(Ity_F64);
+         IRTemp frD_fp_round = newTemp(Ity_F64);
+         IRTemp intermediateResult = newTemp(Ity_I64);
+         IRTemp frB_I64 = newTemp(Ity_I64);
+         IRTemp is_SNAN = newTemp(Ity_I1);
+         IRExpr * hi32;
+         DIP("xsrdpi%s v%d,v%d\n", (opc2 == 0x0F2) ? "m" : "p", (UInt)XT, (UInt)XB);
+         assign(frB_I64, unop(Iop_V128HIto64, mkexpr( vB )));
+         assign(frB, unop(Iop_ReinterpI64asF64, mkexpr(frB_I64)));
+         assign( intermediateResult,
+                 binop( Iop_F64toI64S, mkU32( (opc2 == 0x0F2) ? Irrm_NegINF : Irrm_PosINF ),
+                        mkexpr( frB ) ) );
+
+         /* don't use the rounded integer if frB is outside -9e18..9e18 */
+         /* F64 has only log10(2**52) significant digits anyway */
+         /* need to preserve sign of zero */
+         /*   frD = (fabs(frB) > 9e18) ? frB :
+                  (sign(frB)) ? -fabs((double)r_tmp64) : (double)r_tmp64  */
+         assign( frD,
+                 IRExpr_Mux0X( unop( Iop_32to8,
+                                     binop( Iop_CmpF64,
+                                            IRExpr_Const( IRConst_F64( 9e18 ) ),
+                                            unop( Iop_AbsF64, mkexpr( frB ) ) ) ),
+                               IRExpr_Mux0X( unop( Iop_32to8,
+                                                   binop( Iop_Shr32,
+                                                          unop( Iop_64HIto32,
+                                                                mkexpr(frB_I64) ),
+                                                          mkU8( 31 ) ) ),
+                                             binop( Iop_I64StoF64,
+                                                    mkU32( 0 ),
+                                                    mkexpr( intermediateResult ) ),
+                                             unop( Iop_NegF64,
+                                                   unop( Iop_AbsF64,
+                                                         binop( Iop_I64StoF64,
+                                                                mkU32( 0 ),
+                                                                mkexpr( intermediateResult ) ) ) ) ),
+                               mkexpr( frB ) ) );
+
+         /* See Appendix "Floating-Point Round to Integer Model" in ISA doc.
+          * If frB is a SNAN, then frD <- frB, with bith 12 set to '1'.
+          */
+#define SNAN_MASK 0x0008000000000000ULL
+         hi32 = unop( Iop_64HIto32, mkexpr(frB_I64) );
+         assign( is_SNAN,
+                 mkAND1( is_NaN( frB_I64 ),
+                         binop( Iop_CmpEQ32,
+                                binop( Iop_And32, hi32, mkU32( 0x00080000 ) ),
+                                mkU32( 0 ) ) ) );
+         assign( frD_fp_round,
+                 IRExpr_Mux0X( unop( Iop_1Uto8, mkexpr( is_SNAN ) ),
+                               mkexpr( frD ),
+                               unop( Iop_ReinterpI64asF64,
+                                     binop( Iop_Xor64,
+                                            mkU64( SNAN_MASK ),
+                                            mkexpr( frB_I64 ) ) ) ) );
+
+         putVSReg( XT,
+                   binop( Iop_64HLtoV128,
+                          unop( Iop_ReinterpF64asI64, mkexpr( frD_fp_round ) ),
+                          mkU64( 0 ) ) );
+
+         break;
+      }
 
       default:
-         vex_printf( "dis_vx_move(ppc)(opc2)\n" );
+         vex_printf( "dis_vxs_misc(ppc)(opc2)\n" );
          return False;
    }
    return True;
@@ -8428,10 +9841,10 @@ dis_vx_store ( UInt theInstr )
 }
 
 /*
- * VSX Permute Instructions
+ * VSX permute and other miscealleous instructions
  */
 static Bool
-dis_vx_permute( UInt theInstr, UInt opc2 )
+dis_vx_permute_misc( UInt theInstr, UInt opc2 )
 {
    /* XX3-Form */
    UChar opc1 = ifieldOPC( theInstr );
@@ -8443,7 +9856,7 @@ dis_vx_permute( UInt theInstr, UInt opc2
    IRTemp vB = newTemp( Ity_V128 );
 
    if (opc1 != 0x3C) {
-      vex_printf( "dis_vx_permute(ppc)(instr)\n" );
+      vex_printf( "dis_vx_permute_misc(ppc)(instr)\n" );
       return False;
    }
 
@@ -8517,9 +9930,32 @@ dis_vx_permute( UInt theInstr, UInt opc2
          putVSReg( XT, mkexpr( vT ) );
          break;
       }
+      case 0x018: // xxsel (VSX Select)
+      {
+         UChar XC = ifieldRegXC(theInstr);
+         IRTemp vC = newTemp( Ity_V128 );
+         assign( vC, getVSReg( XC ) );
+         DIP("xxsel v%d,v%d,v%d,v%d\n", (UInt)XT, (UInt)XA, (UInt)XB, (UInt)XC);
+         /* vD = (vA & ~vC) | (vB & vC) */
+         putVSReg( XT, binop(Iop_OrV128,
+            binop(Iop_AndV128, mkexpr(vA), unop(Iop_NotV128, mkexpr(vC))),
+            binop(Iop_AndV128, mkexpr(vB), mkexpr(vC))) );
+         break;
+      }
+      case 0x148: // xxspltw (VSX Splat Word)
+      {
+         UChar UIM   = ifieldRegA(theInstr) & 3;
+         UChar sh_uim = (3 - (UIM)) * 32;
+         DIP("xxspltw v%d,v%d,%d\n", (UInt)XT, (UInt)XB, UIM);
+         putVSReg( XT,
+                   unop( Iop_Dup32x4,
+                         unop( Iop_V128to32,
+                               binop( Iop_ShrV128, mkexpr( vB ), mkU8( sh_uim ) ) ) ) );
+         break;
+      }
 
       default:
-         vex_printf( "dis_vx_permute(ppc)(opc2)\n" );
+         vex_printf( "dis_vx_permute_misc(ppc)(opc2)\n" );
          return False;
    }
    return True;
@@ -10685,8 +12121,8 @@ static Int findVSXextOpCode(UInt opcode)
 
 
 /* The full 10-bit extended opcode retrieved via ifieldOPClo10 is
- * passed, and we then try to match it up with one of the above
- * VSX forms.
+ * passed, and we then try to match it up with one of the VSX forms
+ * below.
  */
 static UInt get_VSX60_opc2(UInt opc2_full)
 {
@@ -10694,7 +12130,7 @@ static UInt get_VSX60_opc2(UInt opc2_ful
 #define XX3_1_MASK 0x000003FC
 #define XX3_2_MASK 0x000001FC
 #define XX3_3_MASK 0x0000007C
-#define XX4_MASK 0x000003E0
+#define XX4_MASK 0x00000018
    Int ret;
    UInt vsxExtOpcode = 0;
 
@@ -10739,7 +12175,7 @@ DisResult disInstr_PPC_WRK (
    Bool      allow_V  = False;
    Bool      allow_FX = False;
    Bool      allow_GX = False;
-   Bool      allow_VX = False;
+   Bool      allow_VX = False;  // Equates to "supports Power ISA 2.06
    UInt      hwcaps = archinfo->hwcaps;
    Long      delta;
 
@@ -10949,7 +12385,7 @@ DisResult disInstr_PPC_WRK (
       if (!allow_F) goto decode_noF;
       opc2 = ifieldOPClo10(theInstr);
       switch (opc2) {
-         case 0x3CE: // fcfidus (implemented as native insn
+         case 0x3CE: // fcfidus (implemented as native insn)
             if (!allow_VX)
                goto decode_noVX;
             if (dis_fp_round( theInstr ))
@@ -11007,22 +12443,17 @@ DisResult disInstr_PPC_WRK (
 
       switch (vsxOpc2) {
          case 0x8: case 0x28: case 0x48: case 0xc8: // xxsldwi, xxpermdi, xxmrghw, xxmrglw
-            if (dis_vx_permute(theInstr, vsxOpc2)) goto decode_success;
+         case 0x018: case 0x148: // xxsel, xxspltw
+            if (dis_vx_permute_misc(theInstr, vsxOpc2)) goto decode_success;
             goto decode_failure;
          case 0x268: case 0x248: case 0x288: case 0x208: case 0x228: // xxlxor, xxlor, xxlnor, xxland, xxlandc
             if (dis_vx_logic(theInstr, vsxOpc2)) goto decode_success;
             goto decode_failure;
-         case 0x2B2: // xsabsdp
-            if (dis_vx_move(theInstr, vsxOpc2)) goto decode_success;
-            goto decode_failure;
-         case 0x2C0: // xscpsgndp
-            if (dis_vx_move(theInstr, vsxOpc2)) goto decode_success;
-            goto decode_failure;
-         case 0x2D2: // xsnabsdp
-            if (dis_vx_move(theInstr, vsxOpc2)) goto decode_success;
-            goto decode_failure;
-         case 0x2F2: // xsnegdp
-            if (dis_vx_move(theInstr, vsxOpc2)) goto decode_success;
+         case 0x2B2: case 0x2C0: // xsabsdp, xscpsgndp
+         case 0x2D2: case 0x2F2: // xsnabsdp, xsnegdp
+         case 0x280: case 0x2A0: // xsmaxdp, xsmindp
+         case 0x0F2: case 0x0D2: // xsrdpim, xsrdpip
+            if (dis_vxs_misc(theInstr, vsxOpc2)) goto decode_success;
             goto decode_failure;
          case 0x08C: case 0x0AC: // xscmpudp, xscmpodp
             if (dis_vx_cmp(theInstr, vsxOpc2)) goto decode_success;
@@ -11031,14 +12462,55 @@ DisResult disInstr_PPC_WRK (
          case 0x084: case 0x0A4: // xsmaddadp, xsmaddmdp
          case 0x0C4: case 0x0E4: // xsmsubadp, xsmsubmdp
          case 0x284: case 0x2A4: // xsnmaddadp, xsnmaddmdp
-         case 0x0C0: // xsmuldp
-         case 0x0A0: // xssubdp
-            if (dis_vx_arith(theInstr, vsxOpc2)) goto decode_success;
+         case 0x2C4: case 0x2E4: // xsnmsubadp, xsnmsubmdp
+         case 0x0C0: case 0x0A0: // xsmuldp, xssubdp
+         case 0x096: case 0x0F4: // xssqrtdp, xstdivdp
+            if (dis_vxs_arith(theInstr, vsxOpc2)) goto decode_success;
+            goto decode_failure;
+         case 0x180: // xvadddp
+         case 0x1E0: // xvdivdp
+         case 0x1C0: // xvmuldp
+         case 0x1A0: // xvsubdp
+         case 0x184: case 0x1A4: // xvmaddadp, xvmaddmdp
+         case 0x1C4: case 0x1E4: // xvmsubadp, xvmsubmdp
+         case 0x384: case 0x3A4: // xvnmaddadp, xvnmaddmdp
+         case 0x3C4: case 0x3E4: // xvnmsubadp, xvnmsubmdp
+            if (dis_vxv_dp_arith(theInstr, vsxOpc2)) goto decode_success;
+            goto decode_failure;
+         case 0x100: // xvaddsp
+         case 0x160: // xvdivsp
+         case 0x140: // xvmulsp
+         case 0x120: // xvsubsp
+         case 0x104: case 0x124: // xvmaddasp, xvmaddmsp
+         case 0x144: case 0x164: // xvmsubasp, xvmsubmsp
+         case 0x304: case 0x324: // xvnmaddasp, xvnmaddmsp
+         case 0x344: case 0x364: // xvnmsubasp, xvnmsubmsp
+            if (dis_vxv_sp_arith(theInstr, vsxOpc2)) goto decode_success;
             goto decode_failure;
+
          case 0x2B0: case 0x2F0: case 0x2D0: // xscvdpsxds, xscvsxddp, xscvuxddp
+         case 0x1b0: case 0x130: // xvcvdpsxws, xvcvspsxws
+         case 0x0b0: case 0x290: // xscvdpsxws, xscvdpuxds
             if (dis_vx_conv(theInstr, vsxOpc2)) goto decode_success;
             goto decode_failure;
 
+         case 0x18C: case 0x38C: // xvcmpeqdp[.]
+         case 0x10C: case 0x30C: // xvcmpeqsp[.]
+         case 0x14C: case 0x34C: // xvcmpgesp[.]
+         case 0x12C: case 0x32C: // xvcmpgtsp[.]
+         case 0x1CC: case 0x3CC: // xvcmpgedp[.]
+         case 0x1AC: case 0x3AC: // xvcmpgtdp[.]
+             if (dis_vvec_cmp(theInstr, vsxOpc2)) goto decode_success;
+             goto decode_failure;
+
+         case 0x134:  // xvresp
+         case 0x380: case 0x3A0: //xvmaxdp, xvmindp
+         case 0x300: case 0x320: // xvmaxsp, xvminsp
+         case 0x3c0: // xvcpsgndp
+         case 0x340: // xvcpsgnsp
+            if (dis_vxv_misc(theInstr, vsxOpc2)) goto decode_success;
+            goto decode_failure;
+
          default:
             goto decode_failure;
       }
@@ -11108,12 +12580,12 @@ DisResult disInstr_PPC_WRK (
       case 0x34E: // fcfid
          if (dis_fp_round(theInstr)) goto decode_success;
          goto decode_failure;
-      case 0x3CE: // fcfidu (implemented as native insn)
+      case 0x3CE: case 0x3AE: case 0x3AF: // fcfidu, fctidu[z] (implemented as native insns)
+      case 0x08F: case 0x08E: // fctiwu[z] (implemented as native insns)
          if (!allow_VX) goto decode_noVX;
          if (dis_fp_round(theInstr)) goto decode_success;
          goto decode_failure;
 
-
       /* Power6 rounding stuff */
       case 0x1E8: // frim
       case 0x1C8: // frip
@@ -11189,13 +12661,24 @@ DisResult disInstr_PPC_WRK (
       case 0x1CB: case 0x04B: case 0x00B: // divwu, mulhw, mulhwu
       case 0x0EB: case 0x068: case 0x028: // mullw, neg,   subf
       case 0x008: case 0x088: case 0x0E8: // subfc, subfe, subfme
-      case 0x0C8:                         // subfze
+      case 0x0C8: // subfze
+         if (dis_int_arith( theInstr )) goto decode_success;
+         goto decode_failure;
+
+      case 0x18B: // divweu (implemented as native insn)
+         if (!allow_VX) goto decode_noVX;
          if (dis_int_arith( theInstr )) goto decode_success;
          goto decode_failure;
 
       /* 64bit Integer Arithmetic */
       case 0x009: case 0x049: case 0x0E9: // mulhdu, mulhd, mulld
-      case 0x1C9: case 0x1E9:             // divdu, divd
+      case 0x1C9: case 0x1E9: // divdu, divd
+         if (!mode64) goto decode_failure;
+         if (dis_int_arith( theInstr )) goto decode_success;
+         goto decode_failure;
+
+      case 0x1A9: //  divde (implemented as native insn)
+         if (!allow_VX) goto decode_noVX;
          if (!mode64) goto decode_failure;
          if (dis_int_arith( theInstr )) goto decode_success;
          goto decode_failure;
@@ -11280,6 +12763,7 @@ DisResult disInstr_PPC_WRK (
       /* Integer Load and Store with Byte Reverse Instructions */
       case 0x316: case 0x216: case 0x396: // lhbrx, lwbrx, sthbrx
       case 0x296: case 0x214:             // stwbrx, ldbrx
+      case 0x294:                         // stdbrx
          if (dis_int_ldst_rev( theInstr )) goto decode_success;
          goto decode_failure;
          
@@ -11412,6 +12896,10 @@ DisResult disInstr_PPC_WRK (
     	  if (dis_int_logic( theInstr )) goto decode_success;
     	  goto decode_failure;
 
+      case 0x0FC: // bpermd
+         if (dis_int_logic( theInstr )) goto decode_success;
+         goto decode_failure;
+
       default:
          /* Deal with some other cases that we would otherwise have
             punted on. */
@@ -11599,7 +13087,7 @@ DisResult disInstr_PPC_WRK (
       goto decode_failure;
    decode_noVX:
       vassert(!allow_VX);
-      vex_printf("disInstr(ppc): declined to decode a VSX insn.\n");
+      vex_printf("disInstr(ppc): declined to decode a Power ISA 2.06 insn.\n");
       goto decode_failure;
    decode_noFX:
       vassert(!allow_FX);
--- valgrind/VEX/priv/host_ppc_isel.c	(revision 2183)
+++ valgrind/VEX/priv/host_ppc_isel.c	(revision 2184)
@@ -1284,24 +1284,30 @@ static HReg iselWordExpr_R_wrk ( ISelEnv
 
       /* How about a div? */
       if (e->Iex.Binop.op == Iop_DivS32 || 
-          e->Iex.Binop.op == Iop_DivU32) {
+          e->Iex.Binop.op == Iop_DivU32 ||
+          e->Iex.Binop.op == Iop_DivU32E) {
          Bool syned  = toBool(e->Iex.Binop.op == Iop_DivS32);
          HReg r_dst  = newVRegI(env);
          HReg r_srcL = iselWordExpr_R(env, e->Iex.Binop.arg1);
          HReg r_srcR = iselWordExpr_R(env, e->Iex.Binop.arg2);
-         addInstr(env, PPCInstr_Div(syned, True/*32bit div*/,
-                                    r_dst, r_srcL, r_srcR));
+         addInstr( env,
+                      PPCInstr_Div( e->Iex.Binop.op == Iop_DivU32E ? True
+                                                                   : False,
+                                    syned, True/*32bit div*/, r_dst,
+                                    r_srcL, r_srcR ) );
          return r_dst;
       }
       if (e->Iex.Binop.op == Iop_DivS64 || 
-          e->Iex.Binop.op == Iop_DivU64) {
-         Bool syned  = toBool(e->Iex.Binop.op == Iop_DivS64);
+          e->Iex.Binop.op == Iop_DivU64 || e->Iex.Binop.op == Iop_DivS64E) {
+         Bool syned  = toBool((e->Iex.Binop.op == Iop_DivS64) ||(e->Iex.Binop.op == Iop_DivS64E));
          HReg r_dst  = newVRegI(env);
          HReg r_srcL = iselWordExpr_R(env, e->Iex.Binop.arg1);
          HReg r_srcR = iselWordExpr_R(env, e->Iex.Binop.arg2);
          vassert(mode64);
-         addInstr(env, PPCInstr_Div(syned, False/*64bit div*/,
-                                    r_dst, r_srcL, r_srcR));
+         addInstr( env,
+                      PPCInstr_Div( e->Iex.Binop.op == Iop_DivS64E ? True : False,
+                                    syned, False/*64bit div*/,
+                                    r_dst, r_srcL, r_srcR ) );
          return r_dst;
       }
 
@@ -1459,7 +1465,8 @@ static HReg iselWordExpr_R_wrk ( ISelEnv
          return r_ccIR;
       }
 
-      if (e->Iex.Binop.op == Iop_F64toI32S) {
+      if ( e->Iex.Binop.op == Iop_F64toI32S ||
+               e->Iex.Binop.op == Iop_F64toI32U ) {
          /* This works in both mode64 and mode32. */
          HReg      r1      = StackFramePtr(env->mode64);
          PPCAMode* zero_r1 = PPCAMode_IR( 0, r1 );
@@ -1472,7 +1479,9 @@ static HReg iselWordExpr_R_wrk ( ISelEnv
 
          sub_from_sp( env, 16 );
          addInstr(env, PPCInstr_FpCftI(False/*F->I*/, True/*int32*/,
-                                       True/*syned*/, True/*flt64*/,
+                                       e->Iex.Binop.op == Iop_F64toI32S ? True/*syned*/
+                                                                     : False,
+                                       True/*flt64*/,
                                        ftmp, fsrc));
          addInstr(env, PPCInstr_FpSTFIW(r1, ftmp));
          addInstr(env, PPCInstr_Load(4, idst, zero_r1, mode64));
@@ -1488,7 +1497,7 @@ static HReg iselWordExpr_R_wrk ( ISelEnv
          return idst;
       }
 
-      if (e->Iex.Binop.op == Iop_F64toI64S) {
+      if (e->Iex.Binop.op == Iop_F64toI64S || e->Iex.Binop.op == Iop_F64toI64U ) {
          if (mode64) {
             HReg      r1      = StackFramePtr(env->mode64);
             PPCAMode* zero_r1 = PPCAMode_IR( 0, r1 );
@@ -1500,7 +1509,9 @@ static HReg iselWordExpr_R_wrk ( ISelEnv
             set_FPU_rounding_mode( env, e->Iex.Binop.arg1 );
 
             sub_from_sp( env, 16 );
-            addInstr(env, PPCInstr_FpCftI(False/*F->I*/, False/*int64*/, True,
+            addInstr(env, PPCInstr_FpCftI(False/*F->I*/, False/*int64*/,
+                                          ( e->Iex.Binop.op == Iop_F64toI64S ) ? True
+                                                                            : False,
                                           True, ftmp, fsrc));
             addInstr(env, PPCInstr_FpLdSt(False/*store*/, 8, ftmp, zero_r1));
             addInstr(env, PPCInstr_Load(8, idst, zero_r1, True/*mode64*/));
@@ -2738,8 +2749,8 @@ static void iselInt64Expr_wrk ( HReg* rH
             *rLo = iselWordExpr_R(env, e->Iex.Binop.arg2);
             return;
 
-         /* F64toI64S */
-         case Iop_F64toI64S: {
+         /* F64toI64[S|U] */
+         case Iop_F64toI64S: case Iop_F64toI64U: {
             HReg      tLo     = newVRegI(env);
             HReg      tHi     = newVRegI(env);
             HReg      r1      = StackFramePtr(env->mode64);
@@ -2753,7 +2764,8 @@ static void iselInt64Expr_wrk ( HReg* rH
             set_FPU_rounding_mode( env, e->Iex.Binop.arg1 );
 
             sub_from_sp( env, 16 );
-            addInstr(env, PPCInstr_FpCftI(False/*F->I*/, False/*int64*/, True,
+            addInstr(env, PPCInstr_FpCftI(False/*F->I*/, False/*int64*/,
+                                          (op_binop == Iop_F64toI64S) ? True : False,
                                           True, ftmp, fsrc));
             addInstr(env, PPCInstr_FpLdSt(False/*store*/, 8, ftmp, zero_r1));
             addInstr(env, PPCInstr_Load(4, tHi, zero_r1, False/*mode32*/));
@@ -3351,7 +3363,31 @@ static HReg iselDblExpr_wrk ( ISelEnv* e
                return mk_LoadR64toFPR( env, r_src );
             }
          }
+
          case Iop_F32toF64: {
+            if (e->Iex.Unop.arg->tag == Iex_Unop &&
+                     e->Iex.Unop.arg->Iex.Unop.op == Iop_ReinterpI32asF32 ) {
+               e = e->Iex.Unop.arg;
+
+               HReg src = iselWordExpr_R(env, e->Iex.Unop.arg);
+               HReg fr_dst = newVRegF(env);
+               PPCAMode *am_addr;
+
+               sub_from_sp( env, 16 );        // Move SP down 16 bytes
+               am_addr = PPCAMode_IR( 0, StackFramePtr(env->mode64) );
+
+               // store src as Ity_I32's
+               addInstr(env, PPCInstr_Store( 4, am_addr, src, env->mode64 ));
+
+               // load single precision float, but the end results loads into a
+               // 64-bit FP register -- i.e., F64.
+               addInstr(env, PPCInstr_FpLdSt(True/*load*/, 4, fr_dst, am_addr));
+
+               add_to_sp( env, 16 );          // Reset SP
+               return fr_dst;
+            }
+
+
             /* this is a no-op */
             HReg res = iselFltExpr(env, e->Iex.Unop.arg);
             return res;
--- valgrind/VEX/pub/libvex_ir.h	(revision 2183)
+++ valgrind/VEX/pub/libvex_ir.h	(revision 2184)
@@ -469,6 +469,8 @@ typedef
       Iop_DivS32,   // ditto, signed
       Iop_DivU64,   // :: I64,I64 -> I64 (simple div, no mod)
       Iop_DivS64,   // ditto, signed
+      Iop_DivS64E,  // :: I64,I64 -> I64 (dividend is 64-bit arg (hi) concat with 64 0's (low))
+      Iop_DivU32E,  // :: I32,I32 -> I32 (dividend is 32-bit arg (hi) concat with 32 0's (low))
 
       Iop_DivModU64to32, // :: I64,I32 -> I64
                          // of which lo half is div and hi half is mod
@@ -611,6 +613,7 @@ typedef
       Iop_F64toI16S, /* IRRoundingMode(I32) x F64 -> signed I16 */
       Iop_F64toI32S, /* IRRoundingMode(I32) x F64 -> signed I32 */
       Iop_F64toI64S, /* IRRoundingMode(I32) x F64 -> signed I64 */
+      Iop_F64toI64U, /* IRRoundingMode(I32) x F64 -> unsigned I64 */
 
       Iop_F64toI32U, /* IRRoundingMode(I32) x F64 -> unsigned I32 */
 
--- valgrind/memcheck/mc_translate.c	(revision 11906)
+++ valgrind/memcheck/mc_translate.c	(revision 11908)
@@ -2952,6 +2952,7 @@ IRAtom* expr2vbits_Binop ( MCEnv* mce,
       case Iop_RoundF64toInt:
       case Iop_RoundF64toF32:
       case Iop_F64toI64S:
+      case Iop_F64toI64U:
       case Iop_I64StoF64:
       case Iop_I64UtoF64:
       case Iop_SinF64:
@@ -3050,10 +3051,12 @@ IRAtom* expr2vbits_Binop ( MCEnv* mce,
       case Iop_Sad8Ux4: /* maybe we could do better?  ftm, do mkLazy2. */
       case Iop_DivS32:
       case Iop_DivU32:
+      case Iop_DivU32E:
          return mkLazy2(mce, Ity_I32, vatom1, vatom2);
 
       case Iop_DivS64:
       case Iop_DivU64:
+      case Iop_DivS64E:
          return mkLazy2(mce, Ity_I64, vatom1, vatom2);
 
       case Iop_Add32:
@@ -3306,6 +3309,7 @@ IRExpr* expr2vbits_Unop ( MCEnv* mce, IR
          return mkPCastTo(mce, Ity_I32, vatom);
 
       case Iop_1Uto64:
+      case Iop_1Sto64:
       case Iop_8Uto64:
       case Iop_8Sto64:
       case Iop_16Uto64:
@@ -3347,6 +3351,7 @@ IRExpr* expr2vbits_Unop ( MCEnv* mce, IR
          return assignNew('V', mce, Ity_I16, unop(op, vatom));
 
       case Iop_1Uto8:
+      case Iop_1Sto8:
       case Iop_16to8:
       case Iop_16HIto8:
       case Iop_32to8:
--- valgrind/none/tests/ppc32/test_isa_2_06_part2.vgtest	(revision 0)
+++ valgrind/none/tests/ppc32/test_isa_2_06_part2.vgtest	(revision 11908)
@@ -0,0 +1,2 @@
+prereq: ../../../tests/check_isa-2_06_cap
+prog: test_isa_2_06_part2
--- valgrind/none/tests/ppc32/test_isa_2_06_part2.stdout.exp	(revision 0)
+++ valgrind/none/tests/ppc32/test_isa_2_06_part2.stdout.exp	(revision 11908)
@@ -0,0 +1,1699 @@
+Test VSX vector single arg instructions
+#0: xvresp 1/x(3ec00000) ==> PASS; 1/x(42780000) ==> PASS; 1/x(00000000) ==> PASS; 1/x(7f800000) ==> PASS
+#1: xvresp 1/x(00000000) ==> PASS; 1/x(00000000) ==> PASS; 1/x(80000000) ==> PASS; 1/x(7f800000) ==> PASS
+#2: xvresp 1/x(ff800000) ==> PASS; 1/x(7fffffff) ==> PASS; 1/x(ffffffff) ==> PASS; 1/x(7fc00000) ==> PASS
+#3: xvresp 1/x(ffc00000) ==> PASS; 1/x(80000000) ==> PASS; 1/x(c683287b) ==> PASS; 1/x(49192c2d) ==> PASS
+
+#0: xvcvdpsxws conv(3fd8000000000000) = 0000000000000000; conv(404f000000000000) = 000000000000003e
+#1: xvcvdpsxws conv(0018000000b77501) = 0000000000000000; conv(7fe800000000051b) = 000000007fffffff
+#2: xvcvdpsxws conv(0123214569900000) = 0000000000000000; conv(0000000000000000) = 0000000000000000
+#3: xvcvdpsxws conv(8000000000000000) = 0000000000000000; conv(7ff0000000000000) = 000000007fffffff
+#4: xvcvdpsxws conv(fff0000000000000) = 0000000080000000; conv(7ff7ffffffffffff) = 0000000080000000
+#5: xvcvdpsxws conv(fff7ffffffffffff) = 0000000080000000; conv(7ff8000000000000) = 0000000080000000
+#6: xvcvdpsxws conv(fff8000000000000) = 0000000080000000; conv(8008340000078000) = 0000000000000000
+#7: xvcvdpsxws conv(c0d0650f5a07b353) = 00000000ffffbe6c; conv(41232585a9900000) = 00000000000992c2
+
+#0: xvcvspsxws conv(3ec00000) = 00000000; conv(42780000) = 0000003e; conv(00000000) = 00000000; conv(7f800000) = 7fffffff
+#1: xvcvspsxws conv(00000000) = 00000000; conv(00000000) = 00000000; conv(80000000) = 00000000; conv(7f800000) = 7fffffff
+#2: xvcvspsxws conv(ff800000) = 80000000; conv(7fffffff) = 80000000; conv(ffffffff) = 80000000; conv(7fc00000) = 80000000
+#3: xvcvspsxws conv(ffc00000) = 80000000; conv(80000000) = 00000000; conv(c683287b) = ffffbe6c; conv(49192c2d) = 000992c2
+
+Test VSX floating point compare and basic arithmetic instructions
+#0: xvcmpeqdp fff0000000000000 eq fff0000000000000 AND fff0000000000000 eq c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpeqdp fff0000000000000 eq 8000000000000000 AND fff0000000000000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#2: xvcmpeqdp fff0000000000000 eq 0123214569900000 AND fff0000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#3: xvcmpeqdp fff0000000000000 eq 7ff7ffffffffffff AND fff0000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#4: xvcmpeqdp c0d0650f5a07b353 eq fff0000000000000 AND c0d0650f5a07b353 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 ffffffffffffffff
+#5: xvcmpeqdp c0d0650f5a07b353 eq 8000000000000000 AND c0d0650f5a07b353 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#6: xvcmpeqdp c0d0650f5a07b353 eq 0123214569900000 AND c0d0650f5a07b353 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#7: xvcmpeqdp c0d0650f5a07b353 eq 7ff7ffffffffffff AND c0d0650f5a07b353 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#8: xvcmpeqdp 8000000000000000 eq fff0000000000000 AND 8000000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#9: xvcmpeqdp 8000000000000000 eq 8000000000000000 AND 8000000000000000 eq 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpeqdp 8000000000000000 eq 0123214569900000 AND 8000000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#11: xvcmpeqdp 8000000000000000 eq 7ff7ffffffffffff AND 8000000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#12: xvcmpeqdp 0000000000000000 eq fff0000000000000 AND 0000000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#13: xvcmpeqdp 0000000000000000 eq 8000000000000000 AND 0000000000000000 eq 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpeqdp 0000000000000000 eq 0123214569900000 AND 0000000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#15: xvcmpeqdp 0000000000000000 eq 7ff7ffffffffffff AND 0000000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#16: xvcmpeqdp 0123214569900000 eq fff0000000000000 AND 0123214569900000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#17: xvcmpeqdp 0123214569900000 eq 8000000000000000 AND 0123214569900000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#18: xvcmpeqdp 0123214569900000 eq 404f000000000000 AND 0123214569900000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#19: xvcmpeqdp 0123214569900000 eq 7ff7ffffffffffff AND 0123214569900000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#20: xvcmpeqdp 7ff0000000000000 eq fff0000000000000 AND 7ff0000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#21: xvcmpeqdp 7ff0000000000000 eq 8000000000000000 AND 7ff0000000000000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#22: xvcmpeqdp 7ff0000000000000 eq 0123214569900000 AND 7ff0000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 ffffffffffffffff
+#23: xvcmpeqdp 7ff0000000000000 eq 7ff7ffffffffffff AND 7ff0000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#24: xvcmpeqdp fff7ffffffffffff eq fff0000000000000 AND fff7ffffffffffff eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#25: xvcmpeqdp fff7ffffffffffff eq 8000000000000000 AND fff7ffffffffffff eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#26: xvcmpeqdp fff7ffffffffffff eq 0123214569900000 AND fff7ffffffffffff eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#27: xvcmpeqdp fff7ffffffffffff eq 7ff7ffffffffffff AND fff7ffffffffffff eq fff7ffffffffffff ? cc=0 => 0000000000000000 0000000000000000
+#28: xvcmpeqdp fff8000000000000 eq fff0000000000000 AND fff8000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#29: xvcmpeqdp fff8000000000000 eq 8000000000000000 AND fff8000000000000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#30: xvcmpeqdp 404f000000000000 eq 404f000000000000 AND 0018000000b77501 eq 0018000000b77501 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpeqdp 7fe800000000051b eq 7fe800000000051b AND 0123214569900000 eq 0123214569900000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+
+#0: xvcmpeqdp. fff0000000000000 eq fff0000000000000 AND fff0000000000000 eq c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpeqdp. fff0000000000000 eq 8000000000000000 AND fff0000000000000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#2: xvcmpeqdp. fff0000000000000 eq 0123214569900000 AND fff0000000000000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#3: xvcmpeqdp. fff0000000000000 eq 7ff7ffffffffffff AND fff0000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#4: xvcmpeqdp. c0d0650f5a07b353 eq fff0000000000000 AND c0d0650f5a07b353 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 ffffffffffffffff
+#5: xvcmpeqdp. c0d0650f5a07b353 eq 8000000000000000 AND c0d0650f5a07b353 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#6: xvcmpeqdp. c0d0650f5a07b353 eq 0123214569900000 AND c0d0650f5a07b353 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#7: xvcmpeqdp. c0d0650f5a07b353 eq 7ff7ffffffffffff AND c0d0650f5a07b353 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#8: xvcmpeqdp. 8000000000000000 eq fff0000000000000 AND 8000000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#9: xvcmpeqdp. 8000000000000000 eq 8000000000000000 AND 8000000000000000 eq 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpeqdp. 8000000000000000 eq 0123214569900000 AND 8000000000000000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#11: xvcmpeqdp. 8000000000000000 eq 7ff7ffffffffffff AND 8000000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#12: xvcmpeqdp. 0000000000000000 eq fff0000000000000 AND 0000000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#13: xvcmpeqdp. 0000000000000000 eq 8000000000000000 AND 0000000000000000 eq 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpeqdp. 0000000000000000 eq 0123214569900000 AND 0000000000000000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#15: xvcmpeqdp. 0000000000000000 eq 7ff7ffffffffffff AND 0000000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#16: xvcmpeqdp. 0123214569900000 eq fff0000000000000 AND 0123214569900000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#17: xvcmpeqdp. 0123214569900000 eq 8000000000000000 AND 0123214569900000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#18: xvcmpeqdp. 0123214569900000 eq 404f000000000000 AND 0123214569900000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#19: xvcmpeqdp. 0123214569900000 eq 7ff7ffffffffffff AND 0123214569900000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#20: xvcmpeqdp. 7ff0000000000000 eq fff0000000000000 AND 7ff0000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#21: xvcmpeqdp. 7ff0000000000000 eq 8000000000000000 AND 7ff0000000000000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#22: xvcmpeqdp. 7ff0000000000000 eq 0123214569900000 AND 7ff0000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 ffffffffffffffff
+#23: xvcmpeqdp. 7ff0000000000000 eq 7ff7ffffffffffff AND 7ff0000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#24: xvcmpeqdp. fff7ffffffffffff eq fff0000000000000 AND fff7ffffffffffff eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#25: xvcmpeqdp. fff7ffffffffffff eq 8000000000000000 AND fff7ffffffffffff eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#26: xvcmpeqdp. fff7ffffffffffff eq 0123214569900000 AND fff7ffffffffffff eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#27: xvcmpeqdp. fff7ffffffffffff eq 7ff7ffffffffffff AND fff7ffffffffffff eq fff7ffffffffffff ? cc=2 => 0000000000000000 0000000000000000
+#28: xvcmpeqdp. fff8000000000000 eq fff0000000000000 AND fff8000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#29: xvcmpeqdp. fff8000000000000 eq 8000000000000000 AND fff8000000000000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#30: xvcmpeqdp. 404f000000000000 eq 404f000000000000 AND 0018000000b77501 eq 0018000000b77501 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpeqdp. 7fe800000000051b eq 7fe800000000051b AND 0123214569900000 eq 0123214569900000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+
+
+#0: xvcmpgedp fff0000000000000 ge fff0000000000000 AND fff0000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpgedp fff0000000000000 ge 8000000000000000 AND fff0000000000000 ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#2: xvcmpgedp fff0000000000000 ge 0123214569900000 AND fff0000000000000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#3: xvcmpgedp fff0000000000000 ge 7ff7ffffffffffff AND fff0000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#4: xvcmpgedp c0d0650f5a07b353 ge fff0000000000000 AND c0d0650f5a07b353 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#5: xvcmpgedp c0d0650f5a07b353 ge 8000000000000000 AND c0d0650f5a07b353 ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#6: xvcmpgedp c0d0650f5a07b353 ge 0123214569900000 AND c0d0650f5a07b353 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#7: xvcmpgedp c0d0650f5a07b353 ge 7ff7ffffffffffff AND c0d0650f5a07b353 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#8: xvcmpgedp 8000000000000000 ge fff0000000000000 AND 8000000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgedp 8000000000000000 ge 8000000000000000 AND 8000000000000000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpgedp 8000000000000000 ge 0123214569900000 AND 8000000000000000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#11: xvcmpgedp 8000000000000000 ge 7ff7ffffffffffff AND 8000000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#12: xvcmpgedp 0000000000000000 ge fff0000000000000 AND 0000000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgedp 0000000000000000 ge 8000000000000000 AND 0000000000000000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpgedp 0000000000000000 ge 0123214569900000 AND 0000000000000000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#15: xvcmpgedp 0000000000000000 ge 7ff7ffffffffffff AND 0000000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#16: xvcmpgedp 0123214569900000 ge fff0000000000000 AND 0123214569900000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgedp 0123214569900000 ge 8000000000000000 AND 0123214569900000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgedp 0123214569900000 ge 404f000000000000 AND 0123214569900000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#19: xvcmpgedp 0123214569900000 ge 7ff7ffffffffffff AND 0123214569900000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#20: xvcmpgedp 7ff0000000000000 ge fff0000000000000 AND 7ff0000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgedp 7ff0000000000000 ge 8000000000000000 AND 7ff0000000000000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgedp 7ff0000000000000 ge 0123214569900000 AND 7ff0000000000000 ge 7ff0000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#23: xvcmpgedp 7ff0000000000000 ge 7ff7ffffffffffff AND 7ff0000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#24: xvcmpgedp fff7ffffffffffff ge fff0000000000000 AND fff7ffffffffffff ge c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#25: xvcmpgedp fff7ffffffffffff ge 8000000000000000 AND fff7ffffffffffff ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#26: xvcmpgedp fff7ffffffffffff ge 0123214569900000 AND fff7ffffffffffff ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#27: xvcmpgedp fff7ffffffffffff ge 7ff7ffffffffffff AND fff7ffffffffffff ge fff7ffffffffffff ? cc=0 => 0000000000000000 0000000000000000
+#28: xvcmpgedp fff8000000000000 ge fff0000000000000 AND fff8000000000000 ge c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#29: xvcmpgedp fff8000000000000 ge 8000000000000000 AND fff8000000000000 ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#30: xvcmpgedp 404f000000000000 ge 404f000000000000 AND 0018000000b77501 ge 0018000000b77501 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpgedp 7fe800000000051b ge 7fe800000000051b AND 0123214569900000 ge 0123214569900000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+
+#0: xvcmpgedp. fff0000000000000 ge fff0000000000000 AND fff0000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpgedp. fff0000000000000 ge 8000000000000000 AND fff0000000000000 ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#2: xvcmpgedp. fff0000000000000 ge 0123214569900000 AND fff0000000000000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#3: xvcmpgedp. fff0000000000000 ge 7ff7ffffffffffff AND fff0000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#4: xvcmpgedp. c0d0650f5a07b353 ge fff0000000000000 AND c0d0650f5a07b353 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#5: xvcmpgedp. c0d0650f5a07b353 ge 8000000000000000 AND c0d0650f5a07b353 ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#6: xvcmpgedp. c0d0650f5a07b353 ge 0123214569900000 AND c0d0650f5a07b353 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#7: xvcmpgedp. c0d0650f5a07b353 ge 7ff7ffffffffffff AND c0d0650f5a07b353 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#8: xvcmpgedp. 8000000000000000 ge fff0000000000000 AND 8000000000000000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgedp. 8000000000000000 ge 8000000000000000 AND 8000000000000000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpgedp. 8000000000000000 ge 0123214569900000 AND 8000000000000000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#11: xvcmpgedp. 8000000000000000 ge 7ff7ffffffffffff AND 8000000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#12: xvcmpgedp. 0000000000000000 ge fff0000000000000 AND 0000000000000000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgedp. 0000000000000000 ge 8000000000000000 AND 0000000000000000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpgedp. 0000000000000000 ge 0123214569900000 AND 0000000000000000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#15: xvcmpgedp. 0000000000000000 ge 7ff7ffffffffffff AND 0000000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#16: xvcmpgedp. 0123214569900000 ge fff0000000000000 AND 0123214569900000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgedp. 0123214569900000 ge 8000000000000000 AND 0123214569900000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgedp. 0123214569900000 ge 404f000000000000 AND 0123214569900000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#19: xvcmpgedp. 0123214569900000 ge 7ff7ffffffffffff AND 0123214569900000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#20: xvcmpgedp. 7ff0000000000000 ge fff0000000000000 AND 7ff0000000000000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgedp. 7ff0000000000000 ge 8000000000000000 AND 7ff0000000000000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgedp. 7ff0000000000000 ge 0123214569900000 AND 7ff0000000000000 ge 7ff0000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#23: xvcmpgedp. 7ff0000000000000 ge 7ff7ffffffffffff AND 7ff0000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#24: xvcmpgedp. fff7ffffffffffff ge fff0000000000000 AND fff7ffffffffffff ge c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#25: xvcmpgedp. fff7ffffffffffff ge 8000000000000000 AND fff7ffffffffffff ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#26: xvcmpgedp. fff7ffffffffffff ge 0123214569900000 AND fff7ffffffffffff ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#27: xvcmpgedp. fff7ffffffffffff ge 7ff7ffffffffffff AND fff7ffffffffffff ge fff7ffffffffffff ? cc=2 => 0000000000000000 0000000000000000
+#28: xvcmpgedp. fff8000000000000 ge fff0000000000000 AND fff8000000000000 ge c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#29: xvcmpgedp. fff8000000000000 ge 8000000000000000 AND fff8000000000000 ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#30: xvcmpgedp. 404f000000000000 ge 404f000000000000 AND 0018000000b77501 ge 0018000000b77501 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpgedp. 7fe800000000051b ge 7fe800000000051b AND 0123214569900000 ge 0123214569900000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+
+
+#0: xvcmpgtdp fff0000000000000 gt fff0000000000000 AND fff0000000000000 gt c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#1: xvcmpgtdp fff0000000000000 gt 8000000000000000 AND fff0000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#2: xvcmpgtdp fff0000000000000 gt 0123214569900000 AND fff0000000000000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#3: xvcmpgtdp fff0000000000000 gt 7ff7ffffffffffff AND fff0000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#4: xvcmpgtdp c0d0650f5a07b353 gt fff0000000000000 AND c0d0650f5a07b353 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#5: xvcmpgtdp c0d0650f5a07b353 gt 8000000000000000 AND c0d0650f5a07b353 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#6: xvcmpgtdp c0d0650f5a07b353 gt 0123214569900000 AND c0d0650f5a07b353 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#7: xvcmpgtdp c0d0650f5a07b353 gt 7ff7ffffffffffff AND c0d0650f5a07b353 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#8: xvcmpgtdp 8000000000000000 gt fff0000000000000 AND 8000000000000000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgtdp 8000000000000000 gt 8000000000000000 AND 8000000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#10: xvcmpgtdp 8000000000000000 gt 0123214569900000 AND 8000000000000000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#11: xvcmpgtdp 8000000000000000 gt 7ff7ffffffffffff AND 8000000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#12: xvcmpgtdp 0000000000000000 gt fff0000000000000 AND 0000000000000000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgtdp 0000000000000000 gt 8000000000000000 AND 0000000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#14: xvcmpgtdp 0000000000000000 gt 0123214569900000 AND 0000000000000000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#15: xvcmpgtdp 0000000000000000 gt 7ff7ffffffffffff AND 0000000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#16: xvcmpgtdp 0123214569900000 gt fff0000000000000 AND 0123214569900000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgtdp 0123214569900000 gt 8000000000000000 AND 0123214569900000 gt 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgtdp 0123214569900000 gt 404f000000000000 AND 0123214569900000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#19: xvcmpgtdp 0123214569900000 gt 7ff7ffffffffffff AND 0123214569900000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#20: xvcmpgtdp 7ff0000000000000 gt fff0000000000000 AND 7ff0000000000000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgtdp 7ff0000000000000 gt 8000000000000000 AND 7ff0000000000000 gt 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgtdp 7ff0000000000000 gt 0123214569900000 AND 7ff0000000000000 gt 7ff0000000000000 ? cc=0 => ffffffffffffffff 0000000000000000
+#23: xvcmpgtdp 7ff0000000000000 gt 7ff7ffffffffffff AND 7ff0000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#24: xvcmpgtdp fff7ffffffffffff gt fff0000000000000 AND fff7ffffffffffff gt c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#25: xvcmpgtdp fff7ffffffffffff gt 8000000000000000 AND fff7ffffffffffff gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#26: xvcmpgtdp fff7ffffffffffff gt 0123214569900000 AND fff7ffffffffffff gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#27: xvcmpgtdp fff7ffffffffffff gt 7ff7ffffffffffff AND fff7ffffffffffff gt fff7ffffffffffff ? cc=0 => 0000000000000000 0000000000000000
+#28: xvcmpgtdp fff8000000000000 gt fff0000000000000 AND fff8000000000000 gt c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#29: xvcmpgtdp fff8000000000000 gt 8000000000000000 AND fff8000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#30: xvcmpgtdp 404f000000000000 gt 404f000000000000 AND 0018000000b77501 gt 0018000000b77501 ? cc=0 => 0000000000000000 0000000000000000
+#31: xvcmpgtdp 7fe800000000051b gt 7fe800000000051b AND 0123214569900000 gt 0123214569900000 ? cc=0 => 0000000000000000 0000000000000000
+
+#0: xvcmpgtdp. fff0000000000000 gt fff0000000000000 AND fff0000000000000 gt c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#1: xvcmpgtdp. fff0000000000000 gt 8000000000000000 AND fff0000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#2: xvcmpgtdp. fff0000000000000 gt 0123214569900000 AND fff0000000000000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#3: xvcmpgtdp. fff0000000000000 gt 7ff7ffffffffffff AND fff0000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#4: xvcmpgtdp. c0d0650f5a07b353 gt fff0000000000000 AND c0d0650f5a07b353 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#5: xvcmpgtdp. c0d0650f5a07b353 gt 8000000000000000 AND c0d0650f5a07b353 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#6: xvcmpgtdp. c0d0650f5a07b353 gt 0123214569900000 AND c0d0650f5a07b353 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#7: xvcmpgtdp. c0d0650f5a07b353 gt 7ff7ffffffffffff AND c0d0650f5a07b353 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#8: xvcmpgtdp. 8000000000000000 gt fff0000000000000 AND 8000000000000000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgtdp. 8000000000000000 gt 8000000000000000 AND 8000000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#10: xvcmpgtdp. 8000000000000000 gt 0123214569900000 AND 8000000000000000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#11: xvcmpgtdp. 8000000000000000 gt 7ff7ffffffffffff AND 8000000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#12: xvcmpgtdp. 0000000000000000 gt fff0000000000000 AND 0000000000000000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgtdp. 0000000000000000 gt 8000000000000000 AND 0000000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#14: xvcmpgtdp. 0000000000000000 gt 0123214569900000 AND 0000000000000000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#15: xvcmpgtdp. 0000000000000000 gt 7ff7ffffffffffff AND 0000000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#16: xvcmpgtdp. 0123214569900000 gt fff0000000000000 AND 0123214569900000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgtdp. 0123214569900000 gt 8000000000000000 AND 0123214569900000 gt 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgtdp. 0123214569900000 gt 404f000000000000 AND 0123214569900000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#19: xvcmpgtdp. 0123214569900000 gt 7ff7ffffffffffff AND 0123214569900000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#20: xvcmpgtdp. 7ff0000000000000 gt fff0000000000000 AND 7ff0000000000000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgtdp. 7ff0000000000000 gt 8000000000000000 AND 7ff0000000000000 gt 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgtdp. 7ff0000000000000 gt 0123214569900000 AND 7ff0000000000000 gt 7ff0000000000000 ? cc=0 => ffffffffffffffff 0000000000000000
+#23: xvcmpgtdp. 7ff0000000000000 gt 7ff7ffffffffffff AND 7ff0000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#24: xvcmpgtdp. fff7ffffffffffff gt fff0000000000000 AND fff7ffffffffffff gt c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#25: xvcmpgtdp. fff7ffffffffffff gt 8000000000000000 AND fff7ffffffffffff gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#26: xvcmpgtdp. fff7ffffffffffff gt 0123214569900000 AND fff7ffffffffffff gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#27: xvcmpgtdp. fff7ffffffffffff gt 7ff7ffffffffffff AND fff7ffffffffffff gt fff7ffffffffffff ? cc=2 => 0000000000000000 0000000000000000
+#28: xvcmpgtdp. fff8000000000000 gt fff0000000000000 AND fff8000000000000 gt c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#29: xvcmpgtdp. fff8000000000000 gt 8000000000000000 AND fff8000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#30: xvcmpgtdp. 404f000000000000 gt 404f000000000000 AND 0018000000b77501 gt 0018000000b77501 ? cc=2 => 0000000000000000 0000000000000000
+#31: xvcmpgtdp. 7fe800000000051b gt 7fe800000000051b AND 0123214569900000 gt 0123214569900000 ? cc=2 => 0000000000000000 0000000000000000
+
+
+#0: xvcmpeqsp ff800000 eq ff800000 AND ff800000 eq c683287b AND ff800000 eq 80000000 AND ff800000 eq 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpeqsp ff800000 eq 00000000 AND ff800000 eq 7f800000 AND ff800000 eq 7fffffff AND ff800000 eq 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#2: xvcmpeqsp c683287b eq ff800000 AND c683287b eq c683287b AND c683287b eq 80000000 AND c683287b eq 00000000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#3: xvcmpeqsp c683287b eq 00000000 AND c683287b eq 7f800000 AND c683287b eq 7fffffff AND c683287b eq 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#4: xvcmpeqsp 80000000 eq ff800000 AND 80000000 eq c683287b AND 80000000 eq 80000000 AND 80000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#5: xvcmpeqsp 80000000 eq 00000000 AND 80000000 eq 7f800000 AND 80000000 eq 7fffffff AND 80000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpeqsp 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#7: xvcmpeqsp 00000000 eq 00000000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpeqsp 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#9: xvcmpeqsp 00000000 eq 42780000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#10: xvcmpeqsp 7f800000 eq ff800000 AND 7f800000 eq c683287b AND 7f800000 eq 80000000 AND 7f800000 eq 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#11: xvcmpeqsp 7f800000 eq 00000000 AND 7f800000 eq 7f800000 AND 7f800000 eq 7fffffff AND 7f800000 eq 7fc00000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#12: xvcmpeqsp ffffffff eq ff800000 AND ffffffff eq c683287b AND ffffffff eq 80000000 AND ffffffff eq 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#13: xvcmpeqsp ffffffff eq 00000000 AND ffffffff eq 7f800000 AND ffffffff eq 7fffffff AND ffffffff eq ffffffff ? cc=0 => 00000000 00000000 00000000 00000000
+#14: xvcmpeqsp ffc00000 eq ff800000 AND ffc00000 eq c683287b AND ffc00000 eq 80000000 AND ffc00000 eq 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#15: xvcmpeqsp 42780000 eq 42780000 AND 00000000 eq 00000000 AND 7f800000 eq 7f800000 AND 00000000 eq 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+
+#0: xvcmpeqsp. ff800000 eq ff800000 AND ff800000 eq c683287b AND ff800000 eq 80000000 AND ff800000 eq 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpeqsp. ff800000 eq 00000000 AND ff800000 eq 7f800000 AND ff800000 eq 7fffffff AND ff800000 eq 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#2: xvcmpeqsp. c683287b eq ff800000 AND c683287b eq c683287b AND c683287b eq 80000000 AND c683287b eq 00000000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#3: xvcmpeqsp. c683287b eq 00000000 AND c683287b eq 7f800000 AND c683287b eq 7fffffff AND c683287b eq 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#4: xvcmpeqsp. 80000000 eq ff800000 AND 80000000 eq c683287b AND 80000000 eq 80000000 AND 80000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#5: xvcmpeqsp. 80000000 eq 00000000 AND 80000000 eq 7f800000 AND 80000000 eq 7fffffff AND 80000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpeqsp. 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#7: xvcmpeqsp. 00000000 eq 00000000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpeqsp. 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#9: xvcmpeqsp. 00000000 eq 42780000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#10: xvcmpeqsp. 7f800000 eq ff800000 AND 7f800000 eq c683287b AND 7f800000 eq 80000000 AND 7f800000 eq 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#11: xvcmpeqsp. 7f800000 eq 00000000 AND 7f800000 eq 7f800000 AND 7f800000 eq 7fffffff AND 7f800000 eq 7fc00000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#12: xvcmpeqsp. ffffffff eq ff800000 AND ffffffff eq c683287b AND ffffffff eq 80000000 AND ffffffff eq 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#13: xvcmpeqsp. ffffffff eq 00000000 AND ffffffff eq 7f800000 AND ffffffff eq 7fffffff AND ffffffff eq ffffffff ? cc=2 => 00000000 00000000 00000000 00000000
+#14: xvcmpeqsp. ffc00000 eq ff800000 AND ffc00000 eq c683287b AND ffc00000 eq 80000000 AND ffc00000 eq 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#15: xvcmpeqsp. 42780000 eq 42780000 AND 00000000 eq 00000000 AND 7f800000 eq 7f800000 AND 00000000 eq 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+
+
+#0: xvcmpgesp ff800000 ge ff800000 AND ff800000 ge c683287b AND ff800000 ge 80000000 AND ff800000 ge 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpgesp ff800000 ge 00000000 AND ff800000 ge 7f800000 AND ff800000 ge 7fffffff AND ff800000 ge 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#2: xvcmpgesp c683287b ge ff800000 AND c683287b ge c683287b AND c683287b ge 80000000 AND c683287b ge 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#3: xvcmpgesp c683287b ge 00000000 AND c683287b ge 7f800000 AND c683287b ge 7fffffff AND c683287b ge 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#4: xvcmpgesp 80000000 ge ff800000 AND 80000000 ge c683287b AND 80000000 ge 80000000 AND 80000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#5: xvcmpgesp 80000000 ge 00000000 AND 80000000 ge 7f800000 AND 80000000 ge 7fffffff AND 80000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpgesp 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#7: xvcmpgesp 00000000 ge 00000000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpgesp 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#9: xvcmpgesp 00000000 ge 42780000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#10: xvcmpgesp 7f800000 ge ff800000 AND 7f800000 ge c683287b AND 7f800000 ge 80000000 AND 7f800000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgesp 7f800000 ge 00000000 AND 7f800000 ge 7f800000 AND 7f800000 ge 7fffffff AND 7f800000 ge 7fc00000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#12: xvcmpgesp ffffffff ge ff800000 AND ffffffff ge c683287b AND ffffffff ge 80000000 AND ffffffff ge 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#13: xvcmpgesp ffffffff ge 00000000 AND ffffffff ge 7f800000 AND ffffffff ge 7fffffff AND ffffffff ge ffffffff ? cc=0 => 00000000 00000000 00000000 00000000
+#14: xvcmpgesp ffc00000 ge ff800000 AND ffc00000 ge c683287b AND ffc00000 ge 80000000 AND ffc00000 ge 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#15: xvcmpgesp 42780000 ge 42780000 AND 00000000 ge 00000000 AND 7f800000 ge 7f800000 AND 00000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+
+#0: xvcmpgesp. ff800000 ge ff800000 AND ff800000 ge c683287b AND ff800000 ge 80000000 AND ff800000 ge 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpgesp. ff800000 ge 00000000 AND ff800000 ge 7f800000 AND ff800000 ge 7fffffff AND ff800000 ge 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#2: xvcmpgesp. c683287b ge ff800000 AND c683287b ge c683287b AND c683287b ge 80000000 AND c683287b ge 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#3: xvcmpgesp. c683287b ge 00000000 AND c683287b ge 7f800000 AND c683287b ge 7fffffff AND c683287b ge 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#4: xvcmpgesp. 80000000 ge ff800000 AND 80000000 ge c683287b AND 80000000 ge 80000000 AND 80000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#5: xvcmpgesp. 80000000 ge 00000000 AND 80000000 ge 7f800000 AND 80000000 ge 7fffffff AND 80000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpgesp. 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#7: xvcmpgesp. 00000000 ge 00000000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpgesp. 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#9: xvcmpgesp. 00000000 ge 42780000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#10: xvcmpgesp. 7f800000 ge ff800000 AND 7f800000 ge c683287b AND 7f800000 ge 80000000 AND 7f800000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgesp. 7f800000 ge 00000000 AND 7f800000 ge 7f800000 AND 7f800000 ge 7fffffff AND 7f800000 ge 7fc00000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#12: xvcmpgesp. ffffffff ge ff800000 AND ffffffff ge c683287b AND ffffffff ge 80000000 AND ffffffff ge 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#13: xvcmpgesp. ffffffff ge 00000000 AND ffffffff ge 7f800000 AND ffffffff ge 7fffffff AND ffffffff ge ffffffff ? cc=2 => 00000000 00000000 00000000 00000000
+#14: xvcmpgesp. ffc00000 ge ff800000 AND ffc00000 ge c683287b AND ffc00000 ge 80000000 AND ffc00000 ge 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#15: xvcmpgesp. 42780000 ge 42780000 AND 00000000 ge 00000000 AND 7f800000 ge 7f800000 AND 00000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+
+
+#0: xvcmpgtsp ff800000 gt ff800000 AND ff800000 gt c683287b AND ff800000 gt 80000000 AND ff800000 gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#1: xvcmpgtsp ff800000 gt 00000000 AND ff800000 gt 7f800000 AND ff800000 gt 7fffffff AND ff800000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#2: xvcmpgtsp c683287b gt ff800000 AND c683287b gt c683287b AND c683287b gt 80000000 AND c683287b gt 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#3: xvcmpgtsp c683287b gt 00000000 AND c683287b gt 7f800000 AND c683287b gt 7fffffff AND c683287b gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#4: xvcmpgtsp 80000000 gt ff800000 AND 80000000 gt c683287b AND 80000000 gt 80000000 AND 80000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#5: xvcmpgtsp 80000000 gt 00000000 AND 80000000 gt 7f800000 AND 80000000 gt 7fffffff AND 80000000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#6: xvcmpgtsp 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#7: xvcmpgtsp 00000000 gt 00000000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#8: xvcmpgtsp 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#9: xvcmpgtsp 00000000 gt 42780000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#10: xvcmpgtsp 7f800000 gt ff800000 AND 7f800000 gt c683287b AND 7f800000 gt 80000000 AND 7f800000 gt 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgtsp 7f800000 gt 00000000 AND 7f800000 gt 7f800000 AND 7f800000 gt 7fffffff AND 7f800000 gt 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#12: xvcmpgtsp ffffffff gt ff800000 AND ffffffff gt c683287b AND ffffffff gt 80000000 AND ffffffff gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#13: xvcmpgtsp ffffffff gt 00000000 AND ffffffff gt 7f800000 AND ffffffff gt 7fffffff AND ffffffff gt ffffffff ? cc=0 => 00000000 00000000 00000000 00000000
+#14: xvcmpgtsp ffc00000 gt ff800000 AND ffc00000 gt c683287b AND ffc00000 gt 80000000 AND ffc00000 gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#15: xvcmpgtsp 42780000 gt 42780000 AND 00000000 gt 00000000 AND 7f800000 gt 7f800000 AND 00000000 gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+
+#0: xvcmpgtsp. ff800000 gt ff800000 AND ff800000 gt c683287b AND ff800000 gt 80000000 AND ff800000 gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#1: xvcmpgtsp. ff800000 gt 00000000 AND ff800000 gt 7f800000 AND ff800000 gt 7fffffff AND ff800000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#2: xvcmpgtsp. c683287b gt ff800000 AND c683287b gt c683287b AND c683287b gt 80000000 AND c683287b gt 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#3: xvcmpgtsp. c683287b gt 00000000 AND c683287b gt 7f800000 AND c683287b gt 7fffffff AND c683287b gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#4: xvcmpgtsp. 80000000 gt ff800000 AND 80000000 gt c683287b AND 80000000 gt 80000000 AND 80000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#5: xvcmpgtsp. 80000000 gt 00000000 AND 80000000 gt 7f800000 AND 80000000 gt 7fffffff AND 80000000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#6: xvcmpgtsp. 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#7: xvcmpgtsp. 00000000 gt 00000000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#8: xvcmpgtsp. 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#9: xvcmpgtsp. 00000000 gt 42780000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#10: xvcmpgtsp. 7f800000 gt ff800000 AND 7f800000 gt c683287b AND 7f800000 gt 80000000 AND 7f800000 gt 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgtsp. 7f800000 gt 00000000 AND 7f800000 gt 7f800000 AND 7f800000 gt 7fffffff AND 7f800000 gt 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#12: xvcmpgtsp. ffffffff gt ff800000 AND ffffffff gt c683287b AND ffffffff gt 80000000 AND ffffffff gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#13: xvcmpgtsp. ffffffff gt 00000000 AND ffffffff gt 7f800000 AND ffffffff gt 7fffffff AND ffffffff gt ffffffff ? cc=2 => 00000000 00000000 00000000 00000000
+#14: xvcmpgtsp. ffc00000 gt ff800000 AND ffc00000 gt c683287b AND ffc00000 gt 80000000 AND ffc00000 gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#15: xvcmpgtsp. 42780000 gt 42780000 AND 00000000 gt 00000000 AND 7f800000 gt 7f800000 AND 00000000 gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+
+
+#0: xvadddp fff0000000000000 + fff0000000000000 AND fff0000000000000 + c0d0650f5a07b353 => fff0000000000000 fff0000000000000
+#1: xvadddp 41232585a9900000 + 41382511a2000000 AND fff0000000000000 + 0000000000000000 => 4140dbea3b640000 fff0000000000000
+#2: xvadddp fff0000000000000 + 0123214569900000 AND fff0000000000000 + 7ff0000000000000 => fff0000000000000 7ff8000000000000
+#3: xvadddp fff0000000000000 + 7ff7ffffffffffff AND fff0000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvadddp c0d0650f5a07b353 + fff0000000000000 AND c0d0650f5a07b353 + c0d0650f5a07b353 => fff0000000000000 c0e0650f5a07b353
+#5: xvadddp c0d0650f5a07b353 + 8000000000000000 AND c0d0650f5a07b353 + 0000000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#6: xvadddp c0d0650f5a07b353 + 0123214569900000 AND c0d0650f5a07b353 + 7ff0000000000000 => c0d0650f5a07b353 7ff0000000000000
+#7: xvadddp c0d0650f5a07b353 + 7ff7ffffffffffff AND c0d0650f5a07b353 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvadddp 8000000000000000 + fff0000000000000 AND 8000000000000000 + c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#9: xvadddp 8000000000000000 + 8000000000000000 AND 8000000000000000 + 0000000000000000 => 8000000000000000 0000000000000000
+#10: xvadddp 8000000000000000 + 0123214569900000 AND 8000000000000000 + 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#11: xvadddp 8000000000000000 + 7ff7ffffffffffff AND 8000000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvadddp 0000000000000000 + fff0000000000000 AND 0000000000000000 + c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#13: xvadddp 0000000000000000 + 8000000000000000 AND 0000000000000000 + 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvadddp 0000000000000000 + 0123214569900000 AND 0000000000000000 + 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#15: xvadddp 0000000000000000 + 7ff7ffffffffffff AND 0000000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvadddp 0123214569900000 + fff0000000000000 AND 0123214569900000 + c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#17: xvadddp 0123214569900000 + 8000000000000000 AND 0123214569900000 + 0000000000000000 => 0123214569900000 0123214569900000
+#18: xvadddp 0123214569900000 + 404f000000000000 AND 0123214569900000 + 7ff0000000000000 => 404f000000000000 7ff0000000000000
+#19: xvadddp 0123214569900000 + 7ff7ffffffffffff AND 0123214569900000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvadddp 7ff0000000000000 + fff0000000000000 AND 7ff0000000000000 + c0d0650f5a07b353 => 7ff8000000000000 7ff0000000000000
+#21: xvadddp 7ff0000000000000 + 8000000000000000 AND 7ff0000000000000 + 0000000000000000 => 7ff0000000000000 7ff0000000000000
+#22: xvadddp 7ff0000000000000 + 0123214569900000 AND 7ff0000000000000 + 7ff0000000000000 => 7ff0000000000000 7ff0000000000000
+#23: xvadddp 7ff0000000000000 + 7ff7ffffffffffff AND 7ff0000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvadddp fff7ffffffffffff + fff0000000000000 AND fff7ffffffffffff + c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvadddp fff8000000000000 + 8000000000000000 AND fff8000000000000 + 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvadddp fff7ffffffffffff + 0123214569900000 AND fff7ffffffffffff + 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvadddp fff7ffffffffffff + 7ff7ffffffffffff AND fff7ffffffffffff + 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvadddp fff8000000000000 + fff0000000000000 AND fff8000000000000 + c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvadddp fff8000000000000 + 8000000000000000 AND 41232585a9900000 + 41382511a2000000 => fff8000000000000 4140dbea3b640000
+#30: xvadddp 41232585a9900000 + 41382511a2000000 AND 7ff7ffffffffffff + 7ff8000000000000 => 4140dbea3b640000 7fffffffffffffff
+#31: xvadddp 7ff8000000000000 + 7ff8000000000000 AND 7ff8000000000000 + fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvaddsp ff800000 + ff800000 AND ff800000 + c683287b AND 49192c2d + 49c1288d AND ff800000 + 00000000 => ff800000 ff800000 4a06df52 ff800000
+#1: xvaddsp ff800000 + 00000000 AND ff800000 + 7f800000 AND ff800000 + 7fffffff AND ff800000 + 7fc00000 => ff800000 7fc00000 7fffffff 7fc00000
+#2: xvaddsp c683287b + ff800000 AND c683287b + c683287b AND c683287b + 80000000 AND c683287b + 00000000 => ff800000 c703287b c683287b c683287b
+#3: xvaddsp c683287b + 00000000 AND c683287b + 7f800000 AND c683287b + 7fffffff AND c683287b + 7fc00000 => c683287b 7f800000 7fffffff 7fc00000
+#4: xvaddsp 80000000 + ff800000 AND 80000000 + c683287b AND 80000000 + 80000000 AND 80000000 + 00000000 => ff800000 c683287b 80000000 00000000
+#5: xvaddsp 80000000 + 00000000 AND 80000000 + 7f800000 AND 80000000 + 7fffffff AND 80000000 + 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#6: xvaddsp 00000000 + ff800000 AND 00000000 + c683287b AND 00000000 + 80000000 AND 00000000 + 00000000 => ff800000 c683287b 00000000 00000000
+#7: xvaddsp 00000000 + 00000000 AND 00000000 + 7f800000 AND 00000000 + 7fffffff AND 00000000 + 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#8: xvaddsp 00000000 + ff800000 AND 00000000 + c683287b AND 00000000 + 80000000 AND 00000000 + 00000000 => ff800000 c683287b 00000000 00000000
+#9: xvaddsp 00000000 + 42780000 AND 00000000 + 7f800000 AND 00000000 + 7fffffff AND 00000000 + 7fc00000 => 42780000 7f800000 7fffffff 7fc00000
+#10: xvaddsp 7f800000 + ff800000 AND 7f800000 + c683287b AND 7f800000 + 80000000 AND 7f800000 + 00000000 => 7fc00000 7f800000 7f800000 7f800000
+#11: xvaddsp 7f800000 + 00000000 AND 7f800000 + 7f800000 AND 7f800000 + 7fffffff AND 7f800000 + 7fc00000 => 7f800000 7f800000 7fffffff 7fc00000
+#12: xvaddsp ffffffff + ff800000 AND ffffffff + c683287b AND ffc00000 + 80000000 AND ffc00000 + 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvaddsp ffffffff + 00000000 AND ffffffff + 7f800000 AND ffffffff + 7fffffff AND ffffffff + 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvaddsp ffc00000 + ff800000 AND ffc00000 + c683287b AND ffc00000 + 80000000 AND 49192c2d + 49c1288d => ffc00000 ffc00000 ffc00000 4a06df52
+#15: xvaddsp 49192c2d + 49c1288d AND 7fffffff + 7fc00000 AND 7fc00000 + 7fc00000 AND 7fc00000 + ffc00000 => 4a06df52 7fffffff 7fc00000 7fc00000
+
+
+#0: xvdivdp fff0000000000000 / fff0000000000000 AND fff0000000000000 / c0d0650f5a07b353 => 7ff8000000000000 7ff0000000000000
+#1: xvdivdp 41232585a9900000 / 41382511a2000000 AND fff0000000000000 / 0000000000000000 => 3fd9602b4fe7a892 fff0000000000000
+#2: xvdivdp fff0000000000000 / 0123214569900000 AND fff0000000000000 / 7ff0000000000000 => fff0000000000000 7ff8000000000000
+#3: xvdivdp fff0000000000000 / 7ff7ffffffffffff AND fff0000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvdivdp c0d0650f5a07b353 / fff0000000000000 AND c0d0650f5a07b353 / c0d0650f5a07b353 => 0000000000000000 3ff0000000000000
+#5: xvdivdp c0d0650f5a07b353 / 8000000000000000 AND c0d0650f5a07b353 / 0000000000000000 => 7ff0000000000000 fff0000000000000
+#6: xvdivdp c0d0650f5a07b353 / 0123214569900000 AND c0d0650f5a07b353 / 7ff0000000000000 => ff9b6cb57ca13c00 8000000000000000
+#7: xvdivdp c0d0650f5a07b353 / 7ff7ffffffffffff AND c0d0650f5a07b353 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvdivdp 8000000000000000 / fff0000000000000 AND 8000000000000000 / c0d0650f5a07b353 => 0000000000000000 0000000000000000
+#9: xvdivdp 8000000000000000 / 8000000000000000 AND 8000000000000000 / 0000000000000000 => 7ff8000000000000 7ff8000000000000
+#10: xvdivdp 8000000000000000 / 0123214569900000 AND 8000000000000000 / 7ff0000000000000 => 8000000000000000 8000000000000000
+#11: xvdivdp 8000000000000000 / 7ff7ffffffffffff AND 8000000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvdivdp 0000000000000000 / fff0000000000000 AND 0000000000000000 / c0d0650f5a07b353 => 8000000000000000 8000000000000000
+#13: xvdivdp 0000000000000000 / 8000000000000000 AND 0000000000000000 / 0000000000000000 => 7ff8000000000000 7ff8000000000000
+#14: xvdivdp 0000000000000000 / 0123214569900000 AND 0000000000000000 / 7ff0000000000000 => 0000000000000000 0000000000000000
+#15: xvdivdp 0000000000000000 / 7ff7ffffffffffff AND 0000000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvdivdp 0123214569900000 / fff0000000000000 AND 0123214569900000 / c0d0650f5a07b353 => 8000000000000000 8042ab59d8b6ec87
+#17: xvdivdp 0123214569900000 / 8000000000000000 AND 0123214569900000 / 0000000000000000 => fff0000000000000 7ff0000000000000
+#18: xvdivdp 0123214569900000 / 404f000000000000 AND 0123214569900000 / 7ff0000000000000 => 00c3bf3f64b5ad6b 0000000000000000
+#19: xvdivdp 0123214569900000 / 7ff7ffffffffffff AND 0123214569900000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvdivdp 7ff0000000000000 / fff0000000000000 AND 7ff0000000000000 / c0d0650f5a07b353 => 7ff8000000000000 fff0000000000000
+#21: xvdivdp 7ff0000000000000 / 8000000000000000 AND 7ff0000000000000 / 0000000000000000 => fff0000000000000 7ff0000000000000
+#22: xvdivdp 7ff0000000000000 / 0123214569900000 AND 7ff0000000000000 / 7ff0000000000000 => 7ff0000000000000 7ff8000000000000
+#23: xvdivdp 7ff0000000000000 / 7ff7ffffffffffff AND 7ff0000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvdivdp fff7ffffffffffff / fff0000000000000 AND fff7ffffffffffff / c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvdivdp fff8000000000000 / 8000000000000000 AND fff8000000000000 / 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvdivdp fff7ffffffffffff / 0123214569900000 AND fff7ffffffffffff / 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvdivdp fff7ffffffffffff / 7ff7ffffffffffff AND fff7ffffffffffff / 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvdivdp fff8000000000000 / fff0000000000000 AND fff8000000000000 / c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvdivdp fff8000000000000 / 8000000000000000 AND 41232585a9900000 / 41382511a2000000 => fff8000000000000 3fd9602b4fe7a892
+#30: xvdivdp 41232585a9900000 / 41382511a2000000 AND 7ff7ffffffffffff / 7ff8000000000000 => 3fd9602b4fe7a892 7fffffffffffffff
+#31: xvdivdp 7ff8000000000000 / 7ff8000000000000 AND 7ff8000000000000 / fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvdivsp ff800000 / ff800000 AND ff800000 / c683287b AND 49192c2d / 49c1288d AND ff800000 / 00000000 => 7fc00000 7f800000 3ecb015a ff800000
+#1: xvdivsp ff800000 / 00000000 AND ff800000 / 7f800000 AND ff800000 / 7fffffff AND ff800000 / 7fc00000 => ff800000 7fc00000 7fffffff 7fc00000
+#2: xvdivsp c683287b / ff800000 AND c683287b / c683287b AND c683287b / 80000000 AND c683287b / 00000000 => 00000000 3f800000 7f800000 ff800000
+#3: xvdivsp c683287b / 00000000 AND c683287b / 7f800000 AND c683287b / 7fffffff AND c683287b / 7fc00000 => ff800000 80000000 7fffffff 7fc00000
+#4: xvdivsp 80000000 / ff800000 AND 80000000 / c683287b AND 80000000 / 80000000 AND 80000000 / 00000000 => 00000000 00000000 7fc00000 7fc00000
+#5: xvdivsp 80000000 / 00000000 AND 80000000 / 7f800000 AND 80000000 / 7fffffff AND 80000000 / 7fc00000 => 7fc00000 80000000 7fffffff 7fc00000
+#6: xvdivsp 00000000 / ff800000 AND 00000000 / c683287b AND 00000000 / 80000000 AND 00000000 / 00000000 => 80000000 80000000 7fc00000 7fc00000
+#7: xvdivsp 00000000 / 00000000 AND 00000000 / 7f800000 AND 00000000 / 7fffffff AND 00000000 / 7fc00000 => 7fc00000 00000000 7fffffff 7fc00000
+#8: xvdivsp 00000000 / ff800000 AND 00000000 / c683287b AND 00000000 / 80000000 AND 00000000 / 00000000 => 80000000 80000000 7fc00000 7fc00000
+#9: xvdivsp 00000000 / 42780000 AND 00000000 / 7f800000 AND 00000000 / 7fffffff AND 00000000 / 7fc00000 => 00000000 00000000 7fffffff 7fc00000
+#10: xvdivsp 7f800000 / ff800000 AND 7f800000 / c683287b AND 7f800000 / 80000000 AND 7f800000 / 00000000 => 7fc00000 ff800000 ff800000 7f800000
+#11: xvdivsp 7f800000 / 00000000 AND 7f800000 / 7f800000 AND 7f800000 / 7fffffff AND 7f800000 / 7fc00000 => 7f800000 7fc00000 7fffffff 7fc00000
+#12: xvdivsp ffffffff / ff800000 AND ffffffff / c683287b AND ffc00000 / 80000000 AND ffc00000 / 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvdivsp ffffffff / 00000000 AND ffffffff / 7f800000 AND ffffffff / 7fffffff AND ffffffff / 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvdivsp ffc00000 / ff800000 AND ffc00000 / c683287b AND ffc00000 / 80000000 AND 49192c2d / 49c1288d => ffc00000 ffc00000 ffc00000 3ecb015a
+#15: xvdivsp 49192c2d / 49c1288d AND 7fffffff / 7fc00000 AND 7fc00000 / 7fc00000 AND 7fc00000 / ffc00000 => 3ecb015a 7fffffff 7fc00000 7fc00000
+
+
+#0: xvmuldp fff0000000000000 * fff0000000000000 AND fff0000000000000 * c0d0650f5a07b353 => 7ff0000000000000 7ff0000000000000
+#1: xvmuldp 41232585a9900000 * 41382511a2000000 AND fff0000000000000 * 0000000000000000 => 426ce4a45d2a0a7e 7ff8000000000000
+#2: xvmuldp fff0000000000000 * 0123214569900000 AND fff0000000000000 * 7ff0000000000000 => fff0000000000000 fff0000000000000
+#3: xvmuldp fff0000000000000 * 7ff7ffffffffffff AND fff0000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvmuldp c0d0650f5a07b353 * fff0000000000000 AND c0d0650f5a07b353 * c0d0650f5a07b353 => 7ff0000000000000 41b0cc9d05eec2a7
+#5: xvmuldp c0d0650f5a07b353 * 8000000000000000 AND c0d0650f5a07b353 * 0000000000000000 => 0000000000000000 8000000000000000
+#6: xvmuldp c0d0650f5a07b353 * 0123214569900000 AND c0d0650f5a07b353 * 7ff0000000000000 => 82039a19ca8fcb5f fff0000000000000
+#7: xvmuldp c0d0650f5a07b353 * 7ff7ffffffffffff AND c0d0650f5a07b353 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvmuldp 8000000000000000 * fff0000000000000 AND 8000000000000000 * c0d0650f5a07b353 => 7ff8000000000000 0000000000000000
+#9: xvmuldp 8000000000000000 * 8000000000000000 AND 8000000000000000 * 0000000000000000 => 0000000000000000 8000000000000000
+#10: xvmuldp 8000000000000000 * 0123214569900000 AND 8000000000000000 * 7ff0000000000000 => 8000000000000000 7ff8000000000000
+#11: xvmuldp 8000000000000000 * 7ff7ffffffffffff AND 8000000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvmuldp 0000000000000000 * fff0000000000000 AND 0000000000000000 * c0d0650f5a07b353 => 7ff8000000000000 8000000000000000
+#13: xvmuldp 0000000000000000 * 8000000000000000 AND 0000000000000000 * 0000000000000000 => 8000000000000000 0000000000000000
+#14: xvmuldp 0000000000000000 * 0123214569900000 AND 0000000000000000 * 7ff0000000000000 => 0000000000000000 7ff8000000000000
+#15: xvmuldp 0000000000000000 * 7ff7ffffffffffff AND 0000000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvmuldp 0123214569900000 * fff0000000000000 AND 0123214569900000 * c0d0650f5a07b353 => fff0000000000000 82039a19ca8fcb5f
+#17: xvmuldp 0123214569900000 * 8000000000000000 AND 0123214569900000 * 0000000000000000 => 8000000000000000 0000000000000000
+#18: xvmuldp 0123214569900000 * 404f000000000000 AND 0123214569900000 * 7ff0000000000000 => 0182883b3e438000 7ff0000000000000
+#19: xvmuldp 0123214569900000 * 7ff7ffffffffffff AND 0123214569900000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvmuldp 7ff0000000000000 * fff0000000000000 AND 7ff0000000000000 * c0d0650f5a07b353 => fff0000000000000 fff0000000000000
+#21: xvmuldp 7ff0000000000000 * 8000000000000000 AND 7ff0000000000000 * 0000000000000000 => 7ff8000000000000 7ff8000000000000
+#22: xvmuldp 7ff0000000000000 * 0123214569900000 AND 7ff0000000000000 * 7ff0000000000000 => 7ff0000000000000 7ff0000000000000
+#23: xvmuldp 7ff0000000000000 * 7ff7ffffffffffff AND 7ff0000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvmuldp fff7ffffffffffff * fff0000000000000 AND fff7ffffffffffff * c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvmuldp fff8000000000000 * 8000000000000000 AND fff8000000000000 * 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvmuldp fff7ffffffffffff * 0123214569900000 AND fff7ffffffffffff * 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvmuldp fff7ffffffffffff * 7ff7ffffffffffff AND fff7ffffffffffff * 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvmuldp fff8000000000000 * fff0000000000000 AND fff8000000000000 * c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvmuldp fff8000000000000 * 8000000000000000 AND 41232585a9900000 * 41382511a2000000 => fff8000000000000 426ce4a45d2a0a7e
+#30: xvmuldp 41232585a9900000 * 41382511a2000000 AND 7ff7ffffffffffff * 7ff8000000000000 => 426ce4a45d2a0a7e 7fffffffffffffff
+#31: xvmuldp 7ff8000000000000 * 7ff8000000000000 AND 7ff8000000000000 * fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvmulsp ff800000 * ff800000 AND ff800000 * c683287b AND 49192c2d * 49c1288d AND ff800000 * 00000000 => 7f800000 7f800000 53672522 7fc00000
+#1: xvmulsp ff800000 * 00000000 AND ff800000 * 7f800000 AND ff800000 * 7fffffff AND ff800000 * 7fc00000 => 7fc00000 ff800000 7fffffff 7fc00000
+#2: xvmulsp c683287b * ff800000 AND c683287b * c683287b AND c683287b * 80000000 AND c683287b * 00000000 => 7f800000 4d8664e9 00000000 80000000
+#3: xvmulsp c683287b * 00000000 AND c683287b * 7f800000 AND c683287b * 7fffffff AND c683287b * 7fc00000 => 80000000 ff800000 7fffffff 7fc00000
+#4: xvmulsp 80000000 * ff800000 AND 80000000 * c683287b AND 80000000 * 80000000 AND 80000000 * 00000000 => 7fc00000 00000000 00000000 80000000
+#5: xvmulsp 80000000 * 00000000 AND 80000000 * 7f800000 AND 80000000 * 7fffffff AND 80000000 * 7fc00000 => 80000000 7fc00000 7fffffff 7fc00000
+#6: xvmulsp 00000000 * ff800000 AND 00000000 * c683287b AND 00000000 * 80000000 AND 00000000 * 00000000 => 7fc00000 80000000 80000000 00000000
+#7: xvmulsp 00000000 * 00000000 AND 00000000 * 7f800000 AND 00000000 * 7fffffff AND 00000000 * 7fc00000 => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmulsp 00000000 * ff800000 AND 00000000 * c683287b AND 00000000 * 80000000 AND 00000000 * 00000000 => 7fc00000 80000000 80000000 00000000
+#9: xvmulsp 00000000 * 42780000 AND 00000000 * 7f800000 AND 00000000 * 7fffffff AND 00000000 * 7fc00000 => 00000000 7fc00000 7fffffff 7fc00000
+#10: xvmulsp 7f800000 * ff800000 AND 7f800000 * c683287b AND 7f800000 * 80000000 AND 7f800000 * 00000000 => ff800000 ff800000 7fc00000 7fc00000
+#11: xvmulsp 7f800000 * 00000000 AND 7f800000 * 7f800000 AND 7f800000 * 7fffffff AND 7f800000 * 7fc00000 => 7fc00000 7f800000 7fffffff 7fc00000
+#12: xvmulsp ffffffff * ff800000 AND ffffffff * c683287b AND ffc00000 * 80000000 AND ffc00000 * 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmulsp ffffffff * 00000000 AND ffffffff * 7f800000 AND ffffffff * 7fffffff AND ffffffff * 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvmulsp ffc00000 * ff800000 AND ffc00000 * c683287b AND ffc00000 * 80000000 AND 49192c2d * 49c1288d => ffc00000 ffc00000 ffc00000 53672522
+#15: xvmulsp 49192c2d * 49c1288d AND 7fffffff * 7fc00000 AND 7fc00000 * 7fc00000 AND 7fc00000 * ffc00000 => 53672522 7fffffff 7fc00000 7fc00000
+
+
+#0: xvsubdp fff0000000000000 - fff0000000000000 AND fff0000000000000 - c0d0650f5a07b353 => 7ff8000000000000 fff0000000000000
+#1: xvsubdp 41232585a9900000 - 41382511a2000000 AND fff0000000000000 - 0000000000000000 => c12d249d9a700000 fff0000000000000
+#2: xvsubdp fff0000000000000 - 0123214569900000 AND fff0000000000000 - 7ff0000000000000 => fff0000000000000 fff0000000000000
+#3: xvsubdp fff0000000000000 - 7ff7ffffffffffff AND fff0000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvsubdp c0d0650f5a07b353 - fff0000000000000 AND c0d0650f5a07b353 - c0d0650f5a07b353 => 7ff0000000000000 0000000000000000
+#5: xvsubdp c0d0650f5a07b353 - 8000000000000000 AND c0d0650f5a07b353 - 0000000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#6: xvsubdp c0d0650f5a07b353 - 0123214569900000 AND c0d0650f5a07b353 - 7ff0000000000000 => c0d0650f5a07b353 fff0000000000000
+#7: xvsubdp c0d0650f5a07b353 - 7ff7ffffffffffff AND c0d0650f5a07b353 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvsubdp 8000000000000000 - fff0000000000000 AND 8000000000000000 - c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#9: xvsubdp 8000000000000000 - 8000000000000000 AND 8000000000000000 - 0000000000000000 => 0000000000000000 8000000000000000
+#10: xvsubdp 8000000000000000 - 0123214569900000 AND 8000000000000000 - 7ff0000000000000 => 8123214569900000 fff0000000000000
+#11: xvsubdp 8000000000000000 - 7ff7ffffffffffff AND 8000000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvsubdp 0000000000000000 - fff0000000000000 AND 0000000000000000 - c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#13: xvsubdp 0000000000000000 - 8000000000000000 AND 0000000000000000 - 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvsubdp 0000000000000000 - 0123214569900000 AND 0000000000000000 - 7ff0000000000000 => 8123214569900000 fff0000000000000
+#15: xvsubdp 0000000000000000 - 7ff7ffffffffffff AND 0000000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvsubdp 0123214569900000 - fff0000000000000 AND 0123214569900000 - c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#17: xvsubdp 0123214569900000 - 8000000000000000 AND 0123214569900000 - 0000000000000000 => 0123214569900000 0123214569900000
+#18: xvsubdp 0123214569900000 - 404f000000000000 AND 0123214569900000 - 7ff0000000000000 => c04f000000000000 fff0000000000000
+#19: xvsubdp 0123214569900000 - 7ff7ffffffffffff AND 0123214569900000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvsubdp 7ff0000000000000 - fff0000000000000 AND 7ff0000000000000 - c0d0650f5a07b353 => 7ff0000000000000 7ff0000000000000
+#21: xvsubdp 7ff0000000000000 - 8000000000000000 AND 7ff0000000000000 - 0000000000000000 => 7ff0000000000000 7ff0000000000000
+#22: xvsubdp 7ff0000000000000 - 0123214569900000 AND 7ff0000000000000 - 7ff0000000000000 => 7ff0000000000000 7ff8000000000000
+#23: xvsubdp 7ff0000000000000 - 7ff7ffffffffffff AND 7ff0000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvsubdp fff7ffffffffffff - fff0000000000000 AND fff7ffffffffffff - c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvsubdp fff8000000000000 - 8000000000000000 AND fff8000000000000 - 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvsubdp fff7ffffffffffff - 0123214569900000 AND fff7ffffffffffff - 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvsubdp fff7ffffffffffff - 7ff7ffffffffffff AND fff7ffffffffffff - 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvsubdp fff8000000000000 - fff0000000000000 AND fff8000000000000 - c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvsubdp fff8000000000000 - 8000000000000000 AND 41232585a9900000 - 41382511a2000000 => fff8000000000000 c12d249d9a700000
+#30: xvsubdp 41232585a9900000 - 41382511a2000000 AND 7ff7ffffffffffff - 7ff8000000000000 => c12d249d9a700000 7fffffffffffffff
+#31: xvsubdp 7ff8000000000000 - 7ff8000000000000 AND 7ff8000000000000 - fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvsubsp ff800000 - ff800000 AND ff800000 - c683287b AND 49192c2d - 49c1288d AND ff800000 - 00000000 => 7fc00000 ff800000 c96924ed ff800000
+#1: xvsubsp ff800000 - 00000000 AND ff800000 - 7f800000 AND ff800000 - 7fffffff AND ff800000 - 7fc00000 => ff800000 ff800000 7fffffff 7fc00000
+#2: xvsubsp c683287b - ff800000 AND c683287b - c683287b AND c683287b - 80000000 AND c683287b - 00000000 => 7f800000 00000000 c683287b c683287b
+#3: xvsubsp c683287b - 00000000 AND c683287b - 7f800000 AND c683287b - 7fffffff AND c683287b - 7fc00000 => c683287b ff800000 7fffffff 7fc00000
+#4: xvsubsp 80000000 - ff800000 AND 80000000 - c683287b AND 80000000 - 80000000 AND 80000000 - 00000000 => 7f800000 4683287b 00000000 80000000
+#5: xvsubsp 80000000 - 00000000 AND 80000000 - 7f800000 AND 80000000 - 7fffffff AND 80000000 - 7fc00000 => 80000000 ff800000 7fffffff 7fc00000
+#6: xvsubsp 00000000 - ff800000 AND 00000000 - c683287b AND 00000000 - 80000000 AND 00000000 - 00000000 => 7f800000 4683287b 00000000 00000000
+#7: xvsubsp 00000000 - 00000000 AND 00000000 - 7f800000 AND 00000000 - 7fffffff AND 00000000 - 7fc00000 => 00000000 ff800000 7fffffff 7fc00000
+#8: xvsubsp 00000000 - ff800000 AND 00000000 - c683287b AND 00000000 - 80000000 AND 00000000 - 00000000 => 7f800000 4683287b 00000000 00000000
+#9: xvsubsp 00000000 - 42780000 AND 00000000 - 7f800000 AND 00000000 - 7fffffff AND 00000000 - 7fc00000 => c2780000 ff800000 7fffffff 7fc00000
+#10: xvsubsp 7f800000 - ff800000 AND 7f800000 - c683287b AND 7f800000 - 80000000 AND 7f800000 - 00000000 => 7f800000 7f800000 7f800000 7f800000
+#11: xvsubsp 7f800000 - 00000000 AND 7f800000 - 7f800000 AND 7f800000 - 7fffffff AND 7f800000 - 7fc00000 => 7f800000 7fc00000 7fffffff 7fc00000
+#12: xvsubsp ffffffff - ff800000 AND ffffffff - c683287b AND ffc00000 - 80000000 AND ffc00000 - 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvsubsp ffffffff - 00000000 AND ffffffff - 7f800000 AND ffffffff - 7fffffff AND ffffffff - 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvsubsp ffc00000 - ff800000 AND ffc00000 - c683287b AND ffc00000 - 80000000 AND 49192c2d - 49c1288d => ffc00000 ffc00000 ffc00000 c96924ed
+#15: xvsubsp 49192c2d - 49c1288d AND 7fffffff - 7fc00000 AND 7fc00000 - 7fc00000 AND 7fc00000 - ffc00000 => c96924ed 7fffffff 7fc00000 7fc00000
+
+
+#0: xvmaxdp fff0000000000000 @max@ fff0000000000000 AND fff0000000000000 @max@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#1: xvmaxdp 41232585a9900000 @max@ 41382511a2000000 AND fff0000000000000 @max@ 0000000000000000 => 41382511a2000000 0000000000000000
+#2: xvmaxdp fff0000000000000 @max@ 0123214569900000 AND fff0000000000000 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#3: xvmaxdp fff0000000000000 @max@ 7ff7ffffffffffff AND fff0000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff fff0000000000000
+#4: xvmaxdp c0d0650f5a07b353 @max@ fff0000000000000 AND c0d0650f5a07b353 @max@ c0d0650f5a07b353 => c0d0650f5a07b353 c0d0650f5a07b353
+#5: xvmaxdp c0d0650f5a07b353 @max@ 8000000000000000 AND c0d0650f5a07b353 @max@ 0000000000000000 => 8000000000000000 0000000000000000
+#6: xvmaxdp c0d0650f5a07b353 @max@ 0123214569900000 AND c0d0650f5a07b353 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#7: xvmaxdp c0d0650f5a07b353 @max@ 7ff7ffffffffffff AND c0d0650f5a07b353 @max@ 7ff8000000000000 => 7fffffffffffffff c0d0650f5a07b353
+#8: xvmaxdp 8000000000000000 @max@ fff0000000000000 AND 8000000000000000 @max@ c0d0650f5a07b353 => 8000000000000000 8000000000000000
+#9: xvmaxdp 8000000000000000 @max@ 8000000000000000 AND 8000000000000000 @max@ 0000000000000000 => 8000000000000000 0000000000000000
+#10: xvmaxdp 8000000000000000 @max@ 0123214569900000 AND 8000000000000000 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#11: xvmaxdp 8000000000000000 @max@ 7ff7ffffffffffff AND 8000000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff 8000000000000000
+#12: xvmaxdp 0000000000000000 @max@ fff0000000000000 AND 0000000000000000 @max@ c0d0650f5a07b353 => 0000000000000000 0000000000000000
+#13: xvmaxdp 0000000000000000 @max@ 8000000000000000 AND 0000000000000000 @max@ 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvmaxdp 0000000000000000 @max@ 0123214569900000 AND 0000000000000000 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#15: xvmaxdp 0000000000000000 @max@ 7ff7ffffffffffff AND 0000000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff 0000000000000000
+#16: xvmaxdp 0123214569900000 @max@ fff0000000000000 AND 0123214569900000 @max@ c0d0650f5a07b353 => 0123214569900000 0123214569900000
+#17: xvmaxdp 0123214569900000 @max@ 8000000000000000 AND 0123214569900000 @max@ 0000000000000000 => 0123214569900000 0123214569900000
+#18: xvmaxdp 0123214569900000 @max@ 404f000000000000 AND 0123214569900000 @max@ 7ff0000000000000 => 404f000000000000 7ff0000000000000
+#19: xvmaxdp 0123214569900000 @max@ 7ff7ffffffffffff AND 0123214569900000 @max@ 7ff8000000000000 => 7fffffffffffffff 0123214569900000
+#20: xvmaxdp 7ff0000000000000 @max@ fff0000000000000 AND 7ff0000000000000 @max@ c0d0650f5a07b353 => 7ff0000000000000 7ff0000000000000
+#21: xvmaxdp 7ff0000000000000 @max@ 8000000000000000 AND 7ff0000000000000 @max@ 0000000000000000 => 7ff0000000000000 7ff0000000000000
+#22: xvmaxdp 7ff0000000000000 @max@ 0123214569900000 AND 7ff0000000000000 @max@ 7ff0000000000000 => 7ff0000000000000 7ff0000000000000
+#23: xvmaxdp 7ff0000000000000 @max@ 7ff7ffffffffffff AND 7ff0000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff 7ff0000000000000
+#24: xvmaxdp fff7ffffffffffff @max@ fff0000000000000 AND fff7ffffffffffff @max@ c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvmaxdp fff8000000000000 @max@ 8000000000000000 AND fff8000000000000 @max@ 0000000000000000 => 8000000000000000 0000000000000000
+#26: xvmaxdp fff7ffffffffffff @max@ 0123214569900000 AND fff7ffffffffffff @max@ 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvmaxdp fff7ffffffffffff @max@ 7ff7ffffffffffff AND fff7ffffffffffff @max@ 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvmaxdp fff8000000000000 @max@ fff0000000000000 AND fff8000000000000 @max@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#29: xvmaxdp fff8000000000000 @max@ 8000000000000000 AND 41232585a9900000 @max@ 41382511a2000000 => 8000000000000000 41382511a2000000
+#30: xvmaxdp 41232585a9900000 @max@ 41382511a2000000 AND 7ff7ffffffffffff @max@ 7ff8000000000000 => 41382511a2000000 7fffffffffffffff
+#31: xvmaxdp 7ff8000000000000 @max@ 7ff8000000000000 AND 7ff8000000000000 @max@ fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvmindp fff0000000000000 @min@ fff0000000000000 AND fff0000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 fff0000000000000
+#1: xvmindp 41232585a9900000 @min@ 41382511a2000000 AND fff0000000000000 @min@ 0000000000000000 => 41232585a9900000 fff0000000000000
+#2: xvmindp fff0000000000000 @min@ 0123214569900000 AND fff0000000000000 @min@ 7ff0000000000000 => fff0000000000000 fff0000000000000
+#3: xvmindp fff0000000000000 @min@ 7ff7ffffffffffff AND fff0000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff fff0000000000000
+#4: xvmindp c0d0650f5a07b353 @min@ fff0000000000000 AND c0d0650f5a07b353 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#5: xvmindp c0d0650f5a07b353 @min@ 8000000000000000 AND c0d0650f5a07b353 @min@ 0000000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#6: xvmindp c0d0650f5a07b353 @min@ 0123214569900000 AND c0d0650f5a07b353 @min@ 7ff0000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#7: xvmindp c0d0650f5a07b353 @min@ 7ff7ffffffffffff AND c0d0650f5a07b353 @min@ 7ff8000000000000 => 7fffffffffffffff c0d0650f5a07b353
+#8: xvmindp 8000000000000000 @min@ fff0000000000000 AND 8000000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#9: xvmindp 8000000000000000 @min@ 8000000000000000 AND 8000000000000000 @min@ 0000000000000000 => 8000000000000000 8000000000000000
+#10: xvmindp 8000000000000000 @min@ 0123214569900000 AND 8000000000000000 @min@ 7ff0000000000000 => 8000000000000000 8000000000000000
+#11: xvmindp 8000000000000000 @min@ 7ff7ffffffffffff AND 8000000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff 8000000000000000
+#12: xvmindp 0000000000000000 @min@ fff0000000000000 AND 0000000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#13: xvmindp 0000000000000000 @min@ 8000000000000000 AND 0000000000000000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#14: xvmindp 0000000000000000 @min@ 0123214569900000 AND 0000000000000000 @min@ 7ff0000000000000 => 0000000000000000 0000000000000000
+#15: xvmindp 0000000000000000 @min@ 7ff7ffffffffffff AND 0000000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff 0000000000000000
+#16: xvmindp 0123214569900000 @min@ fff0000000000000 AND 0123214569900000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#17: xvmindp 0123214569900000 @min@ 8000000000000000 AND 0123214569900000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#18: xvmindp 0123214569900000 @min@ 404f000000000000 AND 0123214569900000 @min@ 7ff0000000000000 => 0123214569900000 0123214569900000
+#19: xvmindp 0123214569900000 @min@ 7ff7ffffffffffff AND 0123214569900000 @min@ 7ff8000000000000 => 7fffffffffffffff 0123214569900000
+#20: xvmindp 7ff0000000000000 @min@ fff0000000000000 AND 7ff0000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#21: xvmindp 7ff0000000000000 @min@ 8000000000000000 AND 7ff0000000000000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#22: xvmindp 7ff0000000000000 @min@ 0123214569900000 AND 7ff0000000000000 @min@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#23: xvmindp 7ff0000000000000 @min@ 7ff7ffffffffffff AND 7ff0000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff 7ff0000000000000
+#24: xvmindp fff7ffffffffffff @min@ fff0000000000000 AND fff7ffffffffffff @min@ c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvmindp fff8000000000000 @min@ 8000000000000000 AND fff8000000000000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#26: xvmindp fff7ffffffffffff @min@ 0123214569900000 AND fff7ffffffffffff @min@ 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvmindp fff7ffffffffffff @min@ 7ff7ffffffffffff AND fff7ffffffffffff @min@ 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvmindp fff8000000000000 @min@ fff0000000000000 AND fff8000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#29: xvmindp fff8000000000000 @min@ 8000000000000000 AND 41232585a9900000 @min@ 41382511a2000000 => 8000000000000000 41232585a9900000
+#30: xvmindp 41232585a9900000 @min@ 41382511a2000000 AND 7ff7ffffffffffff @min@ 7ff8000000000000 => 41232585a9900000 7fffffffffffffff
+#31: xvmindp 7ff8000000000000 @min@ 7ff8000000000000 AND 7ff8000000000000 @min@ fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvmaxsp ff800000 @max@ ff800000 AND ff800000 @max@ c683287b AND 49192c2d @max@ 49c1288d AND ff800000 @max@ 00000000 => ff800000 c683287b 49c1288d 00000000
+#1: xvmaxsp ff800000 @max@ 00000000 AND ff800000 @max@ 7f800000 AND ff800000 @max@ 7fffffff AND ff800000 @max@ 7fc00000 => 00000000 7f800000 ff800000 ff800000
+#2: xvmaxsp c683287b @max@ ff800000 AND c683287b @max@ c683287b AND c683287b @max@ 80000000 AND c683287b @max@ 00000000 => c683287b c683287b 80000000 00000000
+#3: xvmaxsp c683287b @max@ 00000000 AND c683287b @max@ 7f800000 AND c683287b @max@ 7fffffff AND c683287b @max@ 7fc00000 => 00000000 7f800000 c683287b c683287b
+#4: xvmaxsp 80000000 @max@ ff800000 AND 80000000 @max@ c683287b AND 80000000 @max@ 80000000 AND 80000000 @max@ 00000000 => 80000000 80000000 80000000 00000000
+#5: xvmaxsp 80000000 @max@ 00000000 AND 80000000 @max@ 7f800000 AND 80000000 @max@ 7fffffff AND 80000000 @max@ 7fc00000 => 00000000 7f800000 80000000 80000000
+#6: xvmaxsp 00000000 @max@ ff800000 AND 00000000 @max@ c683287b AND 00000000 @max@ 80000000 AND 00000000 @max@ 00000000 => 00000000 00000000 00000000 00000000
+#7: xvmaxsp 00000000 @max@ 00000000 AND 00000000 @max@ 7f800000 AND 00000000 @max@ 7fffffff AND 00000000 @max@ 7fc00000 => 00000000 7f800000 00000000 00000000
+#8: xvmaxsp 00000000 @max@ ff800000 AND 00000000 @max@ c683287b AND 00000000 @max@ 80000000 AND 00000000 @max@ 00000000 => 00000000 00000000 00000000 00000000
+#9: xvmaxsp 00000000 @max@ 42780000 AND 00000000 @max@ 7f800000 AND 00000000 @max@ 7fffffff AND 00000000 @max@ 7fc00000 => 42780000 7f800000 00000000 00000000
+#10: xvmaxsp 7f800000 @max@ ff800000 AND 7f800000 @max@ c683287b AND 7f800000 @max@ 80000000 AND 7f800000 @max@ 00000000 => 7f800000 7f800000 7f800000 7f800000
+#11: xvmaxsp 7f800000 @max@ 00000000 AND 7f800000 @max@ 7f800000 AND 7f800000 @max@ 7fffffff AND 7f800000 @max@ 7fc00000 => 7f800000 7f800000 7f800000 7f800000
+#12: xvmaxsp ffffffff @max@ ff800000 AND ffffffff @max@ c683287b AND ffc00000 @max@ 80000000 AND ffc00000 @max@ 00000000 => ff800000 c683287b 80000000 00000000
+#13: xvmaxsp ffffffff @max@ 00000000 AND ffffffff @max@ 7f800000 AND ffffffff @max@ 7fffffff AND ffffffff @max@ 7fc00000 => 00000000 7f800000 ffffffff ffffffff
+#14: xvmaxsp ffc00000 @max@ ff800000 AND ffc00000 @max@ c683287b AND ffc00000 @max@ 80000000 AND 49192c2d @max@ 49c1288d => ff800000 c683287b 80000000 49c1288d
+#15: xvmaxsp 49192c2d @max@ 49c1288d AND 7fffffff @max@ 7fc00000 AND 7fc00000 @max@ 7fc00000 AND 7fc00000 @max@ ffc00000 => 49c1288d 7fffffff 7fc00000 7fc00000
+
+
+#0: xvminsp ff800000 @min@ ff800000 AND ff800000 @min@ c683287b AND 49192c2d @min@ 49c1288d AND ff800000 @min@ 00000000 => ff800000 ff800000 49192c2d ff800000
+#1: xvminsp ff800000 @min@ 00000000 AND ff800000 @min@ 7f800000 AND ff800000 @min@ 7fffffff AND ff800000 @min@ 7fc00000 => ff800000 ff800000 ff800000 ff800000
+#2: xvminsp c683287b @min@ ff800000 AND c683287b @min@ c683287b AND c683287b @min@ 80000000 AND c683287b @min@ 00000000 => ff800000 c683287b c683287b c683287b
+#3: xvminsp c683287b @min@ 00000000 AND c683287b @min@ 7f800000 AND c683287b @min@ 7fffffff AND c683287b @min@ 7fc00000 => c683287b c683287b c683287b c683287b
+#4: xvminsp 80000000 @min@ ff800000 AND 80000000 @min@ c683287b AND 80000000 @min@ 80000000 AND 80000000 @min@ 00000000 => ff800000 c683287b 80000000 80000000
+#5: xvminsp 80000000 @min@ 00000000 AND 80000000 @min@ 7f800000 AND 80000000 @min@ 7fffffff AND 80000000 @min@ 7fc00000 => 80000000 80000000 80000000 80000000
+#6: xvminsp 00000000 @min@ ff800000 AND 00000000 @min@ c683287b AND 00000000 @min@ 80000000 AND 00000000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#7: xvminsp 00000000 @min@ 00000000 AND 00000000 @min@ 7f800000 AND 00000000 @min@ 7fffffff AND 00000000 @min@ 7fc00000 => 00000000 00000000 00000000 00000000
+#8: xvminsp 00000000 @min@ ff800000 AND 00000000 @min@ c683287b AND 00000000 @min@ 80000000 AND 00000000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#9: xvminsp 00000000 @min@ 42780000 AND 00000000 @min@ 7f800000 AND 00000000 @min@ 7fffffff AND 00000000 @min@ 7fc00000 => 00000000 00000000 00000000 00000000
+#10: xvminsp 7f800000 @min@ ff800000 AND 7f800000 @min@ c683287b AND 7f800000 @min@ 80000000 AND 7f800000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#11: xvminsp 7f800000 @min@ 00000000 AND 7f800000 @min@ 7f800000 AND 7f800000 @min@ 7fffffff AND 7f800000 @min@ 7fc00000 => 00000000 7f800000 7f800000 7f800000
+#12: xvminsp ffffffff @min@ ff800000 AND ffffffff @min@ c683287b AND ffc00000 @min@ 80000000 AND ffc00000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#13: xvminsp ffffffff @min@ 00000000 AND ffffffff @min@ 7f800000 AND ffffffff @min@ 7fffffff AND ffffffff @min@ 7fc00000 => 00000000 7f800000 ffffffff ffffffff
+#14: xvminsp ffc00000 @min@ ff800000 AND ffc00000 @min@ c683287b AND ffc00000 @min@ 80000000 AND 49192c2d @min@ 49c1288d => ff800000 c683287b 80000000 49192c2d
+#15: xvminsp 49192c2d @min@ 49c1288d AND 7fffffff @min@ 7fc00000 AND 7fc00000 @min@ 7fc00000 AND 7fc00000 @min@ ffc00000 => 49192c2d 7fffffff 7fc00000 7fc00000
+
+
+#0: xvcpsgndp fff0000000000000 +-cp fff0000000000000 AND fff0000000000000 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#1: xvcpsgndp 41232585a9900000 +-cp 41382511a2000000 AND fff0000000000000 +-cp 0000000000000000 => 41382511a2000000 8000000000000000
+#2: xvcpsgndp fff0000000000000 +-cp 0123214569900000 AND fff0000000000000 +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#3: xvcpsgndp fff0000000000000 +-cp 7ff7ffffffffffff AND fff0000000000000 +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#4: xvcpsgndp c0d0650f5a07b353 +-cp fff0000000000000 AND c0d0650f5a07b353 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#5: xvcpsgndp c0d0650f5a07b353 +-cp 8000000000000000 AND c0d0650f5a07b353 +-cp 0000000000000000 => 8000000000000000 8000000000000000
+#6: xvcpsgndp c0d0650f5a07b353 +-cp 0123214569900000 AND c0d0650f5a07b353 +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#7: xvcpsgndp c0d0650f5a07b353 +-cp 7ff7ffffffffffff AND c0d0650f5a07b353 +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#8: xvcpsgndp 8000000000000000 +-cp fff0000000000000 AND 8000000000000000 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#9: xvcpsgndp 8000000000000000 +-cp 8000000000000000 AND 8000000000000000 +-cp 0000000000000000 => 8000000000000000 8000000000000000
+#10: xvcpsgndp 8000000000000000 +-cp 0123214569900000 AND 8000000000000000 +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#11: xvcpsgndp 8000000000000000 +-cp 7ff7ffffffffffff AND 8000000000000000 +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#12: xvcpsgndp 0000000000000000 +-cp fff0000000000000 AND 0000000000000000 +-cp c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#13: xvcpsgndp 0000000000000000 +-cp 8000000000000000 AND 0000000000000000 +-cp 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvcpsgndp 0000000000000000 +-cp 0123214569900000 AND 0000000000000000 +-cp 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#15: xvcpsgndp 0000000000000000 +-cp 7ff7ffffffffffff AND 0000000000000000 +-cp 7ff8000000000000 => 7ff7ffffffffffff 7ff8000000000000
+#16: xvcpsgndp 0123214569900000 +-cp fff0000000000000 AND 0123214569900000 +-cp c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#17: xvcpsgndp 0123214569900000 +-cp 8000000000000000 AND 0123214569900000 +-cp 0000000000000000 => 0000000000000000 0000000000000000
+#18: xvcpsgndp 0123214569900000 +-cp 404f000000000000 AND 0123214569900000 +-cp 7ff0000000000000 => 404f000000000000 7ff0000000000000
+#19: xvcpsgndp 0123214569900000 +-cp 7ff7ffffffffffff AND 0123214569900000 +-cp 7ff8000000000000 => 7ff7ffffffffffff 7ff8000000000000
+#20: xvcpsgndp 7ff0000000000000 +-cp fff0000000000000 AND 7ff0000000000000 +-cp c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#21: xvcpsgndp 7ff0000000000000 +-cp 8000000000000000 AND 7ff0000000000000 +-cp 0000000000000000 => 0000000000000000 0000000000000000
+#22: xvcpsgndp 7ff0000000000000 +-cp 0123214569900000 AND 7ff0000000000000 +-cp 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#23: xvcpsgndp 7ff0000000000000 +-cp 7ff7ffffffffffff AND 7ff0000000000000 +-cp 7ff8000000000000 => 7ff7ffffffffffff 7ff8000000000000
+#24: xvcpsgndp fff7ffffffffffff +-cp fff0000000000000 AND fff7ffffffffffff +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#25: xvcpsgndp fff8000000000000 +-cp 8000000000000000 AND fff8000000000000 +-cp 0000000000000000 => 8000000000000000 8000000000000000
+#26: xvcpsgndp fff7ffffffffffff +-cp 0123214569900000 AND fff7ffffffffffff +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#27: xvcpsgndp fff7ffffffffffff +-cp 7ff7ffffffffffff AND fff7ffffffffffff +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#28: xvcpsgndp fff8000000000000 +-cp fff0000000000000 AND fff8000000000000 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#29: xvcpsgndp fff8000000000000 +-cp 8000000000000000 AND 41232585a9900000 +-cp 41382511a2000000 => 8000000000000000 41382511a2000000
+#30: xvcpsgndp 41232585a9900000 +-cp 41382511a2000000 AND 7ff7ffffffffffff +-cp 7ff8000000000000 => 41382511a2000000 7ff8000000000000
+#31: xvcpsgndp 7ff8000000000000 +-cp 7ff8000000000000 AND 7ff8000000000000 +-cp fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvcpsgnsp ff800000 +-cp ff800000 AND ff800000 +-cp c683287b AND 49192c2d +-cp 49c1288d AND ff800000 +-cp 00000000 => ff800000 c683287b 49c1288d 80000000
+#1: xvcpsgnsp ff800000 +-cp 00000000 AND ff800000 +-cp 7f800000 AND ff800000 +-cp 7fffffff AND ff800000 +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#2: xvcpsgnsp c683287b +-cp ff800000 AND c683287b +-cp c683287b AND c683287b +-cp 80000000 AND c683287b +-cp 00000000 => ff800000 c683287b 80000000 80000000
+#3: xvcpsgnsp c683287b +-cp 00000000 AND c683287b +-cp 7f800000 AND c683287b +-cp 7fffffff AND c683287b +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#4: xvcpsgnsp 80000000 +-cp ff800000 AND 80000000 +-cp c683287b AND 80000000 +-cp 80000000 AND 80000000 +-cp 00000000 => ff800000 c683287b 80000000 80000000
+#5: xvcpsgnsp 80000000 +-cp 00000000 AND 80000000 +-cp 7f800000 AND 80000000 +-cp 7fffffff AND 80000000 +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#6: xvcpsgnsp 00000000 +-cp ff800000 AND 00000000 +-cp c683287b AND 00000000 +-cp 80000000 AND 00000000 +-cp 00000000 => 7f800000 4683287b 00000000 00000000
+#7: xvcpsgnsp 00000000 +-cp 00000000 AND 00000000 +-cp 7f800000 AND 00000000 +-cp 7fffffff AND 00000000 +-cp 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#8: xvcpsgnsp 00000000 +-cp ff800000 AND 00000000 +-cp c683287b AND 00000000 +-cp 80000000 AND 00000000 +-cp 00000000 => 7f800000 4683287b 00000000 00000000
+#9: xvcpsgnsp 00000000 +-cp 42780000 AND 00000000 +-cp 7f800000 AND 00000000 +-cp 7fffffff AND 00000000 +-cp 7fc00000 => 42780000 7f800000 7fffffff 7fc00000
+#10: xvcpsgnsp 7f800000 +-cp ff800000 AND 7f800000 +-cp c683287b AND 7f800000 +-cp 80000000 AND 7f800000 +-cp 00000000 => 7f800000 4683287b 00000000 00000000
+#11: xvcpsgnsp 7f800000 +-cp 00000000 AND 7f800000 +-cp 7f800000 AND 7f800000 +-cp 7fffffff AND 7f800000 +-cp 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#12: xvcpsgnsp ffffffff +-cp ff800000 AND ffffffff +-cp c683287b AND ffc00000 +-cp 80000000 AND ffc00000 +-cp 00000000 => ff800000 c683287b 80000000 80000000
+#13: xvcpsgnsp ffffffff +-cp 00000000 AND ffffffff +-cp 7f800000 AND ffffffff +-cp 7fffffff AND ffffffff +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#14: xvcpsgnsp ffc00000 +-cp ff800000 AND ffc00000 +-cp c683287b AND ffc00000 +-cp 80000000 AND 49192c2d +-cp 49c1288d => ff800000 c683287b 80000000 49c1288d
+#15: xvcpsgnsp 49192c2d +-cp 49c1288d AND 7fffffff +-cp 7fc00000 AND 7fc00000 +-cp 7fc00000 AND 7fc00000 +-cp ffc00000 => 49c1288d 7fc00000 7fc00000 7fc00000
+
+
+Test xxsel instruction
+xxsel a12bc37de56f9708,fedc432124681235,ffffffff01020304 => fedc4321e46d960c
+xxsel 3894c1fddeadbeef,f1e2d3c4e0057708,128934bd00000000 => 3894d1c4deadbeef
+
+Test xxspltw instruction
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 0=> 0xfedc4321fedc4321fedc4321fedc4321
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 1=> 0x24681235246812352468123524681235
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 2=> 0xf1e2d3c4f1e2d3c4f1e2d3c4f1e2d3c4
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 3=> 0xe0057708e0057708e0057708e0057708
+
+Test div extensions
+#0: divweu: 0x00000000 / 0x00000002 = 0x00000000; CR=0; XER=0
+#1: divweu: 0x00000002 / 0x00000000 = 0x00000000; CR=0; XER=0
+#2: divweu: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=0; XER=0
+#3: divweu: 0xfabc1234 / 0x00000005 = 0x00000000; CR=0; XER=0
+#4: divweu: 0x0000004d / 0x00000042 = 0x00000000; CR=0; XER=0
+#5: divweu: 0x00000005 / 0xfabc1234 = 0x00000005; CR=0; XER=0
+
+#0: divweu.: 0x00000000 / 0x00000002 = 0x00000000; CR=2; XER=0
+#1: divweu.: 0x00000002 / 0x00000000 = 0x00000000; CR=2; XER=0
+#2: divweu.: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=8; XER=0
+#3: divweu.: 0xfabc1234 / 0x00000005 = 0x00000000; CR=2; XER=0
+#4: divweu.: 0x0000004d / 0x00000042 = 0x00000000; CR=2; XER=0
+#5: divweu.: 0x00000005 / 0xfabc1234 = 0x00000005; CR=4; XER=0
+
+
+#0: divweuo: 0x00000000 / 0x00000002 = 0x00000000; CR=0; XER=0
+#1: divweuo: 0x00000002 / 0x00000000 = 0x00000000; CR=0; XER=c0000000
+#2: divweuo: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=0; XER=0
+#3: divweuo: 0xfabc1234 / 0x00000005 = 0x00000000; CR=0; XER=c0000000
+#4: divweuo: 0x0000004d / 0x00000042 = 0x00000000; CR=0; XER=c0000000
+#5: divweuo: 0x00000005 / 0xfabc1234 = 0x00000005; CR=0; XER=0
+
+#0: divweuo.: 0x00000000 / 0x00000002 = 0x00000000; CR=2; XER=0
+#1: divweuo.: 0x00000002 / 0x00000000 = 0x00000000; CR=3; XER=c0000000
+#2: divweuo.: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=8; XER=0
+#3: divweuo.: 0xfabc1234 / 0x00000005 = 0x00000000; CR=3; XER=c0000000
+#4: divweuo.: 0x0000004d / 0x00000042 = 0x00000000; CR=3; XER=c0000000
+#5: divweuo.: 0x00000005 / 0xfabc1234 = 0x00000005; CR=4; XER=0
+
+
+Test floating point convert [word | doubleword] unsigned, with round toward zero
+#0: fctiduz: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiduz: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiduz: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiduz: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctiduz: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiduz: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiduz: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiduz: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctiduz: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiduz: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiduz: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiduz: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiduz: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiduz: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiduz: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiduz: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiduz: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+#0: fctiduz.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiduz.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiduz.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiduz.: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctiduz.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiduz.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiduz.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiduz.: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctiduz.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiduz.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiduz.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiduz.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiduz.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiduz.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiduz.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiduz.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiduz.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+
+#0: fctidu: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctidu: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctidu: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctidu: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctidu: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctidu: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctidu: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctidu: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctidu: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctidu: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctidu: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctidu: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctidu: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctidu: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctidu: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctidu: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctidu: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+#0: fctidu.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctidu.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctidu.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctidu.: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctidu.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctidu.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctidu.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctidu.: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctidu.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctidu.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctidu.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctidu.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctidu.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctidu.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctidu.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctidu.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctidu.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+
+#0: fctiwuz: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwuz: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwuz: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwuz: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwuz: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwuz: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwuz: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwuz: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwuz: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwuz: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwuz: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwuz: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwuz: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwuz: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwuz: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwuz: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiwuz: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+#0: fctiwuz.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwuz.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwuz.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwuz.: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwuz.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwuz.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwuz.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwuz.: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwuz.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwuz.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwuz.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwuz.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwuz.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwuz.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwuz.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwuz.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiwuz.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+
+#0: fctiwu: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwu: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwu: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwu: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwu: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwu: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwu: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwu: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwu: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwu: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwu: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwu: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwu: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwu: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwu: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwu: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctiwu: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+#0: fctiwu.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwu.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwu.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwu.: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwu.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwu.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwu.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwu.: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwu.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwu.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwu.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwu.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwu.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwu.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwu.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwu.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctiwu.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+
+Test floating point arithmetic instructions -- with a{d|s}p or m{d|s}p
+#0: xsnmsubadp !*-(fff0000000000000,fff0000000000000,3fd8000000000000) = 7ff8000000000000
+#1: xsnmsubadp !*-(c0d0650f5a07b353,fff0000000000000,404f000000000000) = 7ff0000000000000
+#2: xsnmsubadp !*-(41382511a2000000,41232585a9900000,0018000000b77501) = 41382511a2000000
+#3: xsnmsubadp !*-(0000000000000000,fff0000000000000,7fe800000000051b) = 7ff0000000000000
+#4: xsnmsubadp !*-(0123214569900000,fff0000000000000,0123214569900000) = 7ff0000000000000
+#5: xsnmsubadp !*-(7ff0000000000000,fff0000000000000,0000000000000000) = 7ff8000000000000
+#6: xsnmsubadp !*-(7ff7ffffffffffff,fff0000000000000,8000000000000000) = 7fffffffffffffff
+#7: xsnmsubadp !*-(7ff8000000000000,fff0000000000000,7ff0000000000000) = 7ff8000000000000
+#8: xsnmsubadp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) = fff0000000000000
+#9: xsnmsubadp !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) = 7fffffffffffffff
+#10: xsnmsubadp !*-(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) = ffffffffffffffff
+#11: xsnmsubadp !*-(0000000000000000,c0d0650f5a07b353,7ff8000000000000) = 7ff8000000000000
+#12: xsnmsubadp !*-(0123214569900000,c0d0650f5a07b353,fff8000000000000) = fff8000000000000
+#13: xsnmsubadp !*-(7ff0000000000000,c0d0650f5a07b353,8008340000078000) = 7ff0000000000000
+#14: xsnmsubadp !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) = 7fffffffffffffff
+#15: xsnmsubadp !*-(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) = 7ff8000000000000
+#16: xsnmsubadp !*-(fff0000000000000,8000000000000000,3fd8000000000000) = fff0000000000000
+#17: xsnmsubadp !*-(c0d0650f5a07b353,8000000000000000,404f000000000000) = c0d0650f5a07b353
+#18: xsnmsubadp !*-(8000000000000000,8000000000000000,0018000000b77501) = 8000000000000000
+#19: xsnmsubadp !*-(0000000000000000,8000000000000000,7fe800000000051b) = 0000000000000000
+#20: xsnmsubadp !*-(0123214569900000,8000000000000000,0123214569900000) = 0123214569900000
+#21: xsnmsubadp !*-(7ff0000000000000,8000000000000000,0000000000000000) = 7ff0000000000000
+#22: xsnmsubadp !*-(7ff7ffffffffffff,8000000000000000,8000000000000000) = 7fffffffffffffff
+#23: xsnmsubadp !*-(7ff8000000000000,8000000000000000,7ff0000000000000) = 7ff8000000000000
+#24: xsnmsubadp !*-(fff0000000000000,0000000000000000,fff0000000000000) = 7ff8000000000000
+#25: xsnmsubadp !*-(c0d0650f5a07b353,0000000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#26: xsnmsubadp !*-(8000000000000000,0000000000000000,fff7ffffffffffff) = ffffffffffffffff
+#27: xsnmsubadp !*-(0000000000000000,0000000000000000,7ff8000000000000) = 7ff8000000000000
+#28: xsnmsubadp !*-(0123214569900000,0000000000000000,fff8000000000000) = fff8000000000000
+#29: xsnmsubadp !*-(7ff0000000000000,0000000000000000,8008340000078000) = 7ff0000000000000
+#30: xsnmsubadp !*-(7ff7ffffffffffff,0000000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#31: xsnmsubadp !*-(7ff8000000000000,0000000000000000,41232585a9900000) = 7ff8000000000000
+#32: xsnmsubadp !*-(fff0000000000000,0123214569900000,3fd8000000000000) = fff0000000000000
+#33: xsnmsubadp !*-(c0d0650f5a07b353,0123214569900000,404f000000000000) = c0d0650f5a07b353
+#34: xsnmsubadp !*-(8000000000000000,0123214569900000,0018000000b77501) = 8000000000000000
+#35: xsnmsubadp !*-(0000000000000000,0123214569900000,7fe800000000051b) = c11cb1e81e58061b
+#36: xsnmsubadp !*-(404f000000000000,0123214569900000,0123214569900000) = 404f000000000000
+#37: xsnmsubadp !*-(7ff0000000000000,0123214569900000,0000000000000000) = 7ff0000000000000
+#38: xsnmsubadp !*-(7ff7ffffffffffff,0123214569900000,8000000000000000) = 7fffffffffffffff
+#39: xsnmsubadp !*-(7ff8000000000000,0123214569900000,7ff0000000000000) = 7ff8000000000000
+#40: xsnmsubadp !*-(fff0000000000000,7ff0000000000000,fff0000000000000) = 7ff8000000000000
+#41: xsnmsubadp !*-(c0d0650f5a07b353,7ff0000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#42: xsnmsubadp !*-(8000000000000000,7ff0000000000000,fff7ffffffffffff) = ffffffffffffffff
+#43: xsnmsubadp !*-(0000000000000000,7ff0000000000000,7ff8000000000000) = 7ff8000000000000
+#44: xsnmsubadp !*-(0123214569900000,7ff0000000000000,fff8000000000000) = fff8000000000000
+#45: xsnmsubadp !*-(7ff0000000000000,7ff0000000000000,8008340000078000) = 7ff0000000000000
+#46: xsnmsubadp !*-(7ff7ffffffffffff,7ff0000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#47: xsnmsubadp !*-(7ff8000000000000,7ff0000000000000,41232585a9900000) = 7ff8000000000000
+#48: xsnmsubadp !*-(fff0000000000000,fff7ffffffffffff,3fd8000000000000) = ffffffffffffffff
+#49: xsnmsubadp !*-(c0d0650f5a07b353,fff7ffffffffffff,404f000000000000) = ffffffffffffffff
+#50: xsnmsubadp !*-(8000000000000000,fff8000000000000,0018000000b77501) = fff8000000000000
+#51: xsnmsubadp !*-(0000000000000000,fff8000000000000,7fe800000000051b) = fff8000000000000
+#52: xsnmsubadp !*-(0123214569900000,fff7ffffffffffff,0123214569900000) = ffffffffffffffff
+#53: xsnmsubadp !*-(7ff0000000000000,fff7ffffffffffff,0000000000000000) = ffffffffffffffff
+#54: xsnmsubadp !*-(7ff7ffffffffffff,fff7ffffffffffff,8000000000000000) = ffffffffffffffff
+#55: xsnmsubadp !*-(7ff8000000000000,fff7ffffffffffff,7ff0000000000000) = ffffffffffffffff
+#56: xsnmsubadp !*-(fff0000000000000,fff8000000000000,fff0000000000000) = fff8000000000000
+#57: xsnmsubadp !*-(c0d0650f5a07b353,fff8000000000000,7ff7ffffffffffff) = fff8000000000000
+#58: xsnmsubadp !*-(8000000000000000,fff8000000000000,fff7ffffffffffff) = fff8000000000000
+#59: xsnmsubadp !*-(41382511a2000000,41232585a9900000,7ff8000000000000) = 7ff8000000000000
+#60: xsnmsubadp !*-(41382511a2000000,41232585a9900000,fff8000000000000) = fff8000000000000
+#61: xsnmsubadp !*-(7ff8000000000000,7ff7ffffffffffff,8008340000078000) = 7fffffffffffffff
+#62: xsnmsubadp !*-(7ff8000000000000,7ff8000000000000,c0d0650f5a07b353) = 7ff8000000000000
+#63: xsnmsubadp !*-(fff8000000000000,7ff8000000000000,41232585a9900000) = 7ff8000000000000
+
+#0: xsnmsubmdp !*-(3fd8000000000000,fff0000000000000,fff0000000000000) = 7ff8000000000000
+#1: xsnmsubmdp !*-(404f000000000000,fff0000000000000,c0d0650f5a07b353) = 7ff0000000000000
+#2: xsnmsubmdp !*-(0018000000b77501,41232585a9900000,41382511a2000000) = 41382511a2000000
+#3: xsnmsubmdp !*-(7fe800000000051b,fff0000000000000,0000000000000000) = 7ff0000000000000
+#4: xsnmsubmdp !*-(0123214569900000,fff0000000000000,0123214569900000) = 7ff0000000000000
+#5: xsnmsubmdp !*-(0000000000000000,fff0000000000000,7ff0000000000000) = 7ff8000000000000
+#6: xsnmsubmdp !*-(8000000000000000,fff0000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#7: xsnmsubmdp !*-(7ff0000000000000,fff0000000000000,7ff8000000000000) = 7ff8000000000000
+#8: xsnmsubmdp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) = fff0000000000000
+#9: xsnmsubmdp !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) = 7fffffffffffffff
+#10: xsnmsubmdp !*-(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) = ffffffffffffffff
+#11: xsnmsubmdp !*-(7ff8000000000000,c0d0650f5a07b353,0000000000000000) = 7ff8000000000000
+#12: xsnmsubmdp !*-(fff8000000000000,c0d0650f5a07b353,0123214569900000) = fff8000000000000
+#13: xsnmsubmdp !*-(8008340000078000,c0d0650f5a07b353,7ff0000000000000) = 7ff0000000000000
+#14: xsnmsubmdp !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) = 7fffffffffffffff
+#15: xsnmsubmdp !*-(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) = 7ff8000000000000
+#16: xsnmsubmdp !*-(3fd8000000000000,8000000000000000,fff0000000000000) = fff0000000000000
+#17: xsnmsubmdp !*-(404f000000000000,8000000000000000,c0d0650f5a07b353) = c0d0650f5a07b353
+#18: xsnmsubmdp !*-(0018000000b77501,8000000000000000,8000000000000000) = 8000000000000000
+#19: xsnmsubmdp !*-(7fe800000000051b,8000000000000000,0000000000000000) = 0000000000000000
+#20: xsnmsubmdp !*-(0123214569900000,8000000000000000,0123214569900000) = 0123214569900000
+#21: xsnmsubmdp !*-(0000000000000000,8000000000000000,7ff0000000000000) = 7ff0000000000000
+#22: xsnmsubmdp !*-(8000000000000000,8000000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#23: xsnmsubmdp !*-(7ff0000000000000,8000000000000000,7ff8000000000000) = 7ff8000000000000
+#24: xsnmsubmdp !*-(fff0000000000000,0000000000000000,fff0000000000000) = 7ff8000000000000
+#25: xsnmsubmdp !*-(7ff7ffffffffffff,0000000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#26: xsnmsubmdp !*-(fff7ffffffffffff,0000000000000000,8000000000000000) = ffffffffffffffff
+#27: xsnmsubmdp !*-(7ff8000000000000,0000000000000000,0000000000000000) = 7ff8000000000000
+#28: xsnmsubmdp !*-(fff8000000000000,0000000000000000,0123214569900000) = fff8000000000000
+#29: xsnmsubmdp !*-(8008340000078000,0000000000000000,7ff0000000000000) = 7ff0000000000000
+#30: xsnmsubmdp !*-(c0d0650f5a07b353,0000000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#31: xsnmsubmdp !*-(41232585a9900000,0000000000000000,7ff8000000000000) = 7ff8000000000000
+#32: xsnmsubmdp !*-(3fd8000000000000,0123214569900000,fff0000000000000) = fff0000000000000
+#33: xsnmsubmdp !*-(404f000000000000,0123214569900000,c0d0650f5a07b353) = c0d0650f5a07b353
+#34: xsnmsubmdp !*-(0018000000b77501,0123214569900000,8000000000000000) = 8000000000000000
+#35: xsnmsubmdp !*-(7fe800000000051b,0123214569900000,0000000000000000) = c11cb1e81e58061b
+#36: xsnmsubmdp !*-(0123214569900000,0123214569900000,404f000000000000) = 404f000000000000
+#37: xsnmsubmdp !*-(0000000000000000,0123214569900000,7ff0000000000000) = 7ff0000000000000
+#38: xsnmsubmdp !*-(8000000000000000,0123214569900000,7ff7ffffffffffff) = 7fffffffffffffff
+#39: xsnmsubmdp !*-(7ff0000000000000,0123214569900000,7ff8000000000000) = 7ff8000000000000
+#40: xsnmsubmdp !*-(fff0000000000000,7ff0000000000000,fff0000000000000) = 7ff8000000000000
+#41: xsnmsubmdp !*-(7ff7ffffffffffff,7ff0000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#42: xsnmsubmdp !*-(fff7ffffffffffff,7ff0000000000000,8000000000000000) = ffffffffffffffff
+#43: xsnmsubmdp !*-(7ff8000000000000,7ff0000000000000,0000000000000000) = 7ff8000000000000
+#44: xsnmsubmdp !*-(fff8000000000000,7ff0000000000000,0123214569900000) = fff8000000000000
+#45: xsnmsubmdp !*-(8008340000078000,7ff0000000000000,7ff0000000000000) = 7ff0000000000000
+#46: xsnmsubmdp !*-(c0d0650f5a07b353,7ff0000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#47: xsnmsubmdp !*-(41232585a9900000,7ff0000000000000,7ff8000000000000) = 7ff8000000000000
+#48: xsnmsubmdp !*-(3fd8000000000000,fff7ffffffffffff,fff0000000000000) = ffffffffffffffff
+#49: xsnmsubmdp !*-(404f000000000000,fff7ffffffffffff,c0d0650f5a07b353) = ffffffffffffffff
+#50: xsnmsubmdp !*-(0018000000b77501,fff8000000000000,8000000000000000) = fff8000000000000
+#51: xsnmsubmdp !*-(7fe800000000051b,fff8000000000000,0000000000000000) = fff8000000000000
+#52: xsnmsubmdp !*-(0123214569900000,fff7ffffffffffff,0123214569900000) = ffffffffffffffff
+#53: xsnmsubmdp !*-(0000000000000000,fff7ffffffffffff,7ff0000000000000) = ffffffffffffffff
+#54: xsnmsubmdp !*-(8000000000000000,fff7ffffffffffff,7ff7ffffffffffff) = ffffffffffffffff
+#55: xsnmsubmdp !*-(7ff0000000000000,fff7ffffffffffff,7ff8000000000000) = ffffffffffffffff
+#56: xsnmsubmdp !*-(fff0000000000000,fff8000000000000,fff0000000000000) = fff8000000000000
+#57: xsnmsubmdp !*-(7ff7ffffffffffff,fff8000000000000,c0d0650f5a07b353) = fff8000000000000
+#58: xsnmsubmdp !*-(fff7ffffffffffff,fff8000000000000,8000000000000000) = fff8000000000000
+#59: xsnmsubmdp !*-(7ff8000000000000,41232585a9900000,41382511a2000000) = 7ff8000000000000
+#60: xsnmsubmdp !*-(fff8000000000000,41232585a9900000,41382511a2000000) = fff8000000000000
+#61: xsnmsubmdp !*-(8008340000078000,7ff7ffffffffffff,7ff8000000000000) = 7fffffffffffffff
+#62: xsnmsubmdp !*-(c0d0650f5a07b353,7ff8000000000000,7ff8000000000000) = 7ff8000000000000
+#63: xsnmsubmdp !*-(41232585a9900000,7ff8000000000000,fff8000000000000) = 7ff8000000000000
+
+#0: xvmaddadp *+(fff0000000000000,fff0000000000000,3fd8000000000000) AND *+(c0d0650f5a07b353,fff0000000000000,404f000000000000) => fff0000000000000 fff0000000000000
+#1: xvmaddadp *+(41382511a2000000,41232585a9900000,0018000000b77501) AND *+(0000000000000000,fff0000000000000,7fe800000000051b) => 41382511a2000000 fff0000000000000
+#2: xvmaddadp *+(0123214569900000,fff0000000000000,0123214569900000) AND *+(7ff0000000000000,fff0000000000000,0000000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmaddadp *+(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND *+(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmaddadp *+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => 7ff8000000000000 7fffffffffffffff
+#5: xvmaddadp *+(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND *+(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmaddadp *+(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND *+(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 7ff0000000000000
+#7: xvmaddadp *+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND *+(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmaddadp *+(fff0000000000000,8000000000000000,404f000000000000) AND *+(c0d0650f5a07b353,8000000000000000,0018000000b77501) => fff0000000000000 c0d0650f5a07b353
+#9: xvmaddadp *+(8000000000000000,8000000000000000,7fe800000000051b) AND *+(0000000000000000,8000000000000000,0123214569900000) => 8000000000000000 0000000000000000
+#10: xvmaddadp *+(0123214569900000,8000000000000000,0000000000000000) AND *+(7ff0000000000000,8000000000000000,8000000000000000) => 0123214569900000 7ff0000000000000
+#11: xvmaddadp *+(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND *+(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmaddadp *+(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND *+(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvmaddadp *+(8000000000000000,0000000000000000,7ff8000000000000) AND *+(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmaddadp *+(0123214569900000,0000000000000000,8008340000078000) AND *+(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 0123214569900000 7ff0000000000000
+#15: xvmaddadp *+(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND *+(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmaddadp *+(fff0000000000000,0123214569900000,0018000000b77501) AND *+(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => fff0000000000000 411bab9728b78ae5
+#17: xvmaddadp *+(8000000000000000,0123214569900000,0123214569900000) AND *+(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmaddadp *+(404f000000000000,0123214569900000,8000000000000000) AND *+(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff0000000000000
+#19: xvmaddadp *+(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND *+(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvmaddadp *+(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND *+(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvmaddadp *+(8000000000000000,7ff0000000000000,fff8000000000000) AND *+(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 fff0000000000000
+#22: xvmaddadp *+(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND *+(7ff0000000000000,7ff0000000000000,41232585a9900000) => fff0000000000000 7ff0000000000000
+#23: xvmaddadp *+(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND *+(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvmaddadp *+(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND *+(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvmaddadp *+(8000000000000000,fff8000000000000,0000000000000000) AND *+(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmaddadp *+(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND *+(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmaddadp *+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *+(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvmaddadp *+(fff0000000000000,fff8000000000000,7ff8000000000000) AND *+(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvmaddadp *+(8000000000000000,fff8000000000000,8008340000078000) AND *+(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 c2039db3bbaae2d2
+#30: xvmaddadp *+(41382511a2000000,41232585a9900000,3fd8000000000000) AND *+(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => 413bbc1ab1cb0000 7fffffffffffffff
+#31: xvmaddadp *+(7ff8000000000000,7ff8000000000000,0018000000b77501) AND *+(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmaddmdp *+(3fd8000000000000,fff0000000000000,fff0000000000000) AND *+(404f000000000000,fff0000000000000,c0d0650f5a07b353) => fff0000000000000 fff0000000000000
+#1: xvmaddmdp *+(0018000000b77501,41232585a9900000,41382511a2000000) AND *+(7fe800000000051b,fff0000000000000,0000000000000000) => 41382511a2000000 fff0000000000000
+#2: xvmaddmdp *+(0123214569900000,fff0000000000000,0123214569900000) AND *+(0000000000000000,fff0000000000000,7ff0000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmaddmdp *+(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND *+(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmaddmdp *+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => 7ff8000000000000 7fffffffffffffff
+#5: xvmaddmdp *+(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND *+(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmaddmdp *+(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND *+(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 7ff0000000000000
+#7: xvmaddmdp *+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND *+(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmaddmdp *+(404f000000000000,8000000000000000,fff0000000000000) AND *+(0018000000b77501,8000000000000000,c0d0650f5a07b353) => fff0000000000000 c0d0650f5a07b353
+#9: xvmaddmdp *+(7fe800000000051b,8000000000000000,8000000000000000) AND *+(0123214569900000,8000000000000000,0000000000000000) => 8000000000000000 0000000000000000
+#10: xvmaddmdp *+(0000000000000000,8000000000000000,0123214569900000) AND *+(8000000000000000,8000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#11: xvmaddmdp *+(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND *+(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmaddmdp *+(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND *+(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvmaddmdp *+(7ff8000000000000,0000000000000000,8000000000000000) AND *+(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmaddmdp *+(8008340000078000,0000000000000000,0123214569900000) AND *+(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#15: xvmaddmdp *+(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND *+(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmaddmdp *+(0018000000b77501,0123214569900000,fff0000000000000) AND *+(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => fff0000000000000 411bab9728b78ae5
+#17: xvmaddmdp *+(0123214569900000,0123214569900000,8000000000000000) AND *+(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmaddmdp *+(8000000000000000,0123214569900000,404f000000000000) AND *+(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff0000000000000
+#19: xvmaddmdp *+(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND *+(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvmaddmdp *+(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND *+(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvmaddmdp *+(fff8000000000000,7ff0000000000000,8000000000000000) AND *+(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 fff0000000000000
+#22: xvmaddmdp *+(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND *+(41232585a9900000,7ff0000000000000,7ff0000000000000) => fff0000000000000 7ff0000000000000
+#23: xvmaddmdp *+(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND *+(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvmaddmdp *+(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND *+(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvmaddmdp *+(0000000000000000,fff8000000000000,8000000000000000) AND *+(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmaddmdp *+(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND *+(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmaddmdp *+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *+(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvmaddmdp *+(7ff8000000000000,fff8000000000000,fff0000000000000) AND *+(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvmaddmdp *+(8008340000078000,fff8000000000000,8000000000000000) AND *+(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 c2039db3bbaae2d2
+#30: xvmaddmdp *+(3fd8000000000000,41232585a9900000,41382511a2000000) AND *+(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => 413bbc1ab1cb0000 7fffffffffffffff
+#31: xvmaddmdp *+(0018000000b77501,7ff8000000000000,7ff8000000000000) AND *+(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmaddasp *+(ff800000,ff800000,3ec00000) AND *+(c683287b,ff800000,42780000) AND *+(49c1288d,49192c2d,00000000) AND *+(00000000,ff800000,7f800000) => ff800000 ff800000 49c1288d ff800000
+#1: xvmaddasp *+(00000000,ff800000,00000000) AND *+(7f800000,ff800000,00000000) AND *+(7fffffff,ff800000,80000000) AND *+(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmaddasp *+(ff800000,c683287b,ff800000) AND *+(c683287b,c683287b,7fffffff) AND *+(80000000,c683287b,ffffffff) AND *+(00000000,c683287b,7fc00000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvmaddasp *+(00000000,c683287b,ffc00000) AND *+(7f800000,c683287b,80000000) AND *+(7fffffff,c683287b,c683287b) AND *+(7fc00000,c683287b,49192c2d) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvmaddasp *+(ff800000,80000000,7f800000) AND *+(c683287b,80000000,00000000) AND *+(80000000,80000000,00000000) AND *+(00000000,80000000,80000000) => 7fc00000 c683287b 80000000 00000000
+#5: xvmaddasp *+(00000000,80000000,7f800000) AND *+(7f800000,80000000,ff800000) AND *+(7fffffff,80000000,7fffffff) AND *+(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmaddasp *+(ff800000,00000000,7fc00000) AND *+(c683287b,00000000,ffc00000) AND *+(80000000,00000000,80000000) AND *+(00000000,00000000,c683287b) => 7fc00000 ffc00000 80000000 00000000
+#7: xvmaddasp *+(00000000,00000000,00000000) AND *+(7f800000,00000000,7f800000) AND *+(7fffffff,00000000,00000000) AND *+(7fc00000,00000000,00000000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmaddasp *+(ff800000,00000000,80000000) AND *+(c683287b,00000000,7f800000) AND *+(80000000,00000000,ff800000) AND *+(00000000,00000000,7fffffff) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvmaddasp *+(42780000,00000000,ffffffff) AND *+(7f800000,00000000,7fc00000) AND *+(7fffffff,00000000,ffc00000) AND *+(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmaddasp *+(ff800000,7f800000,42780000) AND *+(c683287b,7f800000,00000000) AND *+(80000000,7f800000,7f800000) AND *+(00000000,7f800000,00000000) => 7fc00000 7fc00000 7f800000 7fc00000
+#11: xvmaddasp *+(00000000,7f800000,00000000) AND *+(7f800000,7f800000,80000000) AND *+(7fffffff,7f800000,7f800000) AND *+(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmaddasp *+(ff800000,ffffffff,7fffffff) AND *+(c683287b,ffffffff,ffffffff) AND *+(80000000,ffc00000,7fc00000) AND *+(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmaddasp *+(00000000,ffffffff,3ec00000) AND *+(7f800000,ffffffff,42780000) AND *+(7fffffff,ffffffff,00000000) AND *+(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmaddasp *+(ff800000,ffc00000,00000000) AND *+(c683287b,ffc00000,00000000) AND *+(80000000,ffc00000,80000000) AND *+(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmaddasp *+(49c1288d,49192c2d,ff800000) AND *+(7fc00000,7fffffff,7fffffff) AND *+(7fc00000,7fc00000,ffffffff) AND *+(ffc00000,7fc00000,7fc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvmaddmsp *+(3ec00000,ff800000,ff800000) AND *+(42780000,ff800000,c683287b) AND *+(00000000,49192c2d,49c1288d) AND *+(7f800000,ff800000,00000000) => ff800000 ff800000 49c1288d ff800000
+#1: xvmaddmsp *+(00000000,ff800000,00000000) AND *+(00000000,ff800000,7f800000) AND *+(80000000,ff800000,7fffffff) AND *+(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmaddmsp *+(ff800000,c683287b,ff800000) AND *+(7fffffff,c683287b,c683287b) AND *+(ffffffff,c683287b,80000000) AND *+(7fc00000,c683287b,00000000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvmaddmsp *+(ffc00000,c683287b,00000000) AND *+(80000000,c683287b,7f800000) AND *+(c683287b,c683287b,7fffffff) AND *+(49192c2d,c683287b,7fc00000) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvmaddmsp *+(7f800000,80000000,ff800000) AND *+(00000000,80000000,c683287b) AND *+(00000000,80000000,80000000) AND *+(80000000,80000000,00000000) => 7fc00000 c683287b 80000000 00000000
+#5: xvmaddmsp *+(7f800000,80000000,00000000) AND *+(ff800000,80000000,7f800000) AND *+(7fffffff,80000000,7fffffff) AND *+(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmaddmsp *+(7fc00000,00000000,ff800000) AND *+(ffc00000,00000000,c683287b) AND *+(80000000,00000000,80000000) AND *+(c683287b,00000000,00000000) => 7fc00000 ffc00000 80000000 00000000
+#7: xvmaddmsp *+(00000000,00000000,00000000) AND *+(7f800000,00000000,7f800000) AND *+(00000000,00000000,7fffffff) AND *+(00000000,00000000,7fc00000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmaddmsp *+(80000000,00000000,ff800000) AND *+(7f800000,00000000,c683287b) AND *+(ff800000,00000000,80000000) AND *+(7fffffff,00000000,00000000) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvmaddmsp *+(ffffffff,00000000,42780000) AND *+(7fc00000,00000000,7f800000) AND *+(ffc00000,00000000,7fffffff) AND *+(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmaddmsp *+(42780000,7f800000,ff800000) AND *+(00000000,7f800000,c683287b) AND *+(7f800000,7f800000,80000000) AND *+(00000000,7f800000,00000000) => 7fc00000 7fc00000 7f800000 7fc00000
+#11: xvmaddmsp *+(00000000,7f800000,00000000) AND *+(80000000,7f800000,7f800000) AND *+(7f800000,7f800000,7fffffff) AND *+(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmaddmsp *+(7fffffff,ffffffff,ff800000) AND *+(ffffffff,ffffffff,c683287b) AND *+(7fc00000,ffc00000,80000000) AND *+(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmaddmsp *+(3ec00000,ffffffff,00000000) AND *+(42780000,ffffffff,7f800000) AND *+(00000000,ffffffff,7fffffff) AND *+(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmaddmsp *+(00000000,ffc00000,ff800000) AND *+(00000000,ffc00000,c683287b) AND *+(80000000,ffc00000,80000000) AND *+(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmaddmsp *+(ff800000,49192c2d,49c1288d) AND *+(7fffffff,7fffffff,7fc00000) AND *+(ffffffff,7fc00000,7fc00000) AND *+(7fc00000,7fc00000,ffc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmaddadp !*+(fff0000000000000,fff0000000000000,3fd8000000000000) AND !*+(c0d0650f5a07b353,fff0000000000000,404f000000000000) => 7ff0000000000000 7ff0000000000000
+#1: xvnmaddadp !*+(41382511a2000000,41232585a9900000,0018000000b77501) AND !*+(0000000000000000,fff0000000000000,7fe800000000051b) => c1382511a2000000 7ff0000000000000
+#2: xvnmaddadp !*+(0123214569900000,fff0000000000000,0123214569900000) AND !*+(7ff0000000000000,fff0000000000000,0000000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmaddadp !*+(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND !*+(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmaddadp !*+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => 7ff8000000000000 7fffffffffffffff
+#5: xvnmaddadp !*+(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND !*+(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmaddadp !*+(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND !*+(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 fff0000000000000
+#7: xvnmaddadp !*+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND !*+(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmaddadp !*+(fff0000000000000,8000000000000000,404f000000000000) AND !*+(c0d0650f5a07b353,8000000000000000,0018000000b77501) => 7ff0000000000000 40d0650f5a07b353
+#9: xvnmaddadp !*+(8000000000000000,8000000000000000,7fe800000000051b) AND !*+(0000000000000000,8000000000000000,0123214569900000) => 0000000000000000 8000000000000000
+#10: xvnmaddadp !*+(0123214569900000,8000000000000000,0000000000000000) AND !*+(7ff0000000000000,8000000000000000,8000000000000000) => 8123214569900000 fff0000000000000
+#11: xvnmaddadp !*+(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND !*+(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmaddadp !*+(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND !*+(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmaddadp !*+(8000000000000000,0000000000000000,7ff8000000000000) AND !*+(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmaddadp !*+(0123214569900000,0000000000000000,8008340000078000) AND !*+(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 8123214569900000 fff0000000000000
+#15: xvnmaddadp !*+(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND !*+(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmaddadp !*+(fff0000000000000,0123214569900000,0018000000b77501) AND !*+(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => 7ff0000000000000 c11bab9728b78ae5
+#17: xvnmaddadp !*+(8000000000000000,0123214569900000,0123214569900000) AND !*+(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmaddadp !*+(404f000000000000,0123214569900000,8000000000000000) AND !*+(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 fff0000000000000
+#19: xvnmaddadp !*+(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND !*+(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmaddadp !*+(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND !*+(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvnmaddadp !*+(8000000000000000,7ff0000000000000,fff8000000000000) AND !*+(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 7ff0000000000000
+#22: xvnmaddadp !*+(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND !*+(7ff0000000000000,7ff0000000000000,41232585a9900000) => 7ff0000000000000 fff0000000000000
+#23: xvnmaddadp !*+(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND !*+(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmaddadp !*+(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND !*+(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvnmaddadp !*+(8000000000000000,fff8000000000000,0000000000000000) AND !*+(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmaddadp !*+(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND !*+(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmaddadp !*+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*+(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvnmaddadp !*+(fff0000000000000,fff8000000000000,7ff8000000000000) AND !*+(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvnmaddadp !*+(8000000000000000,fff8000000000000,8008340000078000) AND !*+(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 42039db3bbaae2d2
+#30: xvnmaddadp !*+(41382511a2000000,41232585a9900000,3fd8000000000000) AND !*+(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => c13bbc1ab1cb0000 7fffffffffffffff
+#31: xvnmaddadp !*+(7ff8000000000000,7ff8000000000000,0018000000b77501) AND !*+(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmaddmdp !*+(3fd8000000000000,fff0000000000000,fff0000000000000) AND !*+(404f000000000000,fff0000000000000,c0d0650f5a07b353) => 7ff0000000000000 7ff0000000000000
+#1: xvnmaddmdp !*+(0018000000b77501,41232585a9900000,41382511a2000000) AND !*+(7fe800000000051b,fff0000000000000,0000000000000000) => c1382511a2000000 7ff0000000000000
+#2: xvnmaddmdp !*+(0123214569900000,fff0000000000000,0123214569900000) AND !*+(0000000000000000,fff0000000000000,7ff0000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmaddmdp !*+(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND !*+(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmaddmdp !*+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => 7ff8000000000000 7fffffffffffffff
+#5: xvnmaddmdp !*+(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND !*+(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmaddmdp !*+(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND !*+(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 fff0000000000000
+#7: xvnmaddmdp !*+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND !*+(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmaddmdp !*+(404f000000000000,8000000000000000,fff0000000000000) AND !*+(0018000000b77501,8000000000000000,c0d0650f5a07b353) => 7ff0000000000000 40d0650f5a07b353
+#9: xvnmaddmdp !*+(7fe800000000051b,8000000000000000,8000000000000000) AND !*+(0123214569900000,8000000000000000,0000000000000000) => 0000000000000000 8000000000000000
+#10: xvnmaddmdp !*+(0000000000000000,8000000000000000,0123214569900000) AND !*+(8000000000000000,8000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#11: xvnmaddmdp !*+(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND !*+(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmaddmdp !*+(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND !*+(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmaddmdp !*+(7ff8000000000000,0000000000000000,8000000000000000) AND !*+(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmaddmdp !*+(8008340000078000,0000000000000000,0123214569900000) AND !*+(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#15: xvnmaddmdp !*+(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND !*+(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmaddmdp !*+(0018000000b77501,0123214569900000,fff0000000000000) AND !*+(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => 7ff0000000000000 c11bab9728b78ae5
+#17: xvnmaddmdp !*+(0123214569900000,0123214569900000,8000000000000000) AND !*+(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmaddmdp !*+(8000000000000000,0123214569900000,404f000000000000) AND !*+(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 fff0000000000000
+#19: xvnmaddmdp !*+(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND !*+(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmaddmdp !*+(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND !*+(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvnmaddmdp !*+(fff8000000000000,7ff0000000000000,8000000000000000) AND !*+(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 7ff0000000000000
+#22: xvnmaddmdp !*+(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND !*+(41232585a9900000,7ff0000000000000,7ff0000000000000) => 7ff0000000000000 fff0000000000000
+#23: xvnmaddmdp !*+(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND !*+(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmaddmdp !*+(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND !*+(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvnmaddmdp !*+(0000000000000000,fff8000000000000,8000000000000000) AND !*+(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmaddmdp !*+(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND !*+(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmaddmdp !*+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*+(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvnmaddmdp !*+(7ff8000000000000,fff8000000000000,fff0000000000000) AND !*+(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvnmaddmdp !*+(8008340000078000,fff8000000000000,8000000000000000) AND !*+(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 42039db3bbaae2d2
+#30: xvnmaddmdp !*+(3fd8000000000000,41232585a9900000,41382511a2000000) AND !*+(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => c13bbc1ab1cb0000 7fffffffffffffff
+#31: xvnmaddmdp !*+(0018000000b77501,7ff8000000000000,7ff8000000000000) AND !*+(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmaddasp !*+(ff800000,ff800000,3ec00000) AND !*+(c683287b,ff800000,42780000) AND !*+(49c1288d,49192c2d,00000000) AND !*+(00000000,ff800000,7f800000) => 7f800000 7f800000 c9c1288d 7f800000
+#1: xvnmaddasp !*+(00000000,ff800000,00000000) AND !*+(7f800000,ff800000,00000000) AND !*+(7fffffff,ff800000,80000000) AND !*+(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmaddasp !*+(ff800000,c683287b,ff800000) AND !*+(c683287b,c683287b,7fffffff) AND !*+(80000000,c683287b,ffffffff) AND !*+(00000000,c683287b,7fc00000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvnmaddasp !*+(00000000,c683287b,ffc00000) AND !*+(7f800000,c683287b,80000000) AND !*+(7fffffff,c683287b,c683287b) AND !*+(7fc00000,c683287b,49192c2d) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvnmaddasp !*+(ff800000,80000000,7f800000) AND !*+(c683287b,80000000,00000000) AND !*+(80000000,80000000,00000000) AND !*+(00000000,80000000,80000000) => 7fc00000 4683287b 00000000 80000000
+#5: xvnmaddasp !*+(00000000,80000000,7f800000) AND !*+(7f800000,80000000,ff800000) AND !*+(7fffffff,80000000,7fffffff) AND !*+(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmaddasp !*+(ff800000,00000000,7fc00000) AND !*+(c683287b,00000000,ffc00000) AND !*+(80000000,00000000,80000000) AND !*+(00000000,00000000,c683287b) => 7fc00000 ffc00000 00000000 80000000
+#7: xvnmaddasp !*+(00000000,00000000,00000000) AND !*+(7f800000,00000000,7f800000) AND !*+(7fffffff,00000000,00000000) AND !*+(7fc00000,00000000,00000000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmaddasp !*+(ff800000,00000000,80000000) AND !*+(c683287b,00000000,7f800000) AND !*+(80000000,00000000,ff800000) AND !*+(00000000,00000000,7fffffff) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvnmaddasp !*+(42780000,00000000,ffffffff) AND !*+(7f800000,00000000,7fc00000) AND !*+(7fffffff,00000000,ffc00000) AND !*+(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmaddasp !*+(ff800000,7f800000,42780000) AND !*+(c683287b,7f800000,00000000) AND !*+(80000000,7f800000,7f800000) AND !*+(00000000,7f800000,00000000) => 7fc00000 7fc00000 ff800000 7fc00000
+#11: xvnmaddasp !*+(00000000,7f800000,00000000) AND !*+(7f800000,7f800000,80000000) AND !*+(7fffffff,7f800000,7f800000) AND !*+(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmaddasp !*+(ff800000,ffffffff,7fffffff) AND !*+(c683287b,ffffffff,ffffffff) AND !*+(80000000,ffc00000,7fc00000) AND !*+(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmaddasp !*+(00000000,ffffffff,3ec00000) AND !*+(7f800000,ffffffff,42780000) AND !*+(7fffffff,ffffffff,00000000) AND !*+(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmaddasp !*+(ff800000,ffc00000,00000000) AND !*+(c683287b,ffc00000,00000000) AND !*+(80000000,ffc00000,80000000) AND !*+(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmaddasp !*+(49c1288d,49192c2d,ff800000) AND !*+(7fc00000,7fffffff,7fffffff) AND !*+(7fc00000,7fc00000,ffffffff) AND !*+(ffc00000,7fc00000,7fc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmaddmsp !*+(3ec00000,ff800000,ff800000) AND !*+(42780000,ff800000,c683287b) AND !*+(00000000,49192c2d,49c1288d) AND !*+(7f800000,ff800000,00000000) => 7f800000 7f800000 c9c1288d 7f800000
+#1: xvnmaddmsp !*+(00000000,ff800000,00000000) AND !*+(00000000,ff800000,7f800000) AND !*+(80000000,ff800000,7fffffff) AND !*+(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmaddmsp !*+(ff800000,c683287b,ff800000) AND !*+(7fffffff,c683287b,c683287b) AND !*+(ffffffff,c683287b,80000000) AND !*+(7fc00000,c683287b,00000000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvnmaddmsp !*+(ffc00000,c683287b,00000000) AND !*+(80000000,c683287b,7f800000) AND !*+(c683287b,c683287b,7fffffff) AND !*+(49192c2d,c683287b,7fc00000) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvnmaddmsp !*+(7f800000,80000000,ff800000) AND !*+(00000000,80000000,c683287b) AND !*+(00000000,80000000,80000000) AND !*+(80000000,80000000,00000000) => 7fc00000 4683287b 00000000 80000000
+#5: xvnmaddmsp !*+(7f800000,80000000,00000000) AND !*+(ff800000,80000000,7f800000) AND !*+(7fffffff,80000000,7fffffff) AND !*+(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmaddmsp !*+(7fc00000,00000000,ff800000) AND !*+(ffc00000,00000000,c683287b) AND !*+(80000000,00000000,80000000) AND !*+(c683287b,00000000,00000000) => 7fc00000 ffc00000 00000000 80000000
+#7: xvnmaddmsp !*+(00000000,00000000,00000000) AND !*+(7f800000,00000000,7f800000) AND !*+(00000000,00000000,7fffffff) AND !*+(00000000,00000000,7fc00000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmaddmsp !*+(80000000,00000000,ff800000) AND !*+(7f800000,00000000,c683287b) AND !*+(ff800000,00000000,80000000) AND !*+(7fffffff,00000000,00000000) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvnmaddmsp !*+(ffffffff,00000000,42780000) AND !*+(7fc00000,00000000,7f800000) AND !*+(ffc00000,00000000,7fffffff) AND !*+(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmaddmsp !*+(42780000,7f800000,ff800000) AND !*+(00000000,7f800000,c683287b) AND !*+(7f800000,7f800000,80000000) AND !*+(00000000,7f800000,00000000) => 7fc00000 7fc00000 ff800000 7fc00000
+#11: xvnmaddmsp !*+(00000000,7f800000,00000000) AND !*+(80000000,7f800000,7f800000) AND !*+(7f800000,7f800000,7fffffff) AND !*+(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmaddmsp !*+(7fffffff,ffffffff,ff800000) AND !*+(ffffffff,ffffffff,c683287b) AND !*+(7fc00000,ffc00000,80000000) AND !*+(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmaddmsp !*+(3ec00000,ffffffff,00000000) AND !*+(42780000,ffffffff,7f800000) AND !*+(00000000,ffffffff,7fffffff) AND !*+(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmaddmsp !*+(00000000,ffc00000,ff800000) AND !*+(00000000,ffc00000,c683287b) AND !*+(80000000,ffc00000,80000000) AND !*+(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmaddmsp !*+(ff800000,49192c2d,49c1288d) AND !*+(7fffffff,7fffffff,7fc00000) AND !*+(ffffffff,7fc00000,7fc00000) AND !*+(7fc00000,7fc00000,ffc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+#0: xvmsubadp *-(fff0000000000000,fff0000000000000,3fd8000000000000) AND *-(c0d0650f5a07b353,fff0000000000000,404f000000000000) => 7ff8000000000000 fff0000000000000
+#1: xvmsubadp *-(41382511a2000000,41232585a9900000,0018000000b77501) AND *-(0000000000000000,fff0000000000000,7fe800000000051b) => c1382511a2000000 fff0000000000000
+#2: xvmsubadp *-(0123214569900000,fff0000000000000,0123214569900000) AND *-(7ff0000000000000,fff0000000000000,0000000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmsubadp *-(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND *-(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmsubadp *-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => 7ff0000000000000 7fffffffffffffff
+#5: xvmsubadp *-(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND *-(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmsubadp *-(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND *-(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 fff0000000000000
+#7: xvmsubadp *-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND *-(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmsubadp *-(fff0000000000000,8000000000000000,404f000000000000) AND *-(c0d0650f5a07b353,8000000000000000,0018000000b77501) => 7ff0000000000000 40d0650f5a07b353
+#9: xvmsubadp *-(8000000000000000,8000000000000000,7fe800000000051b) AND *-(0000000000000000,8000000000000000,0123214569900000) => 0000000000000000 8000000000000000
+#10: xvmsubadp *-(0123214569900000,8000000000000000,0000000000000000) AND *-(7ff0000000000000,8000000000000000,8000000000000000) => 8123214569900000 fff0000000000000
+#11: xvmsubadp *-(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND *-(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmsubadp *-(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND *-(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvmsubadp *-(8000000000000000,0000000000000000,7ff8000000000000) AND *-(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmsubadp *-(0123214569900000,0000000000000000,8008340000078000) AND *-(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 8123214569900000 fff0000000000000
+#15: xvmsubadp *-(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND *-(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmsubadp *-(fff0000000000000,0123214569900000,0018000000b77501) AND *-(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => 7ff0000000000000 411db83913f88150
+#17: xvmsubadp *-(8000000000000000,0123214569900000,0123214569900000) AND *-(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmsubadp *-(404f000000000000,0123214569900000,8000000000000000) AND *-(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 7ff8000000000000
+#19: xvmsubadp *-(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND *-(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvmsubadp *-(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND *-(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvmsubadp *-(8000000000000000,7ff0000000000000,fff8000000000000) AND *-(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 fff0000000000000
+#22: xvmsubadp *-(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND *-(7ff0000000000000,7ff0000000000000,41232585a9900000) => fff0000000000000 7ff8000000000000
+#23: xvmsubadp *-(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND *-(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvmsubadp *-(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND *-(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvmsubadp *-(8000000000000000,fff8000000000000,0000000000000000) AND *-(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmsubadp *-(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND *-(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmsubadp *-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *-(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvmsubadp *-(fff0000000000000,fff8000000000000,7ff8000000000000) AND *-(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvmsubadp *-(8000000000000000,fff8000000000000,8008340000078000) AND *-(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 c2039f360cc502d2
+#30: xvmsubadp *-(41382511a2000000,41232585a9900000,3fd8000000000000) AND *-(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => c1348e0892350000 7fffffffffffffff
+#31: xvmsubadp *-(7ff8000000000000,7ff8000000000000,0018000000b77501) AND *-(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmsubmdp *-(3fd8000000000000,fff0000000000000,fff0000000000000) AND *-(404f000000000000,fff0000000000000,c0d0650f5a07b353) => 7ff8000000000000 fff0000000000000
+#1: xvmsubmdp *-(0018000000b77501,41232585a9900000,41382511a2000000) AND *-(7fe800000000051b,fff0000000000000,0000000000000000) => c1382511a2000000 fff0000000000000
+#2: xvmsubmdp *-(0123214569900000,fff0000000000000,0123214569900000) AND *-(0000000000000000,fff0000000000000,7ff0000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmsubmdp *-(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND *-(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmsubmdp *-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => 7ff0000000000000 7fffffffffffffff
+#5: xvmsubmdp *-(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND *-(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmsubmdp *-(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND *-(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 fff0000000000000
+#7: xvmsubmdp *-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND *-(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmsubmdp *-(404f000000000000,8000000000000000,fff0000000000000) AND *-(0018000000b77501,8000000000000000,c0d0650f5a07b353) => 7ff0000000000000 40d0650f5a07b353
+#9: xvmsubmdp *-(7fe800000000051b,8000000000000000,8000000000000000) AND *-(0123214569900000,8000000000000000,0000000000000000) => 0000000000000000 8000000000000000
+#10: xvmsubmdp *-(0000000000000000,8000000000000000,0123214569900000) AND *-(8000000000000000,8000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#11: xvmsubmdp *-(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND *-(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmsubmdp *-(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND *-(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvmsubmdp *-(7ff8000000000000,0000000000000000,8000000000000000) AND *-(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmsubmdp *-(8008340000078000,0000000000000000,0123214569900000) AND *-(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#15: xvmsubmdp *-(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND *-(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmsubmdp *-(0018000000b77501,0123214569900000,fff0000000000000) AND *-(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => 7ff0000000000000 411db83913f88150
+#17: xvmsubmdp *-(0123214569900000,0123214569900000,8000000000000000) AND *-(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmsubmdp *-(8000000000000000,0123214569900000,404f000000000000) AND *-(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 7ff8000000000000
+#19: xvmsubmdp *-(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND *-(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvmsubmdp *-(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND *-(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvmsubmdp *-(fff8000000000000,7ff0000000000000,8000000000000000) AND *-(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 fff0000000000000
+#22: xvmsubmdp *-(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND *-(41232585a9900000,7ff0000000000000,7ff0000000000000) => fff0000000000000 7ff8000000000000
+#23: xvmsubmdp *-(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND *-(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvmsubmdp *-(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND *-(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvmsubmdp *-(0000000000000000,fff8000000000000,8000000000000000) AND *-(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmsubmdp *-(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND *-(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmsubmdp *-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *-(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvmsubmdp *-(7ff8000000000000,fff8000000000000,fff0000000000000) AND *-(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvmsubmdp *-(8008340000078000,fff8000000000000,8000000000000000) AND *-(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 c2039f360cc502d2
+#30: xvmsubmdp *-(3fd8000000000000,41232585a9900000,41382511a2000000) AND *-(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => c1348e0892350000 7fffffffffffffff
+#31: xvmsubmdp *-(0018000000b77501,7ff8000000000000,7ff8000000000000) AND *-(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmsubasp *-(ff800000,ff800000,3ec00000) AND *-(c683287b,ff800000,42780000) AND *-(49c1288d,49192c2d,00000000) AND *-(00000000,ff800000,7f800000) => 7fc00000 ff800000 c9c1288d ff800000
+#1: xvmsubasp *-(00000000,ff800000,00000000) AND *-(7f800000,ff800000,00000000) AND *-(7fffffff,ff800000,80000000) AND *-(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmsubasp *-(ff800000,c683287b,ff800000) AND *-(c683287b,c683287b,7fffffff) AND *-(80000000,c683287b,ffffffff) AND *-(00000000,c683287b,7fc00000) => 7f800000 7fffffff ffffffff 7fc00000
+#3: xvmsubasp *-(00000000,c683287b,ffc00000) AND *-(7f800000,c683287b,80000000) AND *-(7fffffff,c683287b,c683287b) AND *-(7fc00000,c683287b,49192c2d) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvmsubasp *-(ff800000,80000000,7f800000) AND *-(c683287b,80000000,00000000) AND *-(80000000,80000000,00000000) AND *-(00000000,80000000,80000000) => 7fc00000 4683287b 00000000 00000000
+#5: xvmsubasp *-(00000000,80000000,7f800000) AND *-(7f800000,80000000,ff800000) AND *-(7fffffff,80000000,7fffffff) AND *-(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmsubasp *-(ff800000,00000000,7fc00000) AND *-(c683287b,00000000,ffc00000) AND *-(80000000,00000000,80000000) AND *-(00000000,00000000,c683287b) => 7fc00000 ffc00000 00000000 80000000
+#7: xvmsubasp *-(00000000,00000000,00000000) AND *-(7f800000,00000000,7f800000) AND *-(7fffffff,00000000,00000000) AND *-(7fc00000,00000000,00000000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmsubasp *-(ff800000,00000000,80000000) AND *-(c683287b,00000000,7f800000) AND *-(80000000,00000000,ff800000) AND *-(00000000,00000000,7fffffff) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvmsubasp *-(42780000,00000000,ffffffff) AND *-(7f800000,00000000,7fc00000) AND *-(7fffffff,00000000,ffc00000) AND *-(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmsubasp *-(ff800000,7f800000,42780000) AND *-(c683287b,7f800000,00000000) AND *-(80000000,7f800000,7f800000) AND *-(00000000,7f800000,00000000) => 7f800000 7fc00000 7f800000 7fc00000
+#11: xvmsubasp *-(00000000,7f800000,00000000) AND *-(7f800000,7f800000,80000000) AND *-(7fffffff,7f800000,7f800000) AND *-(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmsubasp *-(ff800000,ffffffff,7fffffff) AND *-(c683287b,ffffffff,ffffffff) AND *-(80000000,ffc00000,7fc00000) AND *-(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmsubasp *-(00000000,ffffffff,3ec00000) AND *-(7f800000,ffffffff,42780000) AND *-(7fffffff,ffffffff,00000000) AND *-(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmsubasp *-(ff800000,ffc00000,00000000) AND *-(c683287b,ffc00000,00000000) AND *-(80000000,ffc00000,80000000) AND *-(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmsubasp *-(49c1288d,49192c2d,ff800000) AND *-(7fc00000,7fffffff,7fffffff) AND *-(7fc00000,7fc00000,ffffffff) AND *-(ffc00000,7fc00000,7fc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvmsubmsp *-(3ec00000,ff800000,ff800000) AND *-(42780000,ff800000,c683287b) AND *-(00000000,49192c2d,49c1288d) AND *-(7f800000,ff800000,00000000) => 7fc00000 ff800000 c9c1288d ff800000
+#1: xvmsubmsp *-(00000000,ff800000,00000000) AND *-(00000000,ff800000,7f800000) AND *-(80000000,ff800000,7fffffff) AND *-(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmsubmsp *-(ff800000,c683287b,ff800000) AND *-(7fffffff,c683287b,c683287b) AND *-(ffffffff,c683287b,80000000) AND *-(7fc00000,c683287b,00000000) => 7f800000 7fffffff ffffffff 7fc00000
+#3: xvmsubmsp *-(ffc00000,c683287b,00000000) AND *-(80000000,c683287b,7f800000) AND *-(c683287b,c683287b,7fffffff) AND *-(49192c2d,c683287b,7fc00000) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvmsubmsp *-(7f800000,80000000,ff800000) AND *-(00000000,80000000,c683287b) AND *-(00000000,80000000,80000000) AND *-(80000000,80000000,00000000) => 7fc00000 4683287b 00000000 00000000
+#5: xvmsubmsp *-(7f800000,80000000,00000000) AND *-(ff800000,80000000,7f800000) AND *-(7fffffff,80000000,7fffffff) AND *-(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmsubmsp *-(7fc00000,00000000,ff800000) AND *-(ffc00000,00000000,c683287b) AND *-(80000000,00000000,80000000) AND *-(c683287b,00000000,00000000) => 7fc00000 ffc00000 00000000 80000000
+#7: xvmsubmsp *-(00000000,00000000,00000000) AND *-(7f800000,00000000,7f800000) AND *-(00000000,00000000,7fffffff) AND *-(00000000,00000000,7fc00000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmsubmsp *-(80000000,00000000,ff800000) AND *-(7f800000,00000000,c683287b) AND *-(ff800000,00000000,80000000) AND *-(7fffffff,00000000,00000000) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvmsubmsp *-(ffffffff,00000000,42780000) AND *-(7fc00000,00000000,7f800000) AND *-(ffc00000,00000000,7fffffff) AND *-(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmsubmsp *-(42780000,7f800000,ff800000) AND *-(00000000,7f800000,c683287b) AND *-(7f800000,7f800000,80000000) AND *-(00000000,7f800000,00000000) => 7f800000 7fc00000 7f800000 7fc00000
+#11: xvmsubmsp *-(00000000,7f800000,00000000) AND *-(80000000,7f800000,7f800000) AND *-(7f800000,7f800000,7fffffff) AND *-(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmsubmsp *-(7fffffff,ffffffff,ff800000) AND *-(ffffffff,ffffffff,c683287b) AND *-(7fc00000,ffc00000,80000000) AND *-(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmsubmsp *-(3ec00000,ffffffff,00000000) AND *-(42780000,ffffffff,7f800000) AND *-(00000000,ffffffff,7fffffff) AND *-(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmsubmsp *-(00000000,ffc00000,ff800000) AND *-(00000000,ffc00000,c683287b) AND *-(80000000,ffc00000,80000000) AND *-(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmsubmsp *-(ff800000,49192c2d,49c1288d) AND *-(7fffffff,7fffffff,7fc00000) AND *-(ffffffff,7fc00000,7fc00000) AND *-(7fc00000,7fc00000,ffc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmsubadp !*-(fff0000000000000,fff0000000000000,3fd8000000000000) AND !*-(c0d0650f5a07b353,fff0000000000000,404f000000000000) => 7ff8000000000000 7ff0000000000000
+#1: xvnmsubadp !*-(41382511a2000000,41232585a9900000,0018000000b77501) AND !*-(0000000000000000,fff0000000000000,7fe800000000051b) => 41382511a2000000 7ff0000000000000
+#2: xvnmsubadp !*-(0123214569900000,fff0000000000000,0123214569900000) AND !*-(7ff0000000000000,fff0000000000000,0000000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmsubadp !*-(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND !*-(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmsubadp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => fff0000000000000 7fffffffffffffff
+#5: xvnmsubadp !*-(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND !*-(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmsubadp !*-(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND !*-(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 7ff0000000000000
+#7: xvnmsubadp !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND !*-(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmsubadp !*-(fff0000000000000,8000000000000000,404f000000000000) AND !*-(c0d0650f5a07b353,8000000000000000,0018000000b77501) => fff0000000000000 c0d0650f5a07b353
+#9: xvnmsubadp !*-(8000000000000000,8000000000000000,7fe800000000051b) AND !*-(0000000000000000,8000000000000000,0123214569900000) => 8000000000000000 0000000000000000
+#10: xvnmsubadp !*-(0123214569900000,8000000000000000,0000000000000000) AND !*-(7ff0000000000000,8000000000000000,8000000000000000) => 0123214569900000 7ff0000000000000
+#11: xvnmsubadp !*-(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND !*-(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmsubadp !*-(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND !*-(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmsubadp !*-(8000000000000000,0000000000000000,7ff8000000000000) AND !*-(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmsubadp !*-(0123214569900000,0000000000000000,8008340000078000) AND !*-(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 0123214569900000 7ff0000000000000
+#15: xvnmsubadp !*-(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND !*-(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmsubadp !*-(fff0000000000000,0123214569900000,0018000000b77501) AND !*-(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => fff0000000000000 c11db83913f88150
+#17: xvnmsubadp !*-(8000000000000000,0123214569900000,0123214569900000) AND !*-(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmsubadp !*-(404f000000000000,0123214569900000,8000000000000000) AND !*-(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff8000000000000
+#19: xvnmsubadp !*-(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND !*-(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmsubadp !*-(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND !*-(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvnmsubadp !*-(8000000000000000,7ff0000000000000,fff8000000000000) AND !*-(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 7ff0000000000000
+#22: xvnmsubadp !*-(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND !*-(7ff0000000000000,7ff0000000000000,41232585a9900000) => 7ff0000000000000 7ff8000000000000
+#23: xvnmsubadp !*-(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND !*-(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmsubadp !*-(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND !*-(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvnmsubadp !*-(8000000000000000,fff8000000000000,0000000000000000) AND !*-(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmsubadp !*-(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND !*-(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmsubadp !*-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*-(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvnmsubadp !*-(fff0000000000000,fff8000000000000,7ff8000000000000) AND !*-(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvnmsubadp !*-(8000000000000000,fff8000000000000,8008340000078000) AND !*-(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 42039f360cc502d2
+#30: xvnmsubadp !*-(41382511a2000000,41232585a9900000,3fd8000000000000) AND !*-(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => 41348e0892350000 7fffffffffffffff
+#31: xvnmsubadp !*-(7ff8000000000000,7ff8000000000000,0018000000b77501) AND !*-(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmsubmdp !*-(3fd8000000000000,fff0000000000000,fff0000000000000) AND !*-(404f000000000000,fff0000000000000,c0d0650f5a07b353) => 7ff8000000000000 7ff0000000000000
+#1: xvnmsubmdp !*-(0018000000b77501,41232585a9900000,41382511a2000000) AND !*-(7fe800000000051b,fff0000000000000,0000000000000000) => 41382511a2000000 7ff0000000000000
+#2: xvnmsubmdp !*-(0123214569900000,fff0000000000000,0123214569900000) AND !*-(0000000000000000,fff0000000000000,7ff0000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmsubmdp !*-(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND !*-(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmsubmdp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => fff0000000000000 7fffffffffffffff
+#5: xvnmsubmdp !*-(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND !*-(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmsubmdp !*-(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND !*-(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 7ff0000000000000
+#7: xvnmsubmdp !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND !*-(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmsubmdp !*-(404f000000000000,8000000000000000,fff0000000000000) AND !*-(0018000000b77501,8000000000000000,c0d0650f5a07b353) => fff0000000000000 c0d0650f5a07b353
+#9: xvnmsubmdp !*-(7fe800000000051b,8000000000000000,8000000000000000) AND !*-(0123214569900000,8000000000000000,0000000000000000) => 8000000000000000 0000000000000000
+#10: xvnmsubmdp !*-(0000000000000000,8000000000000000,0123214569900000) AND !*-(8000000000000000,8000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#11: xvnmsubmdp !*-(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND !*-(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmsubmdp !*-(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND !*-(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmsubmdp !*-(7ff8000000000000,0000000000000000,8000000000000000) AND !*-(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmsubmdp !*-(8008340000078000,0000000000000000,0123214569900000) AND !*-(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#15: xvnmsubmdp !*-(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND !*-(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmsubmdp !*-(0018000000b77501,0123214569900000,fff0000000000000) AND !*-(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => fff0000000000000 c11db83913f88150
+#17: xvnmsubmdp !*-(0123214569900000,0123214569900000,8000000000000000) AND !*-(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmsubmdp !*-(8000000000000000,0123214569900000,404f000000000000) AND !*-(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff8000000000000
+#19: xvnmsubmdp !*-(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND !*-(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmsubmdp !*-(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND !*-(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvnmsubmdp !*-(fff8000000000000,7ff0000000000000,8000000000000000) AND !*-(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 7ff0000000000000
+#22: xvnmsubmdp !*-(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND !*-(41232585a9900000,7ff0000000000000,7ff0000000000000) => 7ff0000000000000 7ff8000000000000
+#23: xvnmsubmdp !*-(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND !*-(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmsubmdp !*-(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND !*-(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvnmsubmdp !*-(0000000000000000,fff8000000000000,8000000000000000) AND !*-(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmsubmdp !*-(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND !*-(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmsubmdp !*-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*-(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvnmsubmdp !*-(7ff8000000000000,fff8000000000000,fff0000000000000) AND !*-(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvnmsubmdp !*-(8008340000078000,fff8000000000000,8000000000000000) AND !*-(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 42039f360cc502d2
+#30: xvnmsubmdp !*-(3fd8000000000000,41232585a9900000,41382511a2000000) AND !*-(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => 41348e0892350000 7fffffffffffffff
+#31: xvnmsubmdp !*-(0018000000b77501,7ff8000000000000,7ff8000000000000) AND !*-(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmsubasp !*-(ff800000,ff800000,3ec00000) AND !*-(c683287b,ff800000,42780000) AND !*-(49c1288d,49192c2d,00000000) AND !*-(00000000,ff800000,7f800000) => 7fc00000 7f800000 49c1288d 7f800000
+#1: xvnmsubasp !*-(00000000,ff800000,00000000) AND !*-(7f800000,ff800000,00000000) AND !*-(7fffffff,ff800000,80000000) AND !*-(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmsubasp !*-(ff800000,c683287b,ff800000) AND !*-(c683287b,c683287b,7fffffff) AND !*-(80000000,c683287b,ffffffff) AND !*-(00000000,c683287b,7fc00000) => ff800000 7fffffff ffffffff 7fc00000
+#3: xvnmsubasp !*-(00000000,c683287b,ffc00000) AND !*-(7f800000,c683287b,80000000) AND !*-(7fffffff,c683287b,c683287b) AND !*-(7fc00000,c683287b,49192c2d) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvnmsubasp !*-(ff800000,80000000,7f800000) AND !*-(c683287b,80000000,00000000) AND !*-(80000000,80000000,00000000) AND !*-(00000000,80000000,80000000) => 7fc00000 c683287b 80000000 80000000
+#5: xvnmsubasp !*-(00000000,80000000,7f800000) AND !*-(7f800000,80000000,ff800000) AND !*-(7fffffff,80000000,7fffffff) AND !*-(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmsubasp !*-(ff800000,00000000,7fc00000) AND !*-(c683287b,00000000,ffc00000) AND !*-(80000000,00000000,80000000) AND !*-(00000000,00000000,c683287b) => 7fc00000 ffc00000 80000000 00000000
+#7: xvnmsubasp !*-(00000000,00000000,00000000) AND !*-(7f800000,00000000,7f800000) AND !*-(7fffffff,00000000,00000000) AND !*-(7fc00000,00000000,00000000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmsubasp !*-(ff800000,00000000,80000000) AND !*-(c683287b,00000000,7f800000) AND !*-(80000000,00000000,ff800000) AND !*-(00000000,00000000,7fffffff) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvnmsubasp !*-(42780000,00000000,ffffffff) AND !*-(7f800000,00000000,7fc00000) AND !*-(7fffffff,00000000,ffc00000) AND !*-(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmsubasp !*-(ff800000,7f800000,42780000) AND !*-(c683287b,7f800000,00000000) AND !*-(80000000,7f800000,7f800000) AND !*-(00000000,7f800000,00000000) => ff800000 7fc00000 ff800000 7fc00000
+#11: xvnmsubasp !*-(00000000,7f800000,00000000) AND !*-(7f800000,7f800000,80000000) AND !*-(7fffffff,7f800000,7f800000) AND !*-(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmsubasp !*-(ff800000,ffffffff,7fffffff) AND !*-(c683287b,ffffffff,ffffffff) AND !*-(80000000,ffc00000,7fc00000) AND !*-(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmsubasp !*-(00000000,ffffffff,3ec00000) AND !*-(7f800000,ffffffff,42780000) AND !*-(7fffffff,ffffffff,00000000) AND !*-(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmsubasp !*-(ff800000,ffc00000,00000000) AND !*-(c683287b,ffc00000,00000000) AND !*-(80000000,ffc00000,80000000) AND !*-(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmsubasp !*-(49c1288d,49192c2d,ff800000) AND !*-(7fc00000,7fffffff,7fffffff) AND !*-(7fc00000,7fc00000,ffffffff) AND !*-(ffc00000,7fc00000,7fc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmsubmsp !*-(3ec00000,ff800000,ff800000) AND !*-(42780000,ff800000,c683287b) AND !*-(00000000,49192c2d,49c1288d) AND !*-(7f800000,ff800000,00000000) => 7fc00000 7f800000 49c1288d 7f800000
+#1: xvnmsubmsp !*-(00000000,ff800000,00000000) AND !*-(00000000,ff800000,7f800000) AND !*-(80000000,ff800000,7fffffff) AND !*-(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmsubmsp !*-(ff800000,c683287b,ff800000) AND !*-(7fffffff,c683287b,c683287b) AND !*-(ffffffff,c683287b,80000000) AND !*-(7fc00000,c683287b,00000000) => ff800000 7fffffff ffffffff 7fc00000
+#3: xvnmsubmsp !*-(ffc00000,c683287b,00000000) AND !*-(80000000,c683287b,7f800000) AND !*-(c683287b,c683287b,7fffffff) AND !*-(49192c2d,c683287b,7fc00000) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvnmsubmsp !*-(7f800000,80000000,ff800000) AND !*-(00000000,80000000,c683287b) AND !*-(00000000,80000000,80000000) AND !*-(80000000,80000000,00000000) => 7fc00000 c683287b 80000000 80000000
+#5: xvnmsubmsp !*-(7f800000,80000000,00000000) AND !*-(ff800000,80000000,7f800000) AND !*-(7fffffff,80000000,7fffffff) AND !*-(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmsubmsp !*-(7fc00000,00000000,ff800000) AND !*-(ffc00000,00000000,c683287b) AND !*-(80000000,00000000,80000000) AND !*-(c683287b,00000000,00000000) => 7fc00000 ffc00000 80000000 00000000
+#7: xvnmsubmsp !*-(00000000,00000000,00000000) AND !*-(7f800000,00000000,7f800000) AND !*-(00000000,00000000,7fffffff) AND !*-(00000000,00000000,7fc00000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmsubmsp !*-(80000000,00000000,ff800000) AND !*-(7f800000,00000000,c683287b) AND !*-(ff800000,00000000,80000000) AND !*-(7fffffff,00000000,00000000) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvnmsubmsp !*-(ffffffff,00000000,42780000) AND !*-(7fc00000,00000000,7f800000) AND !*-(ffc00000,00000000,7fffffff) AND !*-(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmsubmsp !*-(42780000,7f800000,ff800000) AND !*-(00000000,7f800000,c683287b) AND !*-(7f800000,7f800000,80000000) AND !*-(00000000,7f800000,00000000) => ff800000 7fc00000 ff800000 7fc00000
+#11: xvnmsubmsp !*-(00000000,7f800000,00000000) AND !*-(80000000,7f800000,7f800000) AND !*-(7f800000,7f800000,7fffffff) AND !*-(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmsubmsp !*-(7fffffff,ffffffff,ff800000) AND !*-(ffffffff,ffffffff,c683287b) AND !*-(7fc00000,ffc00000,80000000) AND !*-(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmsubmsp !*-(3ec00000,ffffffff,00000000) AND !*-(42780000,ffffffff,7f800000) AND !*-(00000000,ffffffff,7fffffff) AND !*-(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmsubmsp !*-(00000000,ffc00000,ff800000) AND !*-(00000000,ffc00000,c683287b) AND !*-(80000000,ffc00000,80000000) AND !*-(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmsubmsp !*-(ff800000,49192c2d,49c1288d) AND !*-(7fffffff,7fffffff,7fc00000) AND !*-(ffffffff,7fc00000,7fc00000) AND !*-(7fc00000,7fc00000,ffc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+
+Test scalar floating point arithmetic instructions
+#0: xssqrtdp 3fd8000000000000 => 3fe3988e1409212e
+#1: xssqrtdp 404f000000000000 => 401f7efbeb8d4f12
+#2: xssqrtdp 0018000000b77501 => 2003988e14540690
+#3: xssqrtdp 7fe800000000051b => 5febb67ae8584f9d
+#4: xssqrtdp 0123214569900000 => 2088bde98d60ebe6
+#5: xssqrtdp 0000000000000000 => 0000000000000000
+#6: xssqrtdp 8000000000000000 => 8000000000000000
+#7: xssqrtdp 7ff0000000000000 => 7ff0000000000000
+#8: xssqrtdp fff0000000000000 => 7ff8000000000000
+#9: xssqrtdp 7ff7ffffffffffff => 7fffffffffffffff
+#10: xssqrtdp fff7ffffffffffff => ffffffffffffffff
+#11: xssqrtdp 7ff8000000000000 => 7ff8000000000000
+#12: xssqrtdp fff8000000000000 => fff8000000000000
+#13: xssqrtdp 8008340000078000 => 7ff8000000000000
+#14: xssqrtdp c0d0650f5a07b353 => 7ff8000000000000
+#15: xssqrtdp 41232585a9900000 => 4088c0a9258a4a8b
+#16: xssqrtdp 41382511a2000000 => 4093a7aa60f34e85
+
+#0: xsrdpim 3fd8000000000000 => 0000000000000000
+#1: xsrdpim 404f000000000000 => 404f000000000000
+#2: xsrdpim 0018000000b77501 => 0000000000000000
+#3: xsrdpim 7fe800000000051b => 7fe800000000051b
+#4: xsrdpim 0123214569900000 => 0000000000000000
+#5: xsrdpim 0000000000000000 => 0000000000000000
+#6: xsrdpim 8000000000000000 => 8000000000000000
+#7: xsrdpim 7ff0000000000000 => 7ff0000000000000
+#8: xsrdpim fff0000000000000 => fff0000000000000
+#9: xsrdpim 7ff7ffffffffffff => 7fffffffffffffff
+#10: xsrdpim fff7ffffffffffff => ffffffffffffffff
+#11: xsrdpim 7ff8000000000000 => 7ff8000000000000
+#12: xsrdpim fff8000000000000 => fff8000000000000
+#13: xsrdpim 8008340000078000 => bff0000000000000
+#14: xsrdpim c0d0650f5a07b353 => c0d0654000000000
+#15: xsrdpim 41232585a9900000 => 4123258400000000
+#16: xsrdpim 41382511a2000000 => 4138251100000000
+
+#0: xsrdpip 3fd8000000000000 => 3ff0000000000000
+#1: xsrdpip 404f000000000000 => 404f000000000000
+#2: xsrdpip 0018000000b77501 => 3ff0000000000000
+#3: xsrdpip 7fe800000000051b => 7fe800000000051b
+#4: xsrdpip 0123214569900000 => 3ff0000000000000
+#5: xsrdpip 0000000000000000 => 0000000000000000
+#6: xsrdpip 8000000000000000 => 8000000000000000
+#7: xsrdpip 7ff0000000000000 => 7ff0000000000000
+#8: xsrdpip fff0000000000000 => fff0000000000000
+#9: xsrdpip 7ff7ffffffffffff => 7fffffffffffffff
+#10: xsrdpip fff7ffffffffffff => ffffffffffffffff
+#11: xsrdpip 7ff8000000000000 => 7ff8000000000000
+#12: xsrdpip fff8000000000000 => fff8000000000000
+#13: xsrdpip 8008340000078000 => 8000000000000000
+#14: xsrdpip c0d0650f5a07b353 => c0d0650000000000
+#15: xsrdpip 41232585a9900000 => 4123258600000000
+#16: xsrdpip 41382511a2000000 => 4138251200000000
+
+#0: xstdivdp fff0000000000000,fff0000000000000 => cr e
+#1: xstdivdp fff0000000000000,c0d0650f5a07b353 => cr e
+#2: xstdivdp 41232585a9900000,41382511a2000000 => cr 8
+#3: xstdivdp fff0000000000000,0000000000000000 => cr e
+#4: xstdivdp fff0000000000000,0123214569900000 => cr e
+#5: xstdivdp fff0000000000000,7ff0000000000000 => cr e
+#6: xstdivdp fff0000000000000,7ff7ffffffffffff => cr e
+#7: xstdivdp fff0000000000000,7ff8000000000000 => cr e
+#8: xstdivdp c0d0650f5a07b353,fff0000000000000 => cr e
+#9: xstdivdp c0d0650f5a07b353,c0d0650f5a07b353 => cr 8
+#10: xstdivdp c0d0650f5a07b353,8000000000000000 => cr e
+#11: xstdivdp c0d0650f5a07b353,0000000000000000 => cr e
+#12: xstdivdp c0d0650f5a07b353,0123214569900000 => cr 8
+#13: xstdivdp c0d0650f5a07b353,7ff0000000000000 => cr e
+#14: xstdivdp c0d0650f5a07b353,7ff7ffffffffffff => cr a
+#15: xstdivdp c0d0650f5a07b353,7ff8000000000000 => cr a
+#16: xstdivdp 8000000000000000,fff0000000000000 => cr e
+#17: xstdivdp 8000000000000000,c0d0650f5a07b353 => cr 8
+#18: xstdivdp 8000000000000000,8000000000000000 => cr e
+#19: xstdivdp 8000000000000000,0000000000000000 => cr e
+#20: xstdivdp 8000000000000000,0123214569900000 => cr 8
+#21: xstdivdp 8000000000000000,7ff0000000000000 => cr e
+#22: xstdivdp 8000000000000000,7ff7ffffffffffff => cr a
+#23: xstdivdp 8000000000000000,7ff8000000000000 => cr a
+#24: xstdivdp 0000000000000000,fff0000000000000 => cr e
+#25: xstdivdp 0000000000000000,c0d0650f5a07b353 => cr 8
+#26: xstdivdp 0000000000000000,8000000000000000 => cr e
+#27: xstdivdp 0000000000000000,0000000000000000 => cr e
+#28: xstdivdp 0000000000000000,0123214569900000 => cr 8
+#29: xstdivdp 0000000000000000,7ff0000000000000 => cr e
+#30: xstdivdp 0000000000000000,7ff7ffffffffffff => cr a
+#31: xstdivdp 0000000000000000,7ff8000000000000 => cr a
+#32: xstdivdp 0123214569900000,fff0000000000000 => cr e
+#33: xstdivdp 0123214569900000,c0d0650f5a07b353 => cr a
+#34: xstdivdp 0123214569900000,8000000000000000 => cr e
+#35: xstdivdp 0123214569900000,0000000000000000 => cr e
+#36: xstdivdp 0123214569900000,404f000000000000 => cr a
+#37: xstdivdp 0123214569900000,7ff0000000000000 => cr e
+#38: xstdivdp 0123214569900000,7ff7ffffffffffff => cr a
+#39: xstdivdp 0123214569900000,7ff8000000000000 => cr a
+#40: xstdivdp 7ff0000000000000,fff0000000000000 => cr e
+#41: xstdivdp 7ff0000000000000,c0d0650f5a07b353 => cr e
+#42: xstdivdp 7ff0000000000000,8000000000000000 => cr e
+#43: xstdivdp 7ff0000000000000,0000000000000000 => cr e
+#44: xstdivdp 7ff0000000000000,0123214569900000 => cr e
+#45: xstdivdp 7ff0000000000000,7ff0000000000000 => cr e
+#46: xstdivdp 7ff0000000000000,7ff7ffffffffffff => cr e
+#47: xstdivdp 7ff0000000000000,7ff8000000000000 => cr e
+#48: xstdivdp fff7ffffffffffff,fff0000000000000 => cr e
+#49: xstdivdp fff7ffffffffffff,c0d0650f5a07b353 => cr a
+#50: xstdivdp fff8000000000000,8000000000000000 => cr e
+#51: xstdivdp fff8000000000000,0000000000000000 => cr e
+#52: xstdivdp fff7ffffffffffff,0123214569900000 => cr a
+#53: xstdivdp fff7ffffffffffff,7ff0000000000000 => cr e
+#54: xstdivdp fff7ffffffffffff,7ff7ffffffffffff => cr a
+#55: xstdivdp fff7ffffffffffff,7ff8000000000000 => cr a
+#56: xstdivdp fff8000000000000,fff0000000000000 => cr e
+#57: xstdivdp fff8000000000000,c0d0650f5a07b353 => cr a
+#58: xstdivdp fff8000000000000,8000000000000000 => cr e
+#59: xstdivdp 41232585a9900000,41382511a2000000 => cr 8
+#60: xstdivdp 41232585a9900000,41382511a2000000 => cr 8
+#61: xstdivdp 7ff7ffffffffffff,7ff8000000000000 => cr a
+#62: xstdivdp 7ff8000000000000,7ff8000000000000 => cr a
+#63: xstdivdp 7ff8000000000000,fff8000000000000 => cr a
+
+#0: xsmaxdp fff0000000000000,fff0000000000000 => fff0000000000000
+#1: xsmaxdp fff0000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#2: xsmaxdp 41232585a9900000,41382511a2000000 => 41382511a2000000
+#3: xsmaxdp fff0000000000000,0000000000000000 => 0000000000000000
+#4: xsmaxdp fff0000000000000,0123214569900000 => 0123214569900000
+#5: xsmaxdp fff0000000000000,7ff0000000000000 => 7ff0000000000000
+#6: xsmaxdp fff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#7: xsmaxdp fff0000000000000,7ff8000000000000 => fff0000000000000
+#8: xsmaxdp c0d0650f5a07b353,fff0000000000000 => c0d0650f5a07b353
+#9: xsmaxdp c0d0650f5a07b353,c0d0650f5a07b353 => c0d0650f5a07b353
+#10: xsmaxdp c0d0650f5a07b353,8000000000000000 => 8000000000000000
+#11: xsmaxdp c0d0650f5a07b353,0000000000000000 => 0000000000000000
+#12: xsmaxdp c0d0650f5a07b353,0123214569900000 => 0123214569900000
+#13: xsmaxdp c0d0650f5a07b353,7ff0000000000000 => 7ff0000000000000
+#14: xsmaxdp c0d0650f5a07b353,7ff7ffffffffffff => 7fffffffffffffff
+#15: xsmaxdp c0d0650f5a07b353,7ff8000000000000 => c0d0650f5a07b353
+#16: xsmaxdp 8000000000000000,fff0000000000000 => 8000000000000000
+#17: xsmaxdp 8000000000000000,c0d0650f5a07b353 => 8000000000000000
+#18: xsmaxdp 8000000000000000,8000000000000000 => 8000000000000000
+#19: xsmaxdp 8000000000000000,0000000000000000 => 0000000000000000
+#20: xsmaxdp 8000000000000000,0123214569900000 => 0123214569900000
+#21: xsmaxdp 8000000000000000,7ff0000000000000 => 7ff0000000000000
+#22: xsmaxdp 8000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#23: xsmaxdp 8000000000000000,7ff8000000000000 => 8000000000000000
+#24: xsmaxdp 0000000000000000,fff0000000000000 => 0000000000000000
+#25: xsmaxdp 0000000000000000,c0d0650f5a07b353 => 0000000000000000
+#26: xsmaxdp 0000000000000000,8000000000000000 => 0000000000000000
+#27: xsmaxdp 0000000000000000,0000000000000000 => 0000000000000000
+#28: xsmaxdp 0000000000000000,0123214569900000 => 0123214569900000
+#29: xsmaxdp 0000000000000000,7ff0000000000000 => 7ff0000000000000
+#30: xsmaxdp 0000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#31: xsmaxdp 0000000000000000,7ff8000000000000 => 0000000000000000
+#32: xsmaxdp 0123214569900000,fff0000000000000 => 0123214569900000
+#33: xsmaxdp 0123214569900000,c0d0650f5a07b353 => 0123214569900000
+#34: xsmaxdp 0123214569900000,8000000000000000 => 0123214569900000
+#35: xsmaxdp 0123214569900000,0000000000000000 => 0123214569900000
+#36: xsmaxdp 0123214569900000,404f000000000000 => 404f000000000000
+#37: xsmaxdp 0123214569900000,7ff0000000000000 => 7ff0000000000000
+#38: xsmaxdp 0123214569900000,7ff7ffffffffffff => 7fffffffffffffff
+#39: xsmaxdp 0123214569900000,7ff8000000000000 => 0123214569900000
+#40: xsmaxdp 7ff0000000000000,fff0000000000000 => 7ff0000000000000
+#41: xsmaxdp 7ff0000000000000,c0d0650f5a07b353 => 7ff0000000000000
+#42: xsmaxdp 7ff0000000000000,8000000000000000 => 7ff0000000000000
+#43: xsmaxdp 7ff0000000000000,0000000000000000 => 7ff0000000000000
+#44: xsmaxdp 7ff0000000000000,0123214569900000 => 7ff0000000000000
+#45: xsmaxdp 7ff0000000000000,7ff0000000000000 => 7ff0000000000000
+#46: xsmaxdp 7ff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#47: xsmaxdp 7ff0000000000000,7ff8000000000000 => 7ff0000000000000
+#48: xsmaxdp fff7ffffffffffff,fff0000000000000 => ffffffffffffffff
+#49: xsmaxdp fff7ffffffffffff,c0d0650f5a07b353 => ffffffffffffffff
+#50: xsmaxdp fff8000000000000,8000000000000000 => 8000000000000000
+#51: xsmaxdp fff8000000000000,0000000000000000 => 0000000000000000
+#52: xsmaxdp fff7ffffffffffff,0123214569900000 => ffffffffffffffff
+#53: xsmaxdp fff7ffffffffffff,7ff0000000000000 => ffffffffffffffff
+#54: xsmaxdp fff7ffffffffffff,7ff7ffffffffffff => ffffffffffffffff
+#55: xsmaxdp fff7ffffffffffff,7ff8000000000000 => ffffffffffffffff
+#56: xsmaxdp fff8000000000000,fff0000000000000 => fff0000000000000
+#57: xsmaxdp fff8000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#58: xsmaxdp fff8000000000000,8000000000000000 => 8000000000000000
+#59: xsmaxdp 41232585a9900000,41382511a2000000 => 41382511a2000000
+#60: xsmaxdp 41232585a9900000,41382511a2000000 => 41382511a2000000
+#61: xsmaxdp 7ff7ffffffffffff,7ff8000000000000 => 7fffffffffffffff
+#62: xsmaxdp 7ff8000000000000,7ff8000000000000 => 7ff8000000000000
+#63: xsmaxdp 7ff8000000000000,fff8000000000000 => 7ff8000000000000
+
+#0: xsmindp fff0000000000000,fff0000000000000 => fff0000000000000
+#1: xsmindp fff0000000000000,c0d0650f5a07b353 => fff0000000000000
+#2: xsmindp 41232585a9900000,41382511a2000000 => 41232585a9900000
+#3: xsmindp fff0000000000000,0000000000000000 => fff0000000000000
+#4: xsmindp fff0000000000000,0123214569900000 => fff0000000000000
+#5: xsmindp fff0000000000000,7ff0000000000000 => fff0000000000000
+#6: xsmindp fff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#7: xsmindp fff0000000000000,7ff8000000000000 => fff0000000000000
+#8: xsmindp c0d0650f5a07b353,fff0000000000000 => fff0000000000000
+#9: xsmindp c0d0650f5a07b353,c0d0650f5a07b353 => c0d0650f5a07b353
+#10: xsmindp c0d0650f5a07b353,8000000000000000 => c0d0650f5a07b353
+#11: xsmindp c0d0650f5a07b353,0000000000000000 => c0d0650f5a07b353
+#12: xsmindp c0d0650f5a07b353,0123214569900000 => c0d0650f5a07b353
+#13: xsmindp c0d0650f5a07b353,7ff0000000000000 => c0d0650f5a07b353
+#14: xsmindp c0d0650f5a07b353,7ff7ffffffffffff => 7fffffffffffffff
+#15: xsmindp c0d0650f5a07b353,7ff8000000000000 => c0d0650f5a07b353
+#16: xsmindp 8000000000000000,fff0000000000000 => fff0000000000000
+#17: xsmindp 8000000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#18: xsmindp 8000000000000000,8000000000000000 => 8000000000000000
+#19: xsmindp 8000000000000000,0000000000000000 => 8000000000000000
+#20: xsmindp 8000000000000000,0123214569900000 => 8000000000000000
+#21: xsmindp 8000000000000000,7ff0000000000000 => 8000000000000000
+#22: xsmindp 8000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#23: xsmindp 8000000000000000,7ff8000000000000 => 8000000000000000
+#24: xsmindp 0000000000000000,fff0000000000000 => fff0000000000000
+#25: xsmindp 0000000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#26: xsmindp 0000000000000000,8000000000000000 => 8000000000000000
+#27: xsmindp 0000000000000000,0000000000000000 => 0000000000000000
+#28: xsmindp 0000000000000000,0123214569900000 => 0000000000000000
+#29: xsmindp 0000000000000000,7ff0000000000000 => 0000000000000000
+#30: xsmindp 0000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#31: xsmindp 0000000000000000,7ff8000000000000 => 0000000000000000
+#32: xsmindp 0123214569900000,fff0000000000000 => fff0000000000000
+#33: xsmindp 0123214569900000,c0d0650f5a07b353 => c0d0650f5a07b353
+#34: xsmindp 0123214569900000,8000000000000000 => 8000000000000000
+#35: xsmindp 0123214569900000,0000000000000000 => 0000000000000000
+#36: xsmindp 0123214569900000,404f000000000000 => 0123214569900000
+#37: xsmindp 0123214569900000,7ff0000000000000 => 0123214569900000
+#38: xsmindp 0123214569900000,7ff7ffffffffffff => 7fffffffffffffff
+#39: xsmindp 0123214569900000,7ff8000000000000 => 0123214569900000
+#40: xsmindp 7ff0000000000000,fff0000000000000 => fff0000000000000
+#41: xsmindp 7ff0000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#42: xsmindp 7ff0000000000000,8000000000000000 => 8000000000000000
+#43: xsmindp 7ff0000000000000,0000000000000000 => 0000000000000000
+#44: xsmindp 7ff0000000000000,0123214569900000 => 0123214569900000
+#45: xsmindp 7ff0000000000000,7ff0000000000000 => 7ff0000000000000
+#46: xsmindp 7ff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#47: xsmindp 7ff0000000000000,7ff8000000000000 => 7ff0000000000000
+#48: xsmindp fff7ffffffffffff,fff0000000000000 => ffffffffffffffff
+#49: xsmindp fff7ffffffffffff,c0d0650f5a07b353 => ffffffffffffffff
+#50: xsmindp fff8000000000000,8000000000000000 => 8000000000000000
+#51: xsmindp fff8000000000000,0000000000000000 => 0000000000000000
+#52: xsmindp fff7ffffffffffff,0123214569900000 => ffffffffffffffff
+#53: xsmindp fff7ffffffffffff,7ff0000000000000 => ffffffffffffffff
+#54: xsmindp fff7ffffffffffff,7ff7ffffffffffff => ffffffffffffffff
+#55: xsmindp fff7ffffffffffff,7ff8000000000000 => ffffffffffffffff
+#56: xsmindp fff8000000000000,fff0000000000000 => fff0000000000000
+#57: xsmindp fff8000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#58: xsmindp fff8000000000000,8000000000000000 => 8000000000000000
+#59: xsmindp 41232585a9900000,41382511a2000000 => 41232585a9900000
+#60: xsmindp 41232585a9900000,41382511a2000000 => 41232585a9900000
+#61: xsmindp 7ff7ffffffffffff,7ff8000000000000 => 7fffffffffffffff
+#62: xsmindp 7ff8000000000000,7ff8000000000000 => 7ff8000000000000
+#63: xsmindp 7ff8000000000000,fff8000000000000 => 7ff8000000000000
+
+#0: xscvdpsxws 3fd8000000000000 => 0000000000000000
+#1: xscvdpsxws 404f000000000000 => 000000000000003e
+#2: xscvdpsxws 0018000000b77501 => 0000000000000000
+#3: xscvdpsxws 7fe800000000051b => 000000007fffffff
+#4: xscvdpsxws 0123214569900000 => 0000000000000000
+#5: xscvdpsxws 0000000000000000 => 0000000000000000
+#6: xscvdpsxws 8000000000000000 => 0000000000000000
+#7: xscvdpsxws 7ff0000000000000 => 000000007fffffff
+#8: xscvdpsxws fff0000000000000 => 0000000080000000
+#9: xscvdpsxws 7ff7ffffffffffff => 0000000080000000
+#10: xscvdpsxws fff7ffffffffffff => 0000000080000000
+#11: xscvdpsxws 7ff8000000000000 => 0000000080000000
+#12: xscvdpsxws fff8000000000000 => 0000000080000000
+#13: xscvdpsxws 8008340000078000 => 0000000000000000
+#14: xscvdpsxws c0d0650f5a07b353 => 00000000ffffbe6c
+#15: xscvdpsxws 41232585a9900000 => 00000000000992c2
+#16: xscvdpsxws 41382511a2000000 => 0000000000182511
+
+#0: xscvdpuxds 3fd8000000000000 => 0000000000000000
+#1: xscvdpuxds 404f000000000000 => 000000000000003e
+#2: xscvdpuxds 0018000000b77501 => 0000000000000000
+#3: xscvdpuxds 7fe800000000051b => ffffffffffffffff
+#4: xscvdpuxds 0123214569900000 => 0000000000000000
+#5: xscvdpuxds 0000000000000000 => 0000000000000000
+#6: xscvdpuxds 8000000000000000 => 0000000000000000
+#7: xscvdpuxds 7ff0000000000000 => ffffffffffffffff
+#8: xscvdpuxds fff0000000000000 => 0000000000000000
+#9: xscvdpuxds 7ff7ffffffffffff => 0000000000000000
+#10: xscvdpuxds fff7ffffffffffff => 0000000000000000
+#11: xscvdpuxds 7ff8000000000000 => 0000000000000000
+#12: xscvdpuxds fff8000000000000 => 0000000000000000
+#13: xscvdpuxds 8008340000078000 => 0000000000000000
+#14: xscvdpuxds c0d0650f5a07b353 => 0000000000000000
+#15: xscvdpuxds 41232585a9900000 => 00000000000992c2
+#16: xscvdpuxds 41382511a2000000 => 0000000000182511
+
--- valgrind/none/tests/ppc32/test_isa_2_06_part2.c	(revision 0)
+++ valgrind/none/tests/ppc32/test_isa_2_06_part2.c	(revision 11908)
@@ -0,0 +1,1730 @@
+/*  Copyright (C) 2011 IBM
+
+ Author: Maynard Johnson <maynardj@us.ibm.com>
+
+ This program is free software; you can redistribute it and/or
+ modify it under the terms of the GNU General Public License as
+ published by the Free Software Foundation; either version 2 of the
+ License, or (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful, but
+ WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+ 02111-1307, USA.
+
+ The GNU General Public License is contained in the file COPYING.
+ */
+
+#ifdef HAS_VSX
+
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <malloc.h>
+#include <altivec.h>
+#include <math.h>
+
+#ifndef __powerpc64__
+typedef uint32_t HWord_t;
+#else
+typedef uint64_t HWord_t;
+#endif /* __powerpc64__ */
+
+typedef unsigned char Bool;
+#define True 1
+#define False 0
+register HWord_t r14 __asm__ ("r14");
+register HWord_t r15 __asm__ ("r15");
+register HWord_t r16 __asm__ ("r16");
+register HWord_t r17 __asm__ ("r17");
+register double f14 __asm__ ("fr14");
+register double f15 __asm__ ("fr15");
+register double f16 __asm__ ("fr16");
+register double f17 __asm__ ("fr17");
+
+static volatile unsigned int div_flags, div_xer;
+
+#define ALLCR "cr0","cr1","cr2","cr3","cr4","cr5","cr6","cr7"
+
+#define SET_CR(_arg) \
+      __asm__ __volatile__ ("mtcr  %0" : : "b"(_arg) : ALLCR );
+
+#define SET_XER(_arg) \
+      __asm__ __volatile__ ("mtxer %0" : : "b"(_arg) : "xer" );
+
+#define GET_CR(_lval) \
+      __asm__ __volatile__ ("mfcr %0"  : "=b"(_lval) )
+
+#define GET_XER(_lval) \
+      __asm__ __volatile__ ("mfxer %0" : "=b"(_lval) )
+
+#define GET_CR_XER(_lval_cr,_lval_xer) \
+   do { GET_CR(_lval_cr); GET_XER(_lval_xer); } while (0)
+
+#define SET_CR_ZERO \
+      SET_CR(0)
+
+#define SET_XER_ZERO \
+      SET_XER(0)
+
+#define SET_CR_XER_ZERO \
+   do { SET_CR_ZERO; SET_XER_ZERO; } while (0)
+
+#define SET_FPSCR_ZERO \
+   do { double _d = 0.0; \
+        __asm__ __volatile__ ("mtfsf 0xFF, %0" : : "f"(_d) ); \
+   } while (0)
+
+
+typedef void (*test_func_t)(void);
+typedef struct test_table test_table_t;
+
+
+/* These functions below that construct a table of floating point
+ * values were lifted from none/tests/ppc32/jm-insns.c.
+ */
+
+#if defined (DEBUG_ARGS_BUILD)
+#define AB_DPRINTF(fmt, args...) do { fprintf(stderr, fmt , ##args); } while (0)
+#else
+#define AB_DPRINTF(fmt, args...) do { } while (0)
+#endif
+
+static inline void register_farg (void *farg,
+                                  int s, uint16_t _exp, uint64_t mant)
+{
+   uint64_t tmp;
+
+   tmp = ((uint64_t)s << 63) | ((uint64_t)_exp << 52) | mant;
+   *(uint64_t *)farg = tmp;
+   AB_DPRINTF("%d %03x %013llx => %016llx %0e\n",
+              s, _exp, mant, *(uint64_t *)farg, *(double *)farg);
+}
+
+
+typedef struct fp_test_args {
+   int fra_idx;
+   int frb_idx;
+} fp_test_args_t;
+
+
+fp_test_args_t fp_cmp_tests[] = {
+                                   {8, 8},
+                                   {8, 14},
+                                   {8, 6},
+                                   {8, 5},
+                                   {8, 4},
+                                   {8, 7},
+                                   {8, 9},
+                                   {8, 11},
+                                   {14, 8},
+                                   {14, 14},
+                                   {14, 6},
+                                   {14, 5},
+                                   {14, 4},
+                                   {14, 7},
+                                   {14, 9},
+                                   {14, 11},
+                                   {6, 8},
+                                   {6, 14},
+                                   {6, 6},
+                                   {6, 5},
+                                   {6, 4},
+                                   {6, 7},
+                                   {6, 9},
+                                   {6, 11},
+                                   {5, 8},
+                                   {5, 14},
+                                   {5, 6},
+                                   {5, 5},
+                                   {5, 4},
+                                   {5, 7},
+                                   {5, 9},
+                                   {5, 11},
+                                   {4, 8},
+                                   {4, 14},
+                                   {4, 6},
+                                   {4, 5},
+                                   {4, 1},
+                                   {4, 7},
+                                   {4, 9},
+                                   {4, 11},
+                                   {7, 8},
+                                   {7, 14},
+                                   {7, 6},
+                                   {7, 5},
+                                   {7, 4},
+                                   {7, 7},
+                                   {7, 9},
+                                   {7, 11},
+                                   {10, 8},
+                                   {10, 14},
+                                   {10, 6},
+                                   {10, 5},
+                                   {10, 4},
+                                   {10, 7},
+                                   {10, 9},
+                                   {10, 10},
+                                   {12, 8},
+                                   {12, 14},
+                                   {12, 6},
+                                   {12, 5},
+                                   {1, 1},
+                                   {2, 2},
+                                   {3, 3},
+                                   {4, 4},
+};
+
+
+fp_test_args_t two_arg_fp_tests[] = {
+                                     {8, 8},
+                                     {8, 14},
+                                     {15, 16},
+                                     {8, 5},
+                                     {8, 4},
+                                     {8, 7},
+                                     {8, 9},
+                                     {8, 11},
+                                     {14, 8},
+                                     {14, 14},
+                                     {14, 6},
+                                     {14, 5},
+                                     {14, 4},
+                                     {14, 7},
+                                     {14, 9},
+                                     {14, 11},
+                                     {6, 8},
+                                     {6, 14},
+                                     {6, 6},
+                                     {6, 5},
+                                     {6, 4},
+                                     {6, 7},
+                                     {6, 9},
+                                     {6, 11},
+                                     {5, 8},
+                                     {5, 14},
+                                     {5, 6},
+                                     {5, 5},
+                                     {5, 4},
+                                     {5, 7},
+                                     {5, 9},
+                                     {5, 11},
+                                     {4, 8},
+                                     {4, 14},
+                                     {4, 6},
+                                     {4, 5},
+                                     {4, 1},
+                                     {4, 7},
+                                     {4, 9},
+                                     {4, 11},
+                                     {7, 8},
+                                     {7, 14},
+                                     {7, 6},
+                                     {7, 5},
+                                     {7, 4},
+                                     {7, 7},
+                                     {7, 9},
+                                     {7, 11},
+                                     {10, 8},
+                                     {10, 14},
+                                     {12, 6},
+                                     {12, 5},
+                                     {10, 4},
+                                     {10, 7},
+                                     {10, 9},
+                                     {10, 11},
+                                     {12, 8 },
+                                     {12, 14},
+                                     {12, 6},
+                                     {15, 16},
+                                     {15, 16},
+                                     {9, 11},
+                                     {11, 11},
+                                     {11, 12}
+};
+
+
+static int nb_special_fargs;
+static double * spec_fargs;
+static float * spec_sp_fargs;
+
+static void build_special_fargs_table(void)
+{
+/*
+  Entry  Sign Exp   fraction                  Special value
+   0      0   3fd   0x8000000000000ULL         Positive finite number
+   1      0   404   0xf000000000000ULL         ...
+   2      0   001   0x8000000b77501ULL         ...
+   3      0   7fe   0x800000000051bULL         ...
+   4      0   012   0x3214569900000ULL         ...
+   5      0   000   0x0000000000000ULL         +0.0 (+zero)
+   6      1   000   0x0000000000000ULL         -0.0 (-zero)
+   7      0   7ff   0x0000000000000ULL         +infinity
+   8      1   7ff   0x0000000000000ULL         -infinity
+   9      0   7ff   0x7FFFFFFFFFFFFULL         +SNaN
+   10     1   7ff   0x7FFFFFFFFFFFFULL         -SNaN
+   11     0   7ff   0x8000000000000ULL         +QNaN
+   12     1   7ff   0x8000000000000ULL         -QNaN
+   13     1   000   0x8340000078000ULL         Denormalized val (zero exp and non-zero fraction)
+   14     1   40d   0x0650f5a07b353ULL         Negative finite number
+   15     0   412   0x32585a9900000ULL         A couple more positive finite numbers
+   16     0   413   0x82511a2000000ULL         ...
+*/
+
+   uint64_t mant;
+   uint16_t _exp;
+   int s;
+   int j, i = 0;
+
+   if (spec_fargs)
+      return;
+
+   spec_fargs = malloc( 17 * sizeof(double) );
+   spec_sp_fargs = malloc( 17 * sizeof(float) );
+
+   // #0
+   s = 0;
+   _exp = 0x3fd;
+   mant = 0x8000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   // #1
+   s = 0;
+   _exp = 0x404;
+   mant = 0xf000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* None of the ftdiv tests succeed.
+    * FRA = value #0; FRB = value #1
+    * ea_ = -2; e_b = 5
+    * fl_flag || fg_flag || fe_flag = 100
+    */
+
+   /*************************************************
+    *     fe_flag tests
+    *
+    *************************************************/
+
+   /* fe_flag <- 1 if FRA is a NaN
+    * FRA = value #9; FRB = value #1
+    * e_a = 1024; e_b = 5
+    * fl_flag || fg_flag || fe_flag = 101
+    */
+
+   /* fe_flag <- 1 if FRB is a NaN
+    * FRA = value #1; FRB = value #12
+    * e_a = 5; e_b = 1024
+    * fl_flag || fg_flag || fe_flag = 101
+    */
+
+   /* fe_flag <- 1 if e_b <= -1022
+    * FRA = value #0; FRB = value #2
+    * e_a = -2; e_b = -1022
+    * fl_flag || fg_flag || fe_flag = 101
+    *
+    */
+   // #2
+   s = 0;
+   _exp = 0x001;
+   mant = 0x8000000b77501ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* fe_flag <- 1 if e_b >= 1021
+    * FRA = value #1; FRB = value #3
+    * e_a = 5; e_b = 1023
+    * fl_flag || fg_flag || fe_flag = 101
+    */
+   // #3
+   s = 0;
+   _exp = 0x7fe;
+   mant = 0x800000000051bULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* fe_flag <- 1 if FRA != 0 && e_a - e_b >= 1023
+    * Let FRA = value #3 and FRB be value #0.
+    * e_a = 1023; e_b = -2
+    * fl_flag || fg_flag || fe_flag = 101
+    */
+
+   /* fe_flag <- 1 if FRA != 0 && e_a - e_b <= -1023
+    * Let FRA = value #0 above and FRB be value #3 above
+    * e_a = -2; e_b = 1023
+    * fl_flag || fg_flag || fe_flag = 101
+    */
+
+   /* fe_flag <- 1 if FRA != 0 && e_a <= -970
+    * Let FRA = value #4 and FRB be value #0
+    * e_a = -1005; e_b = -2
+    * fl_flag || fg_flag || fe_flag = 101
+   */
+   // #4
+   s = 0;
+   _exp = 0x012;
+   mant = 0x3214569900000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /*************************************************
+    *     fg_flag tests
+    *
+    *************************************************/
+   /* fg_flag <- 1 if FRA is an Infinity
+    * NOTE: FRA = Inf also sets fe_flag
+    * Do two tests, using values #7 and #8 (+/- Inf) for FRA.
+    * Test 1:
+    *   Let FRA be value #7 and FRB be value #1
+    *   e_a = 1024; e_b = 5
+    *   fl_flag || fg_flag || fe_flag = 111
+    *
+    * Test 2:
+    *   Let FRA be value #8 and FRB be value #1
+    *   e_a = 1024; e_b = 5
+    *   fl_flag || fg_flag || fe_flag = 111
+    *
+    */
+
+   /* fg_flag <- 1 if FRB is an Infinity
+    * NOTE: FRB = Inf also sets fe_flag
+    * Let FRA be value #1 and FRB be value #7
+    * e_a = 5; e_b = 1024
+    * fl_flag || fg_flag || fe_flag = 111
+    */
+
+   /* fg_flag <- 1 if FRB is denormalized
+    * NOTE: e_b < -1022 ==> fe_flag <- 1
+    * Let FRA be value #0 and FRB be value #13
+    * e_a = -2; e_b = -1023
+    * fl_flag || fg_flag || fe_flag = 111
+    */
+
+   /* fg_flag <- 1 if FRB is +zero
+    * NOTE: FRA = Inf also sets fe_flag
+    * Let FRA = val #5; FRB = val #5
+    * ea_ = -1023; e_b = -1023
+    * fl_flag || fg_flag || fe_flag = 111
+    */
+
+   /* fg_flag <- 1 if FRB is -zero
+    * NOTE: FRA = Inf also sets fe_flag
+    * Let FRA = val #5; FRB = val #6
+    * ea_ = -1023; e_b = -1023
+    * fl_flag || fg_flag || fe_flag = 111
+    */
+
+   /* Special values */
+   /* +0.0      : 0 0x000 0x0000000000000 */
+   // #5
+   s = 0;
+   _exp = 0x000;
+   mant = 0x0000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* -0.0      : 1 0x000 0x0000000000000 */
+   // #6
+   s = 1;
+   _exp = 0x000;
+   mant = 0x0000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* +infinity : 0 0x7FF 0x0000000000000  */
+   // #7
+   s = 0;
+   _exp = 0x7FF;
+   mant = 0x0000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* -infinity : 1 0x7FF 0x0000000000000 */
+   // #8
+   s = 1;
+   _exp = 0x7FF;
+   mant = 0x0000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* +QNaN     : 0 0x7FF 0x7FFFFFFFFFFFF */
+   // #9
+   s = 0;
+   _exp = 0x7FF;
+   mant = 0x7FFFFFFFFFFFFULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* -QNaN     : 1 0x7FF 0x7FFFFFFFFFFFF */
+   // #10
+   s = 1;
+   _exp = 0x7FF;
+   mant = 0x7FFFFFFFFFFFFULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* +SNaN     : 0 0x7FF 0x8000000000000 */
+   // #11
+   s = 0;
+   _exp = 0x7FF;
+   mant = 0x8000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* -SNaN     : 1 0x7FF 0x8000000000000 */
+   // #12
+   s = 1;
+   _exp = 0x7FF;
+   mant = 0x8000000000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* denormalized value */
+   // #13
+   s = 1;
+   _exp = 0x000;
+   mant = 0x8340000078000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* Negative finite number */
+   // #14
+   s = 1;
+   _exp = 0x40d;
+   mant = 0x0650f5a07b353ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   /* A couple positive finite numbers ... */
+   // #15
+   s = 0;
+   _exp = 0x412;
+   mant = 0x32585a9900000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   // #16
+   s = 0;
+   _exp = 0x413;
+   mant = 0x82511a2000000ULL;
+   register_farg(&spec_fargs[i++], s, _exp, mant);
+
+   nb_special_fargs = i;
+   for (j = 0; j < i; j++) {
+      spec_sp_fargs[j] = spec_fargs[j];
+   }
+}
+
+
+struct test_table
+{
+   test_func_t test_category;
+   char * name;
+};
+
+typedef enum {
+   SINGLE_TEST,
+   DOUBLE_TEST
+} precision_type_t;
+
+typedef enum {
+   VX_SCALAR_FP_NMSUB = 0,
+   // ALL VECTOR-TYPE OPS SHOULD BE ADDED AFTER THIS LINE
+   VX_VECTOR_FP_MULT_AND_OP2 = 10,
+   // and before this line
+   VX_BASIC_CMP = 30,
+   VX_CONV_WORD,
+   VX_DEFAULT
+} vx_fp_test_type;
+
+typedef struct vx_fp_test
+{
+   test_func_t test_func;
+   const char * name;
+   fp_test_args_t * targs;
+   int num_tests;
+   precision_type_t precision;
+   vx_fp_test_type type;
+   const char * op;
+} vx_fp_test_t;
+
+static vector unsigned int vec_out, vec_inA, vec_inB, vec_inC;
+
+static Bool do_dot;
+static void test_xvcmpeqdp(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("xvcmpeqdp.          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xvcmpeqdp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcmpgedp(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("xvcmpgedp.          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xvcmpgedp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcmpgtdp(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("xvcmpgtdp.          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xvcmpgtdp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcmpeqsp(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("xvcmpeqsp.          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xvcmpeqsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcmpgesp(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("xvcmpgesp.          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xvcmpgesp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcmpgtsp(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("xvcmpgtsp.          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xvcmpgtsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static Bool do_aXp;
+static Bool do_dp;
+static void test_xsnmsub(void)
+{
+   if (do_aXp)
+      __asm__ __volatile__ ("xsnmsubadp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      __asm__ __volatile__ ("xsnmsubmdp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmadd(void)
+{
+   if (do_aXp)
+      if (do_dp)
+         __asm__ __volatile__ ("xvmaddadp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvmaddasp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      if (do_dp)
+         __asm__ __volatile__ ("xvmaddmdp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvmaddmsp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvnmadd(void)
+{
+   if (do_aXp)
+      if (do_dp)
+         __asm__ __volatile__ ("xvnmaddadp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvnmaddasp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      if (do_dp)
+         __asm__ __volatile__ ("xvnmaddmdp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvnmaddmsp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvnmsub(void)
+{
+   if (do_aXp)
+      if (do_dp)
+         __asm__ __volatile__ ("xvnmsubadp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvnmsubasp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      if (do_dp)
+         __asm__ __volatile__ ("xvnmsubmdp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvnmsubmsp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmsub(void)
+{
+   if (do_aXp)
+      if (do_dp)
+         __asm__ __volatile__ ("xvmsubadp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvmsubasp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+   else
+      if (do_dp)
+         __asm__ __volatile__ ("xvmsubmdp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+      else
+         __asm__ __volatile__ ("xvmsubmsp          %x0, %x1, %x2" : "+wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xssqrtdp(void)
+{
+   __asm__ __volatile__ ("xssqrtdp   %x0, %x1" : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xsrdpim(void)
+{
+   __asm__ __volatile__ ("xsrdpim   %x0, %x1" : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xsrdpip(void)
+{
+   __asm__ __volatile__ ("xsrdpip   %x0, %x1" : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xstdivdp(void)
+{
+   __asm__ __volatile__ ("xstdivdp   6, %x0, %x1" : : "wa" (vec_inA), "wa" (vec_inB));
+}
+
+static void test_xsmaxdp(void)
+{
+   __asm__ __volatile__ ("xsmaxdp   %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xsmindp(void)
+{
+   __asm__ __volatile__ ("xsmindp   %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvadddp(void)
+{
+   __asm__ __volatile__ ("xvadddp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvaddsp(void)
+{
+   __asm__ __volatile__ ("xvaddsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvdivdp(void)
+{
+   __asm__ __volatile__ ("xvdivdp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvdivsp(void)
+{
+   __asm__ __volatile__ ("xvdivsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmuldp(void)
+{
+   __asm__ __volatile__ ("xvmuldp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmulsp(void)
+{
+   __asm__ __volatile__ ("xvmulsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvsubdp(void)
+{
+   __asm__ __volatile__ ("xvsubdp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmaxdp(void)
+{
+   __asm__ __volatile__ ("xvmaxdp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmindp(void)
+{
+   __asm__ __volatile__ ("xvmindp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvmaxsp(void)
+{
+   __asm__ __volatile__ ("xvmaxsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvminsp(void)
+{
+   __asm__ __volatile__ ("xvminsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvsubsp(void)
+{
+   __asm__ __volatile__ ("xvsubsp          %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvresp(void)
+{
+   __asm__ __volatile__ ("xvresp   %x0, %x1" : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xxsel(void)
+{
+   unsigned long long * dst;
+   unsigned long long xa[] =  { 0xa12bc37de56f9708ULL, 0x3894c1fddeadbeefULL};
+   unsigned long long xb[] =  { 0xfedc432124681235ULL, 0xf1e2d3c4e0057708ULL};
+   unsigned long long xc[] =  { 0xffffffff01020304ULL, 0x128934bd00000000ULL};
+
+   memcpy(&vec_inA, xa, 16);
+   memcpy(&vec_inB, xb, 16);
+   memcpy(&vec_inC, xc, 16);
+
+
+   __asm__ __volatile__ ("xxsel   %x0, %x1, %x2, %x3" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB),"wa" (vec_inC));
+   dst = (unsigned long long *) &vec_out;
+   printf("xxsel %016llx,%016llx,%016llx => %016llx\n", xa[0], xb[0], xc[0], *dst);
+   dst++;
+   printf("xxsel %016llx,%016llx,%016llx => %016llx\n", xa[1], xb[1], xc[1], *dst);
+   printf("\n");
+}
+
+static void test_xxspltw(void)
+{
+   int uim;
+   unsigned long long * dst = NULL;
+   unsigned long long xb[] =  { 0xfedc432124681235ULL, 0xf1e2d3c4e0057708ULL};
+   memcpy(&vec_inB, xb, 16);
+
+   for (uim = 0; uim < 4; uim++) {
+      switch (uim) {
+         case 0:
+            __asm__ __volatile__ ("xxspltw   %x0, %x1, 0" : "=wa" (vec_out): "wa" (vec_inB));
+            break;
+         case 1:
+            __asm__ __volatile__ ("xxspltw   %x0, %x1, 1" : "=wa" (vec_out): "wa" (vec_inB));
+            break;
+         case 2:
+            __asm__ __volatile__ ("xxspltw   %x0, %x1, 2" : "=wa" (vec_out): "wa" (vec_inB));
+            break;
+         case 3:
+            __asm__ __volatile__ ("xxspltw   %x0, %x1, 3" : "=wa" (vec_out): "wa" (vec_inB));
+            break;
+      }
+      dst = (unsigned long long *) &vec_out;
+      printf("xxspltw 0x%016llx%016llx %d=> 0x%016llx",  xb[0], xb[1], uim, *dst);
+      dst++;
+      printf("%016llx\n", *dst);
+   }
+   printf("\n");
+}
+
+static void test_xscvdpsxws(void)
+{
+   __asm__ __volatile__ ("xscvdpsxws  %x0, %x1" : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xscvdpuxds(void)
+{
+   __asm__ __volatile__ ("xscvdpuxds  %x0, %x1" : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xvcpsgndp(void)
+{
+   __asm__ __volatile__  ("xvcpsgndp  %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcpsgnsp(void)
+{
+   __asm__ __volatile__  ("xvcpsgnsp  %x0, %x1, %x2" : "=wa" (vec_out): "wa" (vec_inA),"wa" (vec_inB));
+}
+
+static void test_xvcvdpsxws(void)
+{
+   __asm__ __volatile__ ("xvcvdpsxws  %x0, %x1 " : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static void test_xvcvspsxws(void)
+{
+   __asm__ __volatile__ ("xvcvspsxws  %x0, %x1 " : "=wa" (vec_out): "wa" (vec_inB));
+}
+
+static vx_fp_test_t
+vx_vector_one_fp_arg_tests[] = {
+                                { &test_xvresp, "xvresp", NULL, 16, SINGLE_TEST, VX_BASIC_CMP, "1/x"},
+                                { &test_xvcvdpsxws, "xvcvdpsxws", NULL, 16, DOUBLE_TEST, VX_CONV_WORD, "conv"},
+                                { &test_xvcvspsxws, "xvcvspsxws", NULL, 16, SINGLE_TEST, VX_CONV_WORD, "conv"},
+                                { NULL, NULL, NULL, 0 , 0, 0, NULL}
+};
+
+static vx_fp_test_t
+vx_vector_fp_tests[] = {
+                        { &test_xvcmpeqdp, "xvcmpeqdp", fp_cmp_tests, 64, DOUBLE_TEST, VX_BASIC_CMP, "eq"},
+                        { &test_xvcmpgedp, "xvcmpgedp", fp_cmp_tests, 64, DOUBLE_TEST, VX_BASIC_CMP, "ge"},
+                        { &test_xvcmpgtdp, "xvcmpgtdp", fp_cmp_tests, 64, DOUBLE_TEST, VX_BASIC_CMP, "gt"},
+                        { &test_xvcmpeqsp, "xvcmpeqsp", fp_cmp_tests, 64, SINGLE_TEST, VX_BASIC_CMP, "eq"},
+                        { &test_xvcmpgesp, "xvcmpgesp", fp_cmp_tests, 64, SINGLE_TEST, VX_BASIC_CMP, "ge"},
+                        { &test_xvcmpgtsp, "xvcmpgtsp", fp_cmp_tests, 64, SINGLE_TEST, VX_BASIC_CMP, "gt"},
+                        { &test_xvadddp, "xvadddp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "+" },
+                        { &test_xvaddsp, "xvaddsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "+" },
+                        { &test_xvdivdp, "xvdivdp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "/" },
+                        { &test_xvdivsp, "xvdivsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "/" },
+                        { &test_xvmuldp, "xvmuldp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "*" },
+                        { &test_xvmulsp, "xvmulsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "*" },
+                        { &test_xvsubdp, "xvsubdp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "-" },
+                        { &test_xvsubsp, "xvsubsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "-" },
+                        { &test_xvmaxdp, "xvmaxdp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "@max@" },
+                        { &test_xvmindp, "xvmindp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "@min@" },
+                        { &test_xvmaxsp, "xvmaxsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "@max@" },
+                        { &test_xvminsp, "xvminsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "@min@" },
+                        { &test_xvcpsgndp, "xvcpsgndp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, "+-cp"},
+                        { &test_xvcpsgnsp, "xvcpsgnsp", two_arg_fp_tests, 64, SINGLE_TEST, VX_DEFAULT, "+-cp"},
+                        { NULL, NULL, NULL, 0 , 0, 0, NULL}
+};
+
+
+static vx_fp_test_t
+vx_aORm_fp_tests[] = {
+                       { &test_xsnmsub, "xsnmsub", two_arg_fp_tests, 64, DOUBLE_TEST, VX_SCALAR_FP_NMSUB, "!*-"},
+                       { &test_xvmadd, "xvmadd", two_arg_fp_tests, 64, DOUBLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "*+"},
+                       { &test_xvmadd, "xvmadd", two_arg_fp_tests, 64, SINGLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "*+"},
+                       { &test_xvnmadd, "xvnmadd", two_arg_fp_tests, 64, DOUBLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "!*+"},
+                       { &test_xvnmadd, "xvnmadd", two_arg_fp_tests, 64, SINGLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "!*+"},
+                       { &test_xvmsub, "xvmsub", two_arg_fp_tests, 64, DOUBLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "*-"},
+                       { &test_xvmsub, "xvmsub", two_arg_fp_tests, 64, SINGLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "*-"},
+                       { &test_xvnmsub, "xvnmsub", two_arg_fp_tests, 64, DOUBLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "!*-"},
+                       { &test_xvnmsub, "xvnmsub", two_arg_fp_tests, 64, SINGLE_TEST, VX_VECTOR_FP_MULT_AND_OP2, "!*-"},
+                       { NULL, NULL, NULL, 0, 0, 0,  NULL }
+};
+
+static vx_fp_test_t
+vx_simple_scalar_fp_tests[] = {
+                               { &test_xssqrtdp, "xssqrtdp", NULL, 17, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { &test_xsrdpim, "xsrdpim", NULL, 17, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { &test_xsrdpip, "xsrdpip", NULL, 17, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { &test_xstdivdp, "xstdivdp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { &test_xsmaxdp, "xsmaxdp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { &test_xsmindp, "xsmindp", two_arg_fp_tests, 64, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { &test_xscvdpsxws, "xscvdpsxws", NULL, 17, DOUBLE_TEST, VX_CONV_WORD, NULL},
+                               { &test_xscvdpuxds, "xscvdpuxds", NULL, 17, DOUBLE_TEST, VX_DEFAULT, NULL},
+                               { NULL, NULL, NULL, 0, 0, 0, NULL }
+};
+
+
+#ifdef __powerpc64__
+static void test_bpermd(void)
+{
+   /* NOTE: Bit number is '0 . . . 63'
+    *
+    * Permuted bits are generated bit 0 -7 as follows:
+    *    index = (r14)8*i:8*i+7
+    *    perm[i] = (r15)index
+    *
+    * So, for i = 0, index is (r14)8*0:8*0+7, or (r14)0:7, which is the MSB
+    * byte of r14, 0x1b(27/base 10).  This identifies bit 27 of r15, which is '1'.
+    * For i = 1, index is 0x2c, identifying bit 44 of r15, which is '1'.
+    * So the result of the first two iterations of i are:
+    *   perm = 0b01xxxxxx
+    *
+    */
+   r15 = 0xa12bc37de56f9708ULL;
+   r14 = 0x1b2c31f030000001ULL;
+   __asm__ __volatile__ ("bpermd %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+   printf("bpermd: 0x%016llx : 0x%016llx => 0x%llx\n", (unsigned long long)r14,
+          (unsigned long long)r15, (unsigned long long)r17);
+   printf("\n");
+}
+#endif
+
+static Bool do_OE;
+typedef enum {
+   DIV_BASE = 1,
+   DIV_OE = 2,
+   DIV_DOT = 4,
+} div_type_t;
+/* Possible divde type combinations are:
+ *   - base
+ *   - base+dot
+ *   - base+OE
+ *   - base+OE+dot
+ */
+#ifdef __powerpc64__
+static void test_divde(void)
+{
+   int divde_type = DIV_BASE;
+   if (do_OE)
+      divde_type |= DIV_OE;
+   if (do_dot)
+      divde_type |= DIV_DOT;
+
+   switch (divde_type) {
+      case 1:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divde %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      case 3:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divdeo %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      case 5:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divde. %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      case 7:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divdeo. %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      default:
+         fprintf(stderr, "Invalid divde type. Exiting\n");
+         exit(1);
+   }
+}
+#endif
+
+static void test_divweu(void)
+{
+   int divweu_type = DIV_BASE;
+   if (do_OE)
+      divweu_type |= DIV_OE;
+   if (do_dot)
+      divweu_type |= DIV_DOT;
+
+   switch (divweu_type) {
+      case 1:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divweu %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      case 3:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divweuo %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      case 5:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divweu. %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      case 7:
+        SET_CR_XER_ZERO;
+         __asm__ __volatile__ ("divweuo. %0, %1, %2" : "=r" (r17) : "r" (r14),"r" (r15));
+         GET_CR_XER(div_flags, div_xer);
+         break;
+      default:
+         fprintf(stderr, "Invalid divweu type. Exiting\n");
+         exit(1);
+   }
+}
+
+static void test_fctiduz(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("fctiduz. %0, %1" : "=d" (f17) : "d" (f14));
+   else
+      __asm__ __volatile__ ("fctiduz %0, %1" : "=d" (f17) : "d" (f14));
+}
+
+static void test_fctidu(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("fctidu. %0, %1" : "=d" (f17) : "d" (f14));
+   else
+      __asm__ __volatile__ ("fctidu %0, %1" : "=d" (f17) : "d" (f14));
+}
+
+static void test_fctiwuz(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("fctiwuz. %0, %1" : "=d" (f17) : "d" (f14));
+   else
+      __asm__ __volatile__ ("fctiwuz %0, %1" : "=d" (f17) : "d" (f14));
+}
+
+static void test_fctiwu(void)
+{
+   if (do_dot)
+      __asm__ __volatile__ ("fctiwu. %0, %1" : "=d" (f17) : "d" (f14));
+   else
+      __asm__ __volatile__ ("fctiwu %0, %1" : "=d" (f17) : "d" (f14));
+}
+
+typedef struct simple_test {
+   test_func_t test_func;
+   char * name;
+   precision_type_t precision;
+} simple_test_t;
+
+static simple_test_t fct_tests[] = {
+                                    { &test_fctiduz, "fctiduz", DOUBLE_TEST },
+                                    { &test_fctidu, "fctidu", DOUBLE_TEST },
+                                    { &test_fctiwuz, "fctiwuz", SINGLE_TEST },
+                                    { &test_fctiwu, "fctiwu", SINGLE_TEST },
+                                   { NULL, NULL }
+};
+
+static void setup_sp_fp_args(fp_test_args_t * targs, Bool swap_inputs)
+{
+   int a_idx, b_idx, i;
+   void * inA, * inB;
+   void * vec_src = swap_inputs ? &vec_out : &vec_inB;
+
+   for (i = 0; i < 4; i++) {
+      a_idx = targs->fra_idx;
+      b_idx = targs->frb_idx;
+      inA = (void *)&spec_sp_fargs[a_idx];
+      inB = (void *)&spec_sp_fargs[b_idx];
+      // copy single precision FP  into vector element i
+      memcpy(((void *)&vec_inA) + (i * 4), inA, 4);
+      memcpy(vec_src + (i * 4), inB, 4);
+      targs++;
+   }
+}
+
+static void setup_dp_fp_args(fp_test_args_t * targs, Bool swap_inputs)
+{
+   int a_idx, b_idx, i;
+   void * inA, * inB;
+   void * vec_src = swap_inputs ? (void *)&vec_out : (void *)&vec_inB;
+
+   for (i = 0; i < 2; i++) {
+      a_idx = targs->fra_idx;
+      b_idx = targs->frb_idx;
+      inA = (void *)&spec_fargs[a_idx];
+      inB = (void *)&spec_fargs[b_idx];
+      // copy double precision FP  into vector element i
+      memcpy(((void *)&vec_inA) + (i * 8), inA, 8);
+      memcpy(vec_src + (i * 8), inB, 8);
+      targs++;
+   }
+}
+
+#define VX_NOT_CMP_OP 0xffffffff
+static void print_vector_fp_result(unsigned int cc, vx_fp_test_t * test_group, int i)
+{
+   int a_idx, b_idx, k;
+   char * name = malloc(20);
+   int dp = test_group->precision == DOUBLE_TEST ? 1 : 0;
+   int loops = dp ? 2 : 4;
+   fp_test_args_t * targs = &test_group->targs[i];
+   unsigned long long * frA_dp, * frB_dp, * dst_dp;
+   unsigned int * frA_sp, *frB_sp, * dst_sp;
+   strcpy(name, test_group->name);
+   printf("#%d: %s%s ", dp? i/2 : i/4, name, (do_dot ? "." : ""));
+   for (k = 0; k < loops; k++) {
+      a_idx = targs->fra_idx;
+      b_idx = targs->frb_idx;
+      if (k)
+         printf(" AND ");
+      if (dp) {
+         frA_dp = (unsigned long long *)&spec_fargs[a_idx];
+         frB_dp = (unsigned long long *)&spec_fargs[b_idx];
+         printf("%016llx %s %016llx", *frA_dp, test_group->op, *frB_dp);
+      } else {
+         frA_sp = (unsigned int *)&spec_sp_fargs[a_idx];
+         frB_sp = (unsigned int *)&spec_sp_fargs[b_idx];
+         printf("%08x %s %08x", *frA_sp, test_group->op, *frB_sp);
+      }
+      targs++;
+   }
+   if (cc != VX_NOT_CMP_OP)
+      printf(" ? cc=%x", cc);
+
+   if (dp) {
+      dst_dp = (unsigned long long *) &vec_out;
+      printf(" => %016llx %016llx\n", dst_dp[0], dst_dp[1]);
+   } else {
+      dst_sp = (unsigned int *) &vec_out;
+      printf(" => %08x %08x %08x %08x\n", dst_sp[0], dst_sp[1], dst_sp[2], dst_sp[3]);
+   }
+   free(name);
+}
+
+
+static void print_vx_aORm_fp_result(unsigned long long * XT_arg, unsigned long long * XB_arg,
+                                    vx_fp_test_t * test_group, int i)
+{
+   int a_idx, k;
+   char * name = malloc(20);
+   int dp = test_group->precision == DOUBLE_TEST ? 1 : 0;
+   int loops = dp ? 2 : 4;
+   fp_test_args_t * targs = &test_group->targs[i];
+   unsigned long long frA_dp, * dst_dp;
+   unsigned int frA_sp, * dst_sp;
+
+   strcpy(name, test_group->name);
+   if (do_aXp)
+      if (dp)
+         strcat(name, "adp");
+      else
+         strcat(name, "asp");
+   else
+      if (dp)
+         strcat(name, "mdp");
+      else
+         strcat(name, "msp");
+
+   printf("#%d: %s ", dp? i/2 : i/4, name);
+   for (k = 0; k < loops; k++) {
+      a_idx = targs->fra_idx;
+      if (k)
+         printf(" AND ");
+      if (dp) {
+         frA_dp = *((unsigned long long *)&spec_fargs[a_idx]);
+         printf("%s(%016llx,%016llx,%016llx)", test_group->op, XT_arg[k], frA_dp, XB_arg[k]);
+      } else {
+         unsigned int * xt_sp = (unsigned int *)XT_arg;
+         unsigned int * xb_sp = (unsigned int *)XB_arg;
+         frA_sp = *((unsigned int *)&spec_sp_fargs[a_idx]);
+         printf("%s(%08x,%08x,%08x)", test_group->op, xt_sp[k], frA_sp, xb_sp[k]);
+      }
+      targs++;
+   }
+
+   if (dp) {
+      dst_dp = (unsigned long long *) &vec_out;
+      printf(" => %016llx %016llx\n", dst_dp[0], dst_dp[1]);
+   } else {
+      dst_sp = (unsigned int *) &vec_out;
+      printf(" => %08x %08x %08x %08x\n", dst_sp[0], dst_sp[1], dst_sp[2], dst_sp[3]);
+   }
+   free(name);
+}
+
+/* This function currently only supports double precision input arguments. */
+static void test_vx_simple_scalar_fp_ops(void)
+{
+   test_func_t func;
+   int k = 0;
+
+   build_special_fargs_table();
+   while ((func = vx_simple_scalar_fp_tests[k].test_func)) {
+      unsigned long long * frap, * frbp, * dst;
+      unsigned int * pv;
+      int idx;
+      vx_fp_test_t test_group = vx_simple_scalar_fp_tests[k];
+      Bool convToWord = (test_group.type == VX_CONV_WORD);
+      if (test_group.precision != DOUBLE_TEST) {
+         fprintf(stderr, "Unsupported single precision for scalar op in test_vx_aORm_fp_ops\n");
+         exit(1);
+      }
+      pv = (unsigned int *)&vec_out;
+      // clear vec_out
+      for (idx = 0; idx < 4; idx++, pv++)
+         *pv = 0;
+
+      /* If num_tests is exactly equal to nb_special_fargs, this implies the
+       * instruction being tested only requires one floating point argument
+       * (e.g. xssqrtdp).
+       */
+      if (test_group.num_tests == nb_special_fargs && !test_group.targs) {
+         void * inB;
+         int i;
+         for (i = 0; i < nb_special_fargs; i++) {
+            inB = (void *)&spec_fargs[i];
+            frbp = (unsigned long long *)&spec_fargs[i];
+            memcpy(&vec_inB, inB, 8);
+            (*func)();
+            dst = (unsigned long long *) &vec_out;
+            printf("#%d: %s %016llx => %016llx\n", i, test_group.name, *frbp,
+                   convToWord ? (*dst & 0x00000000ffffffffULL) : *dst);
+         }
+      } else {
+         void * inA, * inB;
+         unsigned int condreg, flags;
+         int isTdiv = (strstr(test_group.name, "xstdivdp") != NULL) ? 1 : 0;
+         int i;
+         for (i = 0; i < test_group.num_tests; i++) {
+            fp_test_args_t aTest = test_group.targs[i];
+            inA = (void *)&spec_fargs[aTest.fra_idx];
+            inB = (void *)&spec_fargs[aTest.frb_idx];
+            frap = (unsigned long long *)&spec_fargs[aTest.fra_idx];
+            frbp = (unsigned long long *)&spec_fargs[aTest.frb_idx];
+            // Only need to copy one doubleword into each vector's element 0
+            memcpy(&vec_inA, inA, 8);
+            memcpy(&vec_inB, inB, 8);
+            SET_FPSCR_ZERO;
+            SET_CR_XER_ZERO;
+            (*func)();
+            GET_CR(flags);
+            if (isTdiv) {
+               condreg = (flags & 0x000000f0) >> 4;
+               printf("#%d: %s %016llx,%016llx => cr %x\n", i, test_group.name, *frap, *frbp, condreg);
+            } else {
+               dst = (unsigned long long *) &vec_out;
+               printf("#%d: %s %016llx,%016llx => %016llx\n", i, test_group.name,
+                      *frap, *frbp, *dst);
+            }
+         }
+      }
+      printf( "\n" );
+      k++;
+   }
+}
+
+static void test_vx_aORm_fp_ops(void)
+{
+   /* These ops need a third src argument, which is stored in element 0 of
+    * VSX[XT] -- i.e., vec_out.  For the xs<ZZZ>m{d|s}p cases, VSX[XT] holds
+    * src3 and VSX[XB] holds src2; for the xs<ZZZ>a{d|s}p cases, VSX[XT] holds
+    * src2 and VSX[XB] holds src3.  The fp_test_args_t that holds the test
+    * data (input args, result) contain only two inputs, so I arbitrarily
+    * choose some spec_fargs elements for the third source argument.
+    * Note that that by using the same input data for a given pair of
+    * a{d|s}p/m{d|s}p-type instructions (by swapping the src2 and src3
+    * arguments), the expected result should be the same.
+    */
+
+   test_func_t func;
+   int k;
+   char * test_name = (char *)malloc(20);
+   k = 0;
+   do_dot = False;
+
+   build_special_fargs_table();
+   while ((func = vx_aORm_fp_tests[k].test_func)) {
+      int i, stride;
+      Bool repeat = False;
+      Bool scalar = False;
+      unsigned long long * frap, * frbp, * dst;
+      vx_fp_test_t test_group = vx_aORm_fp_tests[k];
+      vx_fp_test_type test_type = test_group.type;
+      do_dp = test_group.precision == DOUBLE_TEST ? True : False;
+      frap = frbp = NULL;
+
+      if (test_type < VX_VECTOR_FP_MULT_AND_OP2) {
+            scalar = True;
+            strcpy(test_name, test_group.name);
+            if (!repeat) {
+               repeat = 1;
+               stride = 1;
+               // Only support double precision scalar ops in this function
+               if (do_dp) {
+                  strcat(test_name, "adp");
+               } else {
+                  fprintf(stderr, "Unsupported single precision for scalar op in test_vx_aORm_fp_ops\n");
+                  exit(1);
+               }
+               do_aXp = True;
+            }
+      } else if (test_type < VX_BASIC_CMP) {
+         // Then it must be a VX_VECTOR_xxx type
+            stride = do_dp ? 2 : 4;
+            if (!repeat) {
+               // No need to work up the testcase name here, since that will be done in
+               // the print_vx_aORm_fp_result() function we'll call for vector-type ops.
+               repeat = 1;
+               do_aXp = True;
+            }
+      } else {
+            printf("ERROR:  Invalid VX FP test type %d\n", test_type);
+            exit(1);
+      }
+
+again:
+      for (i = 0; i < test_group.num_tests; i+=stride) {
+         void  * inA, * inB;
+         int m, fp_idx[4];
+         unsigned long long vsr_XT[2];
+         unsigned long long vsr_XB[2];
+         fp_test_args_t aTest = test_group.targs[i];
+         for (m = 0; m < stride; m++)
+            fp_idx[m] = i % (nb_special_fargs - stride) + m;
+
+         /* When repeat == True, we're on the first time through of one of the VX_FP_SMx
+          * test types, meaning we're testing a xs<ZZZ>adp case, thus we have to swap
+          * inputs as described above:
+          *    src2 <= VSX[XT]
+          *    src3 <= VSX[XB]
+          */
+         if (scalar) {
+            // For scalar op, only need to copy one doubleword into each vector's element 0
+            inA = (void *)&spec_fargs[aTest.fra_idx];
+            inB = (void *)&spec_fargs[aTest.frb_idx];
+            frap = (unsigned long long *)&spec_fargs[aTest.fra_idx];
+            memcpy(&vec_inA, inA, 8);
+            if (repeat) {
+               memcpy(&vec_out, inB, 8);  // src2
+               memcpy(&vec_inB, &spec_fargs[fp_idx[0]], 8);  //src3
+               frbp = (unsigned long long *)&spec_fargs[fp_idx[0]];
+            } else {
+               frbp = (unsigned long long *)&spec_fargs[aTest.frb_idx];
+               memcpy(&vec_inB, inB, 8);  // src2
+               memcpy(&vec_out, &spec_fargs[fp_idx[0]], 8);  //src3
+            }
+            memcpy(vsr_XT, &vec_out, 8);
+         } else {
+            int j, loops = do_dp ? 2 : 4;
+            size_t len = do_dp ? 8 : 4;
+            void * vec_src = repeat ? (void *)&vec_inB : (void *)&vec_out;
+            for (j = 0; j < loops; j++) {
+               if (do_dp)
+                  memcpy(vec_src + (j * len), &spec_fargs[fp_idx[j]], len);
+               else
+                  memcpy(vec_src + (j * len), &spec_sp_fargs[fp_idx[j]], len);
+            }
+            if (do_dp)
+               setup_dp_fp_args(&test_group.targs[i], repeat);
+            else
+               setup_sp_fp_args(&test_group.targs[i], repeat);
+
+            memcpy(vsr_XT, &vec_out, 16);
+            memcpy(vsr_XB, &vec_inB, 16);
+         }
+
+         (*func)();
+         dst = (unsigned long long *) &vec_out;
+         if (test_type < VX_VECTOR_FP_MULT_AND_OP2)
+            printf( "#%d: %s %s(%016llx,%016llx,%016llx) = %016llx\n", i,
+                    test_name, test_group.op, vsr_XT[0], *frap, *frbp, *dst );
+         else
+            print_vx_aORm_fp_result(vsr_XT, vsr_XB, &test_group, i);
+      }
+      printf( "\n" );
+
+      if (repeat) {
+         repeat = 0;
+         if (test_type < VX_VECTOR_FP_MULT_AND_OP2) {
+               strcpy(test_name, test_group.name);
+               strcat(test_name, "mdp");
+         }
+         do_aXp = False;
+         goto again;
+      }
+      k++;
+   }
+   printf( "\n" );
+   free(test_name);
+}
+
+static void test_vx_vector_one_fp_arg(void)
+{
+   test_func_t func;
+   int k;
+   k = 0;
+   build_special_fargs_table();
+
+   while ((func = vx_vector_one_fp_arg_tests[k].test_func)) {
+      int idx, i;
+      vx_fp_test_t test_group = vx_vector_one_fp_arg_tests[k];
+      Bool convToWord = (test_group.type == VX_CONV_WORD);
+      Bool dp = (test_group.precision == DOUBLE_TEST) ? True : False;
+      Bool xvrespTest = (strstr(test_group.name , "xvresp") != NULL) ? True: False;
+      int stride = dp ? 2 : 4;
+
+      for (i = 0; i < test_group.num_tests; i+=stride) {
+         unsigned int * pv;
+         void * inB;
+
+         pv = (unsigned int *)&vec_out;
+         // clear vec_out
+         for (idx = 0; idx < 4; idx++, pv++)
+            *pv = 0;
+
+         if (dp) {
+            int j;
+            unsigned long long * frB_dp, *dst_dp;
+            for (j = 0; j < 2; j++) {
+               inB = (void *)&spec_fargs[i + j];
+               // copy double precision FP into vector element i
+               memcpy(((void *)&vec_inB) + (j * 8), inB, 8);
+            }
+            // execute test insn
+            (*func)();
+            dst_dp = (unsigned long long *) &vec_out;
+            printf("#%d: %s ", i/2, test_group.name);
+            for (j = 0; j < 2; j++) {
+               if (j)
+                  printf("; ");
+               frB_dp = (unsigned long long *)&spec_fargs[i + j];
+               printf("%s(%016llx)", test_group.op, *frB_dp);
+               printf(" = %016llx", convToWord ? (dst_dp[j] & 0x00000000ffffffffULL) : dst_dp[j]);
+            }
+            printf("\n");
+         } else {
+            int j;
+            unsigned int * frB_sp, * dst_sp;
+
+            for (j = 0; j < 4; j++) {
+               inB = (void *)&spec_sp_fargs[i + j];
+               // copy single precision FP into vector element i
+               memcpy(((void *)&vec_inB) + (j * 4), inB, 4);
+            }
+            // execute test insn
+            (*func)();
+            dst_sp = (unsigned int *) &vec_out;
+            // print result
+            printf("#%d: %s ", i/4, test_group.name);
+            for (j = 0; j < 4; j++) {
+               if (j)
+                  printf("; ");
+               frB_sp = (unsigned int *)&spec_sp_fargs[i + j];
+               printf("%s(%08x)", test_group.op, *frB_sp);
+               if (xvrespTest) {
+                  float calc_diff = fabs(spec_sp_fargs[i + j]/256);
+                  float sp_res;
+                  memcpy(&sp_res, &dst_sp[j], 4);
+                  float div_result = 1/spec_sp_fargs[i + j];
+                  float real_diff = fabs(sp_res - div_result);
+                  printf( " ==> %s",
+                          ( ( sp_res == div_result )
+                                   || ( isnan(sp_res) && isnan(div_result) )
+                                   || ( real_diff <= calc_diff ) ) ? "PASS"
+                                                                     : "FAIL");
+               } else {
+                  printf(" = %08x", dst_sp[j]);
+               }
+            }
+            printf("\n");
+         }
+      }
+      k++;
+      printf( "\n" );
+   }
+
+}
+
+/* This function assumes the instruction being tested requires two args. */
+static void test_vx_vector_fp_ops(void)
+{
+   test_func_t func;
+   int k;
+   k = 0;
+   build_special_fargs_table();
+
+   while ((func = vx_vector_fp_tests[k].test_func)) {
+      int idx, i, repeat = 1;
+      vx_fp_test_t test_group = vx_vector_fp_tests[k];
+      int stride = test_group.precision == DOUBLE_TEST ? 2 : 4;
+      do_dot = False;
+
+again:
+      for (i = 0; i < test_group.num_tests; i+=stride) {
+         unsigned int * pv, condreg;
+         unsigned int flags;
+
+         pv = (unsigned int *)&vec_out;
+         if (test_group.precision == DOUBLE_TEST)
+            setup_dp_fp_args(&test_group.targs[i], False);
+         else
+            setup_sp_fp_args(&test_group.targs[i], False);
+
+         // clear vec_out
+         for (idx = 0; idx < 4; idx++, pv++)
+            *pv = 0;
+
+         // execute test insn
+         SET_FPSCR_ZERO;
+         SET_CR_XER_ZERO;
+         (*func)();
+         GET_CR(flags);
+         if (test_group.type == VX_BASIC_CMP) {
+            condreg = (flags & 0x000000f0) >> 4;
+         } else {
+            condreg = VX_NOT_CMP_OP;
+         }
+         print_vector_fp_result(condreg, &test_group, i);
+      }
+      printf("\n");
+      if (repeat && test_group.type == VX_BASIC_CMP) {
+         repeat = 0;
+         do_dot = True;
+         goto again;
+      }
+      k++;
+      printf( "\n" );
+   }
+}
+
+
+// The div doubleword test data
+signed long long div_dw_tdata[13][2] = {
+                                       { 4, -4 },
+                                       { 4, -3 },
+                                       { 4, 4 },
+                                       { 4, -5 },
+                                       { 3, 8 },
+                                       { 0x8000000000000000, 0xa },
+                                       { 0x50c, -1 },
+                                       { 0x50c, -4096 },
+                                       { 0x1234fedc, 0x8000a873 },
+                                       { 0xabcd87651234fedc, 0xa123b893 },
+                                       { 0x123456789abdc, 0 },
+                                       { 0, 2 },
+                                       { 0x77, 0xa3499 }
+};
+#define dw_tdata_len (sizeof(div_dw_tdata)/sizeof(signed long long)/2)
+
+// The div word test data
+unsigned int div_w_tdata[6][2] = {
+                              { 0, 2 },
+                              { 2, 0 },
+                              { 0x7abc1234, 0xf0000000 },
+                              { 0xfabc1234, 5 },
+                              { 77, 66 },
+                              { 5, 0xfabc1234 },
+};
+#define w_tdata_len (sizeof(div_w_tdata)/sizeof(unsigned int)/2)
+
+typedef struct div_ext_test
+{
+   test_func_t test_func;
+   const char *name;
+   int num_tests;
+   div_type_t div_type;
+   precision_type_t precision;
+} div_ext_test_t;
+
+static div_ext_test_t div_tests[] = {
+#ifdef __powerpc64__
+                                   { &test_divde, "divde", dw_tdata_len, DIV_BASE, DOUBLE_TEST },
+                                   { &test_divde, "divdeo", dw_tdata_len, DIV_OE, DOUBLE_TEST },
+#endif
+                                   { &test_divweu, "divweu", w_tdata_len, DIV_BASE, SINGLE_TEST },
+                                   { &test_divweu, "divweuo", w_tdata_len, DIV_OE, SINGLE_TEST },
+                                   { NULL, NULL, 0, 0, 0 }
+};
+
+static void test_div_extensions(void)
+{
+   test_func_t func;
+   int k;
+   k = 0;
+
+   while ((func = div_tests[k].test_func)) {
+      int i, repeat = 1;
+      div_ext_test_t test_group = div_tests[k];
+      do_dot = False;
+
+again:
+      for (i = 0; i < test_group.num_tests; i++) {
+         unsigned int condreg;
+
+         if (test_group.div_type == DIV_OE)
+            do_OE = True;
+         else
+            do_OE = False;
+
+         if (test_group.precision == DOUBLE_TEST) {
+            r14 = div_dw_tdata[i][0];
+            r15 = div_dw_tdata[i][1];
+         } else {
+            r14 = div_w_tdata[i][0];
+            r15 = div_w_tdata[i][1];
+         }
+         // execute test insn
+         (*func)();
+         condreg = (div_flags & 0xf0000000) >> 28;
+         printf("#%d: %s%s: ", i, test_group.name, do_dot ? "." : "");
+         if (test_group.precision == DOUBLE_TEST) {
+            printf("0x%016llx / 0x%016llx = 0x%016llx;",
+                   div_dw_tdata[i][0], div_dw_tdata[i][1], (signed long long) r17);
+         } else {
+            printf("0x%08x / 0x%08x = 0x%08x;",
+                   div_w_tdata[i][0], div_w_tdata[i][1], (unsigned int) r17);
+         }
+         printf(" CR=%x; XER=%x\n", condreg, div_xer);
+      }
+      printf("\n");
+      if (repeat) {
+         repeat = 0;
+         do_dot = True;
+         goto again;
+      }
+      k++;
+      printf( "\n" );
+   }
+
+}
+
+static void test_fct_ops(void)
+{
+   test_func_t func;
+   int k;
+   k = 0;
+
+   while ((func = fct_tests[k].test_func)) {
+      int i, repeat = 1;
+      simple_test_t test_group = fct_tests[k];
+      do_dot = False;
+
+again:
+      for (i = 0; i < nb_special_fargs; i++) {
+         double result;
+#define SINGLE_MASK 0x00000000FFFFFFFFULL
+
+         f14 = spec_fargs[i];
+         // execute test insn
+         SET_FPSCR_ZERO;
+         (*func)();
+         result = f17;
+         printf("#%d: %s%s: ", i, test_group.name, do_dot ? "." : "");
+         printf("0x%016llx (%e) ==> 0x%016llx\n",
+                *((unsigned long long *)(&spec_fargs[i])), spec_fargs[i],
+                test_group.precision == SINGLE_TEST ? (SINGLE_MASK &
+                         *((unsigned long long *)(&result))) :
+                         *((unsigned long long *)(&result)));
+      }
+      printf("\n");
+      if (repeat) {
+         repeat = 0;
+         do_dot = True;
+         goto again;
+      }
+      k++;
+      printf( "\n" );
+   }
+}
+
+#ifdef __powerpc64__
+void test_stdbrx(void)
+{
+   unsigned long long store, val = 0xdeadbacf12345678ULL;
+   printf("stdbrx: 0x%llx ==> ", val);
+   r17 = (HWord_t)val;
+   r14 = (HWord_t)&store;
+   __asm__ __volatile__ ("stdbrx %0, 0, %1" : : "r"(r17), "r"(r14));
+   printf("0x%llx\n", store);
+   printf( "\n" );
+}
+#endif
+
+static test_table_t
+         all_tests[] =
+{
+                    { &test_vx_vector_one_fp_arg,
+                      "Test VSX vector single arg instructions"},
+                    { &test_vx_vector_fp_ops,
+                      "Test VSX floating point compare and basic arithmetic instructions" },
+#ifdef __powerpc64__
+                     { &test_bpermd,
+                       "Test bit permute double"},
+#endif
+                     { &test_xxsel,
+                         "Test xxsel instruction" },
+                     { &test_xxspltw,
+                         "Test xxspltw instruction" },
+                     { &test_div_extensions,
+                       "Test div extensions" },
+                     { &test_fct_ops,
+                       "Test floating point convert [word | doubleword] unsigned, with round toward zero" },
+#ifdef __powerpc64__
+                     { &test_stdbrx,
+                      "Test stdbrx instruction"},
+#endif
+                     { &test_vx_aORm_fp_ops,
+                      "Test floating point arithmetic instructions -- with a{d|s}p or m{d|s}p"},
+                     { &test_vx_simple_scalar_fp_ops,
+                      "Test scalar floating point arithmetic instructions"},
+                     { NULL, NULL }
+};
+#endif // HAS_VSX
+
+int main(int argc, char *argv[])
+{
+#ifdef HAS_VSX
+
+   test_table_t aTest;
+   test_func_t func;
+   int i = 0;
+
+   while ((func = all_tests[i].test_category)) {
+      aTest = all_tests[i];
+      printf( "%s\n", aTest.name );
+      (*func)();
+      i++;
+   }
+   if (spec_fargs)
+     free(spec_fargs);
+   if (spec_sp_fargs)
+     free(spec_sp_fargs);
+
+#endif // HAS _VSX
+
+   return 0;
+}
--- valgrind/none/tests/ppc32/test_isa_2_06_part2.stderr.exp	(revision 0)
+++ valgrind/none/tests/ppc32/test_isa_2_06_part2.stderr.exp	(revision 11908)
@@ -0,0 +1,2 @@
+
+
--- valgrind/none/tests/ppc32/Makefile.am	(revision 11906)
+++ valgrind/none/tests/ppc32/Makefile.am	(revision 11908)
@@ -27,14 +27,16 @@ EXTRA_DIST = \
 	xlc_dbl_u32.stderr.exp xlc_dbl_u32.stdout.exp xlc_dbl_u32.vgtest \
 	power5+_round.stderr.exp power5+_round.stdout.exp power5+_round.vgtest \
 	power6_bcmp.stderr.exp power6_bcmp.stdout.exp power6_bcmp.vgtest \
-	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest
+	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest \
+	test_isa_2_06_part2.stderr.exp  test_isa_2_06_part2.stdout.exp  test_isa_2_06_part2.vgtest
 
 check_PROGRAMS = \
 	bug129390-ppc32 \
 	bug139050-ppc32 \
 	ldstrev lsw jm-insns mftocrf mcrfs round test_fx test_gx \
 	testVMX twi tw xlc_dbl_u32 power5+_round power6_bcmp \
-	test_isa_2_06_part1
+	test_isa_2_06_part1 \
+	test_isa_2_06_part2
 
 AM_CFLAGS    += @FLAG_M32@
 AM_CXXFLAGS  += @FLAG_M32@
@@ -63,3 +65,6 @@ testVMX_CFLAGS  = $(AM_CFLAGS) -O -g -Wa
 test_isa_2_06_part1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
 			@FLAG_M32@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
 
+test_isa_2_06_part2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
+			@FLAG_M32@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
+
--- valgrind/none/tests/ppc64/test_isa_2_06_part2.vgtest	(revision 0)
+++ valgrind/none/tests/ppc64/test_isa_2_06_part2.vgtest	(revision 11908)
@@ -0,0 +1,2 @@
+prereq: ../../../tests/check_isa-2_06_cap
+prog: test_isa_2_06_part2
--- valgrind/none/tests/ppc64/test_isa_2_06_part2.stdout.exp	(revision 0)
+++ valgrind/none/tests/ppc64/test_isa_2_06_part2.stdout.exp	(revision 11908)
@@ -0,0 +1,1763 @@
+Test VSX vector single arg instructions
+#0: xvresp 1/x(3ec00000) ==> PASS; 1/x(42780000) ==> PASS; 1/x(00000000) ==> PASS; 1/x(7f800000) ==> PASS
+#1: xvresp 1/x(00000000) ==> PASS; 1/x(00000000) ==> PASS; 1/x(80000000) ==> PASS; 1/x(7f800000) ==> PASS
+#2: xvresp 1/x(ff800000) ==> PASS; 1/x(7fffffff) ==> PASS; 1/x(ffffffff) ==> PASS; 1/x(7fc00000) ==> PASS
+#3: xvresp 1/x(ffc00000) ==> PASS; 1/x(80000000) ==> PASS; 1/x(c683287b) ==> PASS; 1/x(49192c2d) ==> PASS
+
+#0: xvcvdpsxws conv(3fd8000000000000) = 0000000000000000; conv(404f000000000000) = 000000000000003e
+#1: xvcvdpsxws conv(0018000000b77501) = 0000000000000000; conv(7fe800000000051b) = 000000007fffffff
+#2: xvcvdpsxws conv(0123214569900000) = 0000000000000000; conv(0000000000000000) = 0000000000000000
+#3: xvcvdpsxws conv(8000000000000000) = 0000000000000000; conv(7ff0000000000000) = 000000007fffffff
+#4: xvcvdpsxws conv(fff0000000000000) = 0000000080000000; conv(7ff7ffffffffffff) = 0000000080000000
+#5: xvcvdpsxws conv(fff7ffffffffffff) = 0000000080000000; conv(7ff8000000000000) = 0000000080000000
+#6: xvcvdpsxws conv(fff8000000000000) = 0000000080000000; conv(8008340000078000) = 0000000000000000
+#7: xvcvdpsxws conv(c0d0650f5a07b353) = 00000000ffffbe6c; conv(41232585a9900000) = 00000000000992c2
+
+#0: xvcvspsxws conv(3ec00000) = 00000000; conv(42780000) = 0000003e; conv(00000000) = 00000000; conv(7f800000) = 7fffffff
+#1: xvcvspsxws conv(00000000) = 00000000; conv(00000000) = 00000000; conv(80000000) = 00000000; conv(7f800000) = 7fffffff
+#2: xvcvspsxws conv(ff800000) = 80000000; conv(7fffffff) = 80000000; conv(ffffffff) = 80000000; conv(7fc00000) = 80000000
+#3: xvcvspsxws conv(ffc00000) = 80000000; conv(80000000) = 00000000; conv(c683287b) = ffffbe6c; conv(49192c2d) = 000992c2
+
+Test VSX floating point compare and basic arithmetic instructions
+#0: xvcmpeqdp fff0000000000000 eq fff0000000000000 AND fff0000000000000 eq c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpeqdp fff0000000000000 eq 8000000000000000 AND fff0000000000000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#2: xvcmpeqdp fff0000000000000 eq 0123214569900000 AND fff0000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#3: xvcmpeqdp fff0000000000000 eq 7ff7ffffffffffff AND fff0000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#4: xvcmpeqdp c0d0650f5a07b353 eq fff0000000000000 AND c0d0650f5a07b353 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 ffffffffffffffff
+#5: xvcmpeqdp c0d0650f5a07b353 eq 8000000000000000 AND c0d0650f5a07b353 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#6: xvcmpeqdp c0d0650f5a07b353 eq 0123214569900000 AND c0d0650f5a07b353 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#7: xvcmpeqdp c0d0650f5a07b353 eq 7ff7ffffffffffff AND c0d0650f5a07b353 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#8: xvcmpeqdp 8000000000000000 eq fff0000000000000 AND 8000000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#9: xvcmpeqdp 8000000000000000 eq 8000000000000000 AND 8000000000000000 eq 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpeqdp 8000000000000000 eq 0123214569900000 AND 8000000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#11: xvcmpeqdp 8000000000000000 eq 7ff7ffffffffffff AND 8000000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#12: xvcmpeqdp 0000000000000000 eq fff0000000000000 AND 0000000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#13: xvcmpeqdp 0000000000000000 eq 8000000000000000 AND 0000000000000000 eq 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpeqdp 0000000000000000 eq 0123214569900000 AND 0000000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#15: xvcmpeqdp 0000000000000000 eq 7ff7ffffffffffff AND 0000000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#16: xvcmpeqdp 0123214569900000 eq fff0000000000000 AND 0123214569900000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#17: xvcmpeqdp 0123214569900000 eq 8000000000000000 AND 0123214569900000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#18: xvcmpeqdp 0123214569900000 eq 404f000000000000 AND 0123214569900000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#19: xvcmpeqdp 0123214569900000 eq 7ff7ffffffffffff AND 0123214569900000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#20: xvcmpeqdp 7ff0000000000000 eq fff0000000000000 AND 7ff0000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#21: xvcmpeqdp 7ff0000000000000 eq 8000000000000000 AND 7ff0000000000000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#22: xvcmpeqdp 7ff0000000000000 eq 0123214569900000 AND 7ff0000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 ffffffffffffffff
+#23: xvcmpeqdp 7ff0000000000000 eq 7ff7ffffffffffff AND 7ff0000000000000 eq 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#24: xvcmpeqdp fff7ffffffffffff eq fff0000000000000 AND fff7ffffffffffff eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#25: xvcmpeqdp fff7ffffffffffff eq 8000000000000000 AND fff7ffffffffffff eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#26: xvcmpeqdp fff7ffffffffffff eq 0123214569900000 AND fff7ffffffffffff eq 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#27: xvcmpeqdp fff7ffffffffffff eq 7ff7ffffffffffff AND fff7ffffffffffff eq fff7ffffffffffff ? cc=0 => 0000000000000000 0000000000000000
+#28: xvcmpeqdp fff8000000000000 eq fff0000000000000 AND fff8000000000000 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#29: xvcmpeqdp fff8000000000000 eq 8000000000000000 AND fff8000000000000 eq 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#30: xvcmpeqdp 404f000000000000 eq 404f000000000000 AND 0018000000b77501 eq 0018000000b77501 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpeqdp 7fe800000000051b eq 7fe800000000051b AND 0123214569900000 eq 0123214569900000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+
+#0: xvcmpeqdp. fff0000000000000 eq fff0000000000000 AND fff0000000000000 eq c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpeqdp. fff0000000000000 eq 8000000000000000 AND fff0000000000000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#2: xvcmpeqdp. fff0000000000000 eq 0123214569900000 AND fff0000000000000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#3: xvcmpeqdp. fff0000000000000 eq 7ff7ffffffffffff AND fff0000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#4: xvcmpeqdp. c0d0650f5a07b353 eq fff0000000000000 AND c0d0650f5a07b353 eq c0d0650f5a07b353 ? cc=0 => 0000000000000000 ffffffffffffffff
+#5: xvcmpeqdp. c0d0650f5a07b353 eq 8000000000000000 AND c0d0650f5a07b353 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#6: xvcmpeqdp. c0d0650f5a07b353 eq 0123214569900000 AND c0d0650f5a07b353 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#7: xvcmpeqdp. c0d0650f5a07b353 eq 7ff7ffffffffffff AND c0d0650f5a07b353 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#8: xvcmpeqdp. 8000000000000000 eq fff0000000000000 AND 8000000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#9: xvcmpeqdp. 8000000000000000 eq 8000000000000000 AND 8000000000000000 eq 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpeqdp. 8000000000000000 eq 0123214569900000 AND 8000000000000000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#11: xvcmpeqdp. 8000000000000000 eq 7ff7ffffffffffff AND 8000000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#12: xvcmpeqdp. 0000000000000000 eq fff0000000000000 AND 0000000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#13: xvcmpeqdp. 0000000000000000 eq 8000000000000000 AND 0000000000000000 eq 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpeqdp. 0000000000000000 eq 0123214569900000 AND 0000000000000000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#15: xvcmpeqdp. 0000000000000000 eq 7ff7ffffffffffff AND 0000000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#16: xvcmpeqdp. 0123214569900000 eq fff0000000000000 AND 0123214569900000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#17: xvcmpeqdp. 0123214569900000 eq 8000000000000000 AND 0123214569900000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#18: xvcmpeqdp. 0123214569900000 eq 404f000000000000 AND 0123214569900000 eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#19: xvcmpeqdp. 0123214569900000 eq 7ff7ffffffffffff AND 0123214569900000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#20: xvcmpeqdp. 7ff0000000000000 eq fff0000000000000 AND 7ff0000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#21: xvcmpeqdp. 7ff0000000000000 eq 8000000000000000 AND 7ff0000000000000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#22: xvcmpeqdp. 7ff0000000000000 eq 0123214569900000 AND 7ff0000000000000 eq 7ff0000000000000 ? cc=0 => 0000000000000000 ffffffffffffffff
+#23: xvcmpeqdp. 7ff0000000000000 eq 7ff7ffffffffffff AND 7ff0000000000000 eq 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#24: xvcmpeqdp. fff7ffffffffffff eq fff0000000000000 AND fff7ffffffffffff eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#25: xvcmpeqdp. fff7ffffffffffff eq 8000000000000000 AND fff7ffffffffffff eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#26: xvcmpeqdp. fff7ffffffffffff eq 0123214569900000 AND fff7ffffffffffff eq 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#27: xvcmpeqdp. fff7ffffffffffff eq 7ff7ffffffffffff AND fff7ffffffffffff eq fff7ffffffffffff ? cc=2 => 0000000000000000 0000000000000000
+#28: xvcmpeqdp. fff8000000000000 eq fff0000000000000 AND fff8000000000000 eq c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#29: xvcmpeqdp. fff8000000000000 eq 8000000000000000 AND fff8000000000000 eq 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#30: xvcmpeqdp. 404f000000000000 eq 404f000000000000 AND 0018000000b77501 eq 0018000000b77501 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpeqdp. 7fe800000000051b eq 7fe800000000051b AND 0123214569900000 eq 0123214569900000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+
+
+#0: xvcmpgedp fff0000000000000 ge fff0000000000000 AND fff0000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpgedp fff0000000000000 ge 8000000000000000 AND fff0000000000000 ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#2: xvcmpgedp fff0000000000000 ge 0123214569900000 AND fff0000000000000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#3: xvcmpgedp fff0000000000000 ge 7ff7ffffffffffff AND fff0000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#4: xvcmpgedp c0d0650f5a07b353 ge fff0000000000000 AND c0d0650f5a07b353 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#5: xvcmpgedp c0d0650f5a07b353 ge 8000000000000000 AND c0d0650f5a07b353 ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#6: xvcmpgedp c0d0650f5a07b353 ge 0123214569900000 AND c0d0650f5a07b353 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#7: xvcmpgedp c0d0650f5a07b353 ge 7ff7ffffffffffff AND c0d0650f5a07b353 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#8: xvcmpgedp 8000000000000000 ge fff0000000000000 AND 8000000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgedp 8000000000000000 ge 8000000000000000 AND 8000000000000000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpgedp 8000000000000000 ge 0123214569900000 AND 8000000000000000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#11: xvcmpgedp 8000000000000000 ge 7ff7ffffffffffff AND 8000000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#12: xvcmpgedp 0000000000000000 ge fff0000000000000 AND 0000000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgedp 0000000000000000 ge 8000000000000000 AND 0000000000000000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpgedp 0000000000000000 ge 0123214569900000 AND 0000000000000000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#15: xvcmpgedp 0000000000000000 ge 7ff7ffffffffffff AND 0000000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#16: xvcmpgedp 0123214569900000 ge fff0000000000000 AND 0123214569900000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgedp 0123214569900000 ge 8000000000000000 AND 0123214569900000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgedp 0123214569900000 ge 404f000000000000 AND 0123214569900000 ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#19: xvcmpgedp 0123214569900000 ge 7ff7ffffffffffff AND 0123214569900000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#20: xvcmpgedp 7ff0000000000000 ge fff0000000000000 AND 7ff0000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgedp 7ff0000000000000 ge 8000000000000000 AND 7ff0000000000000 ge 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgedp 7ff0000000000000 ge 0123214569900000 AND 7ff0000000000000 ge 7ff0000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#23: xvcmpgedp 7ff0000000000000 ge 7ff7ffffffffffff AND 7ff0000000000000 ge 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#24: xvcmpgedp fff7ffffffffffff ge fff0000000000000 AND fff7ffffffffffff ge c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#25: xvcmpgedp fff7ffffffffffff ge 8000000000000000 AND fff7ffffffffffff ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#26: xvcmpgedp fff7ffffffffffff ge 0123214569900000 AND fff7ffffffffffff ge 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#27: xvcmpgedp fff7ffffffffffff ge 7ff7ffffffffffff AND fff7ffffffffffff ge fff7ffffffffffff ? cc=0 => 0000000000000000 0000000000000000
+#28: xvcmpgedp fff8000000000000 ge fff0000000000000 AND fff8000000000000 ge c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#29: xvcmpgedp fff8000000000000 ge 8000000000000000 AND fff8000000000000 ge 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#30: xvcmpgedp 404f000000000000 ge 404f000000000000 AND 0018000000b77501 ge 0018000000b77501 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpgedp 7fe800000000051b ge 7fe800000000051b AND 0123214569900000 ge 0123214569900000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+
+#0: xvcmpgedp. fff0000000000000 ge fff0000000000000 AND fff0000000000000 ge c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#1: xvcmpgedp. fff0000000000000 ge 8000000000000000 AND fff0000000000000 ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#2: xvcmpgedp. fff0000000000000 ge 0123214569900000 AND fff0000000000000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#3: xvcmpgedp. fff0000000000000 ge 7ff7ffffffffffff AND fff0000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#4: xvcmpgedp. c0d0650f5a07b353 ge fff0000000000000 AND c0d0650f5a07b353 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#5: xvcmpgedp. c0d0650f5a07b353 ge 8000000000000000 AND c0d0650f5a07b353 ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#6: xvcmpgedp. c0d0650f5a07b353 ge 0123214569900000 AND c0d0650f5a07b353 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#7: xvcmpgedp. c0d0650f5a07b353 ge 7ff7ffffffffffff AND c0d0650f5a07b353 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#8: xvcmpgedp. 8000000000000000 ge fff0000000000000 AND 8000000000000000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgedp. 8000000000000000 ge 8000000000000000 AND 8000000000000000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#10: xvcmpgedp. 8000000000000000 ge 0123214569900000 AND 8000000000000000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#11: xvcmpgedp. 8000000000000000 ge 7ff7ffffffffffff AND 8000000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#12: xvcmpgedp. 0000000000000000 ge fff0000000000000 AND 0000000000000000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgedp. 0000000000000000 ge 8000000000000000 AND 0000000000000000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#14: xvcmpgedp. 0000000000000000 ge 0123214569900000 AND 0000000000000000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#15: xvcmpgedp. 0000000000000000 ge 7ff7ffffffffffff AND 0000000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#16: xvcmpgedp. 0123214569900000 ge fff0000000000000 AND 0123214569900000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgedp. 0123214569900000 ge 8000000000000000 AND 0123214569900000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgedp. 0123214569900000 ge 404f000000000000 AND 0123214569900000 ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#19: xvcmpgedp. 0123214569900000 ge 7ff7ffffffffffff AND 0123214569900000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#20: xvcmpgedp. 7ff0000000000000 ge fff0000000000000 AND 7ff0000000000000 ge c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgedp. 7ff0000000000000 ge 8000000000000000 AND 7ff0000000000000 ge 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgedp. 7ff0000000000000 ge 0123214569900000 AND 7ff0000000000000 ge 7ff0000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#23: xvcmpgedp. 7ff0000000000000 ge 7ff7ffffffffffff AND 7ff0000000000000 ge 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#24: xvcmpgedp. fff7ffffffffffff ge fff0000000000000 AND fff7ffffffffffff ge c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#25: xvcmpgedp. fff7ffffffffffff ge 8000000000000000 AND fff7ffffffffffff ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#26: xvcmpgedp. fff7ffffffffffff ge 0123214569900000 AND fff7ffffffffffff ge 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#27: xvcmpgedp. fff7ffffffffffff ge 7ff7ffffffffffff AND fff7ffffffffffff ge fff7ffffffffffff ? cc=2 => 0000000000000000 0000000000000000
+#28: xvcmpgedp. fff8000000000000 ge fff0000000000000 AND fff8000000000000 ge c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#29: xvcmpgedp. fff8000000000000 ge 8000000000000000 AND fff8000000000000 ge 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#30: xvcmpgedp. 404f000000000000 ge 404f000000000000 AND 0018000000b77501 ge 0018000000b77501 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#31: xvcmpgedp. 7fe800000000051b ge 7fe800000000051b AND 0123214569900000 ge 0123214569900000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+
+
+#0: xvcmpgtdp fff0000000000000 gt fff0000000000000 AND fff0000000000000 gt c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#1: xvcmpgtdp fff0000000000000 gt 8000000000000000 AND fff0000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#2: xvcmpgtdp fff0000000000000 gt 0123214569900000 AND fff0000000000000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#3: xvcmpgtdp fff0000000000000 gt 7ff7ffffffffffff AND fff0000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#4: xvcmpgtdp c0d0650f5a07b353 gt fff0000000000000 AND c0d0650f5a07b353 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#5: xvcmpgtdp c0d0650f5a07b353 gt 8000000000000000 AND c0d0650f5a07b353 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#6: xvcmpgtdp c0d0650f5a07b353 gt 0123214569900000 AND c0d0650f5a07b353 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#7: xvcmpgtdp c0d0650f5a07b353 gt 7ff7ffffffffffff AND c0d0650f5a07b353 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#8: xvcmpgtdp 8000000000000000 gt fff0000000000000 AND 8000000000000000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgtdp 8000000000000000 gt 8000000000000000 AND 8000000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#10: xvcmpgtdp 8000000000000000 gt 0123214569900000 AND 8000000000000000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#11: xvcmpgtdp 8000000000000000 gt 7ff7ffffffffffff AND 8000000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#12: xvcmpgtdp 0000000000000000 gt fff0000000000000 AND 0000000000000000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgtdp 0000000000000000 gt 8000000000000000 AND 0000000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#14: xvcmpgtdp 0000000000000000 gt 0123214569900000 AND 0000000000000000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#15: xvcmpgtdp 0000000000000000 gt 7ff7ffffffffffff AND 0000000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#16: xvcmpgtdp 0123214569900000 gt fff0000000000000 AND 0123214569900000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgtdp 0123214569900000 gt 8000000000000000 AND 0123214569900000 gt 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgtdp 0123214569900000 gt 404f000000000000 AND 0123214569900000 gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#19: xvcmpgtdp 0123214569900000 gt 7ff7ffffffffffff AND 0123214569900000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#20: xvcmpgtdp 7ff0000000000000 gt fff0000000000000 AND 7ff0000000000000 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgtdp 7ff0000000000000 gt 8000000000000000 AND 7ff0000000000000 gt 0000000000000000 ? cc=0 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgtdp 7ff0000000000000 gt 0123214569900000 AND 7ff0000000000000 gt 7ff0000000000000 ? cc=0 => ffffffffffffffff 0000000000000000
+#23: xvcmpgtdp 7ff0000000000000 gt 7ff7ffffffffffff AND 7ff0000000000000 gt 7ff8000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#24: xvcmpgtdp fff7ffffffffffff gt fff0000000000000 AND fff7ffffffffffff gt c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#25: xvcmpgtdp fff7ffffffffffff gt 8000000000000000 AND fff7ffffffffffff gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#26: xvcmpgtdp fff7ffffffffffff gt 0123214569900000 AND fff7ffffffffffff gt 7ff0000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#27: xvcmpgtdp fff7ffffffffffff gt 7ff7ffffffffffff AND fff7ffffffffffff gt fff7ffffffffffff ? cc=0 => 0000000000000000 0000000000000000
+#28: xvcmpgtdp fff8000000000000 gt fff0000000000000 AND fff8000000000000 gt c0d0650f5a07b353 ? cc=0 => 0000000000000000 0000000000000000
+#29: xvcmpgtdp fff8000000000000 gt 8000000000000000 AND fff8000000000000 gt 0000000000000000 ? cc=0 => 0000000000000000 0000000000000000
+#30: xvcmpgtdp 404f000000000000 gt 404f000000000000 AND 0018000000b77501 gt 0018000000b77501 ? cc=0 => 0000000000000000 0000000000000000
+#31: xvcmpgtdp 7fe800000000051b gt 7fe800000000051b AND 0123214569900000 gt 0123214569900000 ? cc=0 => 0000000000000000 0000000000000000
+
+#0: xvcmpgtdp. fff0000000000000 gt fff0000000000000 AND fff0000000000000 gt c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#1: xvcmpgtdp. fff0000000000000 gt 8000000000000000 AND fff0000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#2: xvcmpgtdp. fff0000000000000 gt 0123214569900000 AND fff0000000000000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#3: xvcmpgtdp. fff0000000000000 gt 7ff7ffffffffffff AND fff0000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#4: xvcmpgtdp. c0d0650f5a07b353 gt fff0000000000000 AND c0d0650f5a07b353 gt c0d0650f5a07b353 ? cc=0 => ffffffffffffffff 0000000000000000
+#5: xvcmpgtdp. c0d0650f5a07b353 gt 8000000000000000 AND c0d0650f5a07b353 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#6: xvcmpgtdp. c0d0650f5a07b353 gt 0123214569900000 AND c0d0650f5a07b353 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#7: xvcmpgtdp. c0d0650f5a07b353 gt 7ff7ffffffffffff AND c0d0650f5a07b353 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#8: xvcmpgtdp. 8000000000000000 gt fff0000000000000 AND 8000000000000000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#9: xvcmpgtdp. 8000000000000000 gt 8000000000000000 AND 8000000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#10: xvcmpgtdp. 8000000000000000 gt 0123214569900000 AND 8000000000000000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#11: xvcmpgtdp. 8000000000000000 gt 7ff7ffffffffffff AND 8000000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#12: xvcmpgtdp. 0000000000000000 gt fff0000000000000 AND 0000000000000000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#13: xvcmpgtdp. 0000000000000000 gt 8000000000000000 AND 0000000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#14: xvcmpgtdp. 0000000000000000 gt 0123214569900000 AND 0000000000000000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#15: xvcmpgtdp. 0000000000000000 gt 7ff7ffffffffffff AND 0000000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#16: xvcmpgtdp. 0123214569900000 gt fff0000000000000 AND 0123214569900000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#17: xvcmpgtdp. 0123214569900000 gt 8000000000000000 AND 0123214569900000 gt 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#18: xvcmpgtdp. 0123214569900000 gt 404f000000000000 AND 0123214569900000 gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#19: xvcmpgtdp. 0123214569900000 gt 7ff7ffffffffffff AND 0123214569900000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#20: xvcmpgtdp. 7ff0000000000000 gt fff0000000000000 AND 7ff0000000000000 gt c0d0650f5a07b353 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#21: xvcmpgtdp. 7ff0000000000000 gt 8000000000000000 AND 7ff0000000000000 gt 0000000000000000 ? cc=8 => ffffffffffffffff ffffffffffffffff
+#22: xvcmpgtdp. 7ff0000000000000 gt 0123214569900000 AND 7ff0000000000000 gt 7ff0000000000000 ? cc=0 => ffffffffffffffff 0000000000000000
+#23: xvcmpgtdp. 7ff0000000000000 gt 7ff7ffffffffffff AND 7ff0000000000000 gt 7ff8000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#24: xvcmpgtdp. fff7ffffffffffff gt fff0000000000000 AND fff7ffffffffffff gt c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#25: xvcmpgtdp. fff7ffffffffffff gt 8000000000000000 AND fff7ffffffffffff gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#26: xvcmpgtdp. fff7ffffffffffff gt 0123214569900000 AND fff7ffffffffffff gt 7ff0000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#27: xvcmpgtdp. fff7ffffffffffff gt 7ff7ffffffffffff AND fff7ffffffffffff gt fff7ffffffffffff ? cc=2 => 0000000000000000 0000000000000000
+#28: xvcmpgtdp. fff8000000000000 gt fff0000000000000 AND fff8000000000000 gt c0d0650f5a07b353 ? cc=2 => 0000000000000000 0000000000000000
+#29: xvcmpgtdp. fff8000000000000 gt 8000000000000000 AND fff8000000000000 gt 0000000000000000 ? cc=2 => 0000000000000000 0000000000000000
+#30: xvcmpgtdp. 404f000000000000 gt 404f000000000000 AND 0018000000b77501 gt 0018000000b77501 ? cc=2 => 0000000000000000 0000000000000000
+#31: xvcmpgtdp. 7fe800000000051b gt 7fe800000000051b AND 0123214569900000 gt 0123214569900000 ? cc=2 => 0000000000000000 0000000000000000
+
+
+#0: xvcmpeqsp ff800000 eq ff800000 AND ff800000 eq c683287b AND ff800000 eq 80000000 AND ff800000 eq 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpeqsp ff800000 eq 00000000 AND ff800000 eq 7f800000 AND ff800000 eq 7fffffff AND ff800000 eq 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#2: xvcmpeqsp c683287b eq ff800000 AND c683287b eq c683287b AND c683287b eq 80000000 AND c683287b eq 00000000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#3: xvcmpeqsp c683287b eq 00000000 AND c683287b eq 7f800000 AND c683287b eq 7fffffff AND c683287b eq 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#4: xvcmpeqsp 80000000 eq ff800000 AND 80000000 eq c683287b AND 80000000 eq 80000000 AND 80000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#5: xvcmpeqsp 80000000 eq 00000000 AND 80000000 eq 7f800000 AND 80000000 eq 7fffffff AND 80000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpeqsp 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#7: xvcmpeqsp 00000000 eq 00000000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpeqsp 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#9: xvcmpeqsp 00000000 eq 42780000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#10: xvcmpeqsp 7f800000 eq ff800000 AND 7f800000 eq c683287b AND 7f800000 eq 80000000 AND 7f800000 eq 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#11: xvcmpeqsp 7f800000 eq 00000000 AND 7f800000 eq 7f800000 AND 7f800000 eq 7fffffff AND 7f800000 eq 7fc00000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#12: xvcmpeqsp ffffffff eq ff800000 AND ffffffff eq c683287b AND ffffffff eq 80000000 AND ffffffff eq 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#13: xvcmpeqsp ffffffff eq 00000000 AND ffffffff eq 7f800000 AND ffffffff eq 7fffffff AND ffffffff eq ffffffff ? cc=0 => 00000000 00000000 00000000 00000000
+#14: xvcmpeqsp ffc00000 eq ff800000 AND ffc00000 eq c683287b AND ffc00000 eq 80000000 AND ffc00000 eq 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#15: xvcmpeqsp 42780000 eq 42780000 AND 00000000 eq 00000000 AND 7f800000 eq 7f800000 AND 00000000 eq 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+
+#0: xvcmpeqsp. ff800000 eq ff800000 AND ff800000 eq c683287b AND ff800000 eq 80000000 AND ff800000 eq 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpeqsp. ff800000 eq 00000000 AND ff800000 eq 7f800000 AND ff800000 eq 7fffffff AND ff800000 eq 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#2: xvcmpeqsp. c683287b eq ff800000 AND c683287b eq c683287b AND c683287b eq 80000000 AND c683287b eq 00000000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#3: xvcmpeqsp. c683287b eq 00000000 AND c683287b eq 7f800000 AND c683287b eq 7fffffff AND c683287b eq 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#4: xvcmpeqsp. 80000000 eq ff800000 AND 80000000 eq c683287b AND 80000000 eq 80000000 AND 80000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#5: xvcmpeqsp. 80000000 eq 00000000 AND 80000000 eq 7f800000 AND 80000000 eq 7fffffff AND 80000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpeqsp. 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#7: xvcmpeqsp. 00000000 eq 00000000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpeqsp. 00000000 eq ff800000 AND 00000000 eq c683287b AND 00000000 eq 80000000 AND 00000000 eq 00000000 ? cc=0 => 00000000 00000000 ffffffff ffffffff
+#9: xvcmpeqsp. 00000000 eq 42780000 AND 00000000 eq 7f800000 AND 00000000 eq 7fffffff AND 00000000 eq 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#10: xvcmpeqsp. 7f800000 eq ff800000 AND 7f800000 eq c683287b AND 7f800000 eq 80000000 AND 7f800000 eq 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#11: xvcmpeqsp. 7f800000 eq 00000000 AND 7f800000 eq 7f800000 AND 7f800000 eq 7fffffff AND 7f800000 eq 7fc00000 ? cc=0 => 00000000 ffffffff 00000000 00000000
+#12: xvcmpeqsp. ffffffff eq ff800000 AND ffffffff eq c683287b AND ffffffff eq 80000000 AND ffffffff eq 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#13: xvcmpeqsp. ffffffff eq 00000000 AND ffffffff eq 7f800000 AND ffffffff eq 7fffffff AND ffffffff eq ffffffff ? cc=2 => 00000000 00000000 00000000 00000000
+#14: xvcmpeqsp. ffc00000 eq ff800000 AND ffc00000 eq c683287b AND ffc00000 eq 80000000 AND ffc00000 eq 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#15: xvcmpeqsp. 42780000 eq 42780000 AND 00000000 eq 00000000 AND 7f800000 eq 7f800000 AND 00000000 eq 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+
+
+#0: xvcmpgesp ff800000 ge ff800000 AND ff800000 ge c683287b AND ff800000 ge 80000000 AND ff800000 ge 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpgesp ff800000 ge 00000000 AND ff800000 ge 7f800000 AND ff800000 ge 7fffffff AND ff800000 ge 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#2: xvcmpgesp c683287b ge ff800000 AND c683287b ge c683287b AND c683287b ge 80000000 AND c683287b ge 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#3: xvcmpgesp c683287b ge 00000000 AND c683287b ge 7f800000 AND c683287b ge 7fffffff AND c683287b ge 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#4: xvcmpgesp 80000000 ge ff800000 AND 80000000 ge c683287b AND 80000000 ge 80000000 AND 80000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#5: xvcmpgesp 80000000 ge 00000000 AND 80000000 ge 7f800000 AND 80000000 ge 7fffffff AND 80000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpgesp 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#7: xvcmpgesp 00000000 ge 00000000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpgesp 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#9: xvcmpgesp 00000000 ge 42780000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#10: xvcmpgesp 7f800000 ge ff800000 AND 7f800000 ge c683287b AND 7f800000 ge 80000000 AND 7f800000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgesp 7f800000 ge 00000000 AND 7f800000 ge 7f800000 AND 7f800000 ge 7fffffff AND 7f800000 ge 7fc00000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#12: xvcmpgesp ffffffff ge ff800000 AND ffffffff ge c683287b AND ffffffff ge 80000000 AND ffffffff ge 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#13: xvcmpgesp ffffffff ge 00000000 AND ffffffff ge 7f800000 AND ffffffff ge 7fffffff AND ffffffff ge ffffffff ? cc=0 => 00000000 00000000 00000000 00000000
+#14: xvcmpgesp ffc00000 ge ff800000 AND ffc00000 ge c683287b AND ffc00000 ge 80000000 AND ffc00000 ge 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#15: xvcmpgesp 42780000 ge 42780000 AND 00000000 ge 00000000 AND 7f800000 ge 7f800000 AND 00000000 ge 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+
+#0: xvcmpgesp. ff800000 ge ff800000 AND ff800000 ge c683287b AND ff800000 ge 80000000 AND ff800000 ge 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#1: xvcmpgesp. ff800000 ge 00000000 AND ff800000 ge 7f800000 AND ff800000 ge 7fffffff AND ff800000 ge 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#2: xvcmpgesp. c683287b ge ff800000 AND c683287b ge c683287b AND c683287b ge 80000000 AND c683287b ge 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#3: xvcmpgesp. c683287b ge 00000000 AND c683287b ge 7f800000 AND c683287b ge 7fffffff AND c683287b ge 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#4: xvcmpgesp. 80000000 ge ff800000 AND 80000000 ge c683287b AND 80000000 ge 80000000 AND 80000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#5: xvcmpgesp. 80000000 ge 00000000 AND 80000000 ge 7f800000 AND 80000000 ge 7fffffff AND 80000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#6: xvcmpgesp. 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#7: xvcmpgesp. 00000000 ge 00000000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#8: xvcmpgesp. 00000000 ge ff800000 AND 00000000 ge c683287b AND 00000000 ge 80000000 AND 00000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#9: xvcmpgesp. 00000000 ge 42780000 AND 00000000 ge 7f800000 AND 00000000 ge 7fffffff AND 00000000 ge 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#10: xvcmpgesp. 7f800000 ge ff800000 AND 7f800000 ge c683287b AND 7f800000 ge 80000000 AND 7f800000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgesp. 7f800000 ge 00000000 AND 7f800000 ge 7f800000 AND 7f800000 ge 7fffffff AND 7f800000 ge 7fc00000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#12: xvcmpgesp. ffffffff ge ff800000 AND ffffffff ge c683287b AND ffffffff ge 80000000 AND ffffffff ge 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#13: xvcmpgesp. ffffffff ge 00000000 AND ffffffff ge 7f800000 AND ffffffff ge 7fffffff AND ffffffff ge ffffffff ? cc=2 => 00000000 00000000 00000000 00000000
+#14: xvcmpgesp. ffc00000 ge ff800000 AND ffc00000 ge c683287b AND ffc00000 ge 80000000 AND ffc00000 ge 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#15: xvcmpgesp. 42780000 ge 42780000 AND 00000000 ge 00000000 AND 7f800000 ge 7f800000 AND 00000000 ge 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+
+
+#0: xvcmpgtsp ff800000 gt ff800000 AND ff800000 gt c683287b AND ff800000 gt 80000000 AND ff800000 gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#1: xvcmpgtsp ff800000 gt 00000000 AND ff800000 gt 7f800000 AND ff800000 gt 7fffffff AND ff800000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#2: xvcmpgtsp c683287b gt ff800000 AND c683287b gt c683287b AND c683287b gt 80000000 AND c683287b gt 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#3: xvcmpgtsp c683287b gt 00000000 AND c683287b gt 7f800000 AND c683287b gt 7fffffff AND c683287b gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#4: xvcmpgtsp 80000000 gt ff800000 AND 80000000 gt c683287b AND 80000000 gt 80000000 AND 80000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#5: xvcmpgtsp 80000000 gt 00000000 AND 80000000 gt 7f800000 AND 80000000 gt 7fffffff AND 80000000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#6: xvcmpgtsp 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#7: xvcmpgtsp 00000000 gt 00000000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#8: xvcmpgtsp 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#9: xvcmpgtsp 00000000 gt 42780000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=0 => 00000000 00000000 00000000 00000000
+#10: xvcmpgtsp 7f800000 gt ff800000 AND 7f800000 gt c683287b AND 7f800000 gt 80000000 AND 7f800000 gt 00000000 ? cc=0 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgtsp 7f800000 gt 00000000 AND 7f800000 gt 7f800000 AND 7f800000 gt 7fffffff AND 7f800000 gt 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#12: xvcmpgtsp ffffffff gt ff800000 AND ffffffff gt c683287b AND ffffffff gt 80000000 AND ffffffff gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#13: xvcmpgtsp ffffffff gt 00000000 AND ffffffff gt 7f800000 AND ffffffff gt 7fffffff AND ffffffff gt ffffffff ? cc=0 => 00000000 00000000 00000000 00000000
+#14: xvcmpgtsp ffc00000 gt ff800000 AND ffc00000 gt c683287b AND ffc00000 gt 80000000 AND ffc00000 gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+#15: xvcmpgtsp 42780000 gt 42780000 AND 00000000 gt 00000000 AND 7f800000 gt 7f800000 AND 00000000 gt 00000000 ? cc=0 => 00000000 00000000 00000000 00000000
+
+#0: xvcmpgtsp. ff800000 gt ff800000 AND ff800000 gt c683287b AND ff800000 gt 80000000 AND ff800000 gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#1: xvcmpgtsp. ff800000 gt 00000000 AND ff800000 gt 7f800000 AND ff800000 gt 7fffffff AND ff800000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#2: xvcmpgtsp. c683287b gt ff800000 AND c683287b gt c683287b AND c683287b gt 80000000 AND c683287b gt 00000000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#3: xvcmpgtsp. c683287b gt 00000000 AND c683287b gt 7f800000 AND c683287b gt 7fffffff AND c683287b gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#4: xvcmpgtsp. 80000000 gt ff800000 AND 80000000 gt c683287b AND 80000000 gt 80000000 AND 80000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#5: xvcmpgtsp. 80000000 gt 00000000 AND 80000000 gt 7f800000 AND 80000000 gt 7fffffff AND 80000000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#6: xvcmpgtsp. 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#7: xvcmpgtsp. 00000000 gt 00000000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#8: xvcmpgtsp. 00000000 gt ff800000 AND 00000000 gt c683287b AND 00000000 gt 80000000 AND 00000000 gt 00000000 ? cc=0 => ffffffff ffffffff 00000000 00000000
+#9: xvcmpgtsp. 00000000 gt 42780000 AND 00000000 gt 7f800000 AND 00000000 gt 7fffffff AND 00000000 gt 7fc00000 ? cc=2 => 00000000 00000000 00000000 00000000
+#10: xvcmpgtsp. 7f800000 gt ff800000 AND 7f800000 gt c683287b AND 7f800000 gt 80000000 AND 7f800000 gt 00000000 ? cc=8 => ffffffff ffffffff ffffffff ffffffff
+#11: xvcmpgtsp. 7f800000 gt 00000000 AND 7f800000 gt 7f800000 AND 7f800000 gt 7fffffff AND 7f800000 gt 7fc00000 ? cc=0 => ffffffff 00000000 00000000 00000000
+#12: xvcmpgtsp. ffffffff gt ff800000 AND ffffffff gt c683287b AND ffffffff gt 80000000 AND ffffffff gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#13: xvcmpgtsp. ffffffff gt 00000000 AND ffffffff gt 7f800000 AND ffffffff gt 7fffffff AND ffffffff gt ffffffff ? cc=2 => 00000000 00000000 00000000 00000000
+#14: xvcmpgtsp. ffc00000 gt ff800000 AND ffc00000 gt c683287b AND ffc00000 gt 80000000 AND ffc00000 gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+#15: xvcmpgtsp. 42780000 gt 42780000 AND 00000000 gt 00000000 AND 7f800000 gt 7f800000 AND 00000000 gt 00000000 ? cc=2 => 00000000 00000000 00000000 00000000
+
+
+#0: xvadddp fff0000000000000 + fff0000000000000 AND fff0000000000000 + c0d0650f5a07b353 => fff0000000000000 fff0000000000000
+#1: xvadddp 41232585a9900000 + 41382511a2000000 AND fff0000000000000 + 0000000000000000 => 4140dbea3b640000 fff0000000000000
+#2: xvadddp fff0000000000000 + 0123214569900000 AND fff0000000000000 + 7ff0000000000000 => fff0000000000000 7ff8000000000000
+#3: xvadddp fff0000000000000 + 7ff7ffffffffffff AND fff0000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvadddp c0d0650f5a07b353 + fff0000000000000 AND c0d0650f5a07b353 + c0d0650f5a07b353 => fff0000000000000 c0e0650f5a07b353
+#5: xvadddp c0d0650f5a07b353 + 8000000000000000 AND c0d0650f5a07b353 + 0000000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#6: xvadddp c0d0650f5a07b353 + 0123214569900000 AND c0d0650f5a07b353 + 7ff0000000000000 => c0d0650f5a07b353 7ff0000000000000
+#7: xvadddp c0d0650f5a07b353 + 7ff7ffffffffffff AND c0d0650f5a07b353 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvadddp 8000000000000000 + fff0000000000000 AND 8000000000000000 + c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#9: xvadddp 8000000000000000 + 8000000000000000 AND 8000000000000000 + 0000000000000000 => 8000000000000000 0000000000000000
+#10: xvadddp 8000000000000000 + 0123214569900000 AND 8000000000000000 + 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#11: xvadddp 8000000000000000 + 7ff7ffffffffffff AND 8000000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvadddp 0000000000000000 + fff0000000000000 AND 0000000000000000 + c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#13: xvadddp 0000000000000000 + 8000000000000000 AND 0000000000000000 + 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvadddp 0000000000000000 + 0123214569900000 AND 0000000000000000 + 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#15: xvadddp 0000000000000000 + 7ff7ffffffffffff AND 0000000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvadddp 0123214569900000 + fff0000000000000 AND 0123214569900000 + c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#17: xvadddp 0123214569900000 + 8000000000000000 AND 0123214569900000 + 0000000000000000 => 0123214569900000 0123214569900000
+#18: xvadddp 0123214569900000 + 404f000000000000 AND 0123214569900000 + 7ff0000000000000 => 404f000000000000 7ff0000000000000
+#19: xvadddp 0123214569900000 + 7ff7ffffffffffff AND 0123214569900000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvadddp 7ff0000000000000 + fff0000000000000 AND 7ff0000000000000 + c0d0650f5a07b353 => 7ff8000000000000 7ff0000000000000
+#21: xvadddp 7ff0000000000000 + 8000000000000000 AND 7ff0000000000000 + 0000000000000000 => 7ff0000000000000 7ff0000000000000
+#22: xvadddp 7ff0000000000000 + 0123214569900000 AND 7ff0000000000000 + 7ff0000000000000 => 7ff0000000000000 7ff0000000000000
+#23: xvadddp 7ff0000000000000 + 7ff7ffffffffffff AND 7ff0000000000000 + 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvadddp fff7ffffffffffff + fff0000000000000 AND fff7ffffffffffff + c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvadddp fff8000000000000 + 8000000000000000 AND fff8000000000000 + 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvadddp fff7ffffffffffff + 0123214569900000 AND fff7ffffffffffff + 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvadddp fff7ffffffffffff + 7ff7ffffffffffff AND fff7ffffffffffff + 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvadddp fff8000000000000 + fff0000000000000 AND fff8000000000000 + c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvadddp fff8000000000000 + 8000000000000000 AND 41232585a9900000 + 41382511a2000000 => fff8000000000000 4140dbea3b640000
+#30: xvadddp 41232585a9900000 + 41382511a2000000 AND 7ff7ffffffffffff + 7ff8000000000000 => 4140dbea3b640000 7fffffffffffffff
+#31: xvadddp 7ff8000000000000 + 7ff8000000000000 AND 7ff8000000000000 + fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvaddsp ff800000 + ff800000 AND ff800000 + c683287b AND 49192c2d + 49c1288d AND ff800000 + 00000000 => ff800000 ff800000 4a06df52 ff800000
+#1: xvaddsp ff800000 + 00000000 AND ff800000 + 7f800000 AND ff800000 + 7fffffff AND ff800000 + 7fc00000 => ff800000 7fc00000 7fffffff 7fc00000
+#2: xvaddsp c683287b + ff800000 AND c683287b + c683287b AND c683287b + 80000000 AND c683287b + 00000000 => ff800000 c703287b c683287b c683287b
+#3: xvaddsp c683287b + 00000000 AND c683287b + 7f800000 AND c683287b + 7fffffff AND c683287b + 7fc00000 => c683287b 7f800000 7fffffff 7fc00000
+#4: xvaddsp 80000000 + ff800000 AND 80000000 + c683287b AND 80000000 + 80000000 AND 80000000 + 00000000 => ff800000 c683287b 80000000 00000000
+#5: xvaddsp 80000000 + 00000000 AND 80000000 + 7f800000 AND 80000000 + 7fffffff AND 80000000 + 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#6: xvaddsp 00000000 + ff800000 AND 00000000 + c683287b AND 00000000 + 80000000 AND 00000000 + 00000000 => ff800000 c683287b 00000000 00000000
+#7: xvaddsp 00000000 + 00000000 AND 00000000 + 7f800000 AND 00000000 + 7fffffff AND 00000000 + 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#8: xvaddsp 00000000 + ff800000 AND 00000000 + c683287b AND 00000000 + 80000000 AND 00000000 + 00000000 => ff800000 c683287b 00000000 00000000
+#9: xvaddsp 00000000 + 42780000 AND 00000000 + 7f800000 AND 00000000 + 7fffffff AND 00000000 + 7fc00000 => 42780000 7f800000 7fffffff 7fc00000
+#10: xvaddsp 7f800000 + ff800000 AND 7f800000 + c683287b AND 7f800000 + 80000000 AND 7f800000 + 00000000 => 7fc00000 7f800000 7f800000 7f800000
+#11: xvaddsp 7f800000 + 00000000 AND 7f800000 + 7f800000 AND 7f800000 + 7fffffff AND 7f800000 + 7fc00000 => 7f800000 7f800000 7fffffff 7fc00000
+#12: xvaddsp ffffffff + ff800000 AND ffffffff + c683287b AND ffc00000 + 80000000 AND ffc00000 + 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvaddsp ffffffff + 00000000 AND ffffffff + 7f800000 AND ffffffff + 7fffffff AND ffffffff + 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvaddsp ffc00000 + ff800000 AND ffc00000 + c683287b AND ffc00000 + 80000000 AND 49192c2d + 49c1288d => ffc00000 ffc00000 ffc00000 4a06df52
+#15: xvaddsp 49192c2d + 49c1288d AND 7fffffff + 7fc00000 AND 7fc00000 + 7fc00000 AND 7fc00000 + ffc00000 => 4a06df52 7fffffff 7fc00000 7fc00000
+
+
+#0: xvdivdp fff0000000000000 / fff0000000000000 AND fff0000000000000 / c0d0650f5a07b353 => 7ff8000000000000 7ff0000000000000
+#1: xvdivdp 41232585a9900000 / 41382511a2000000 AND fff0000000000000 / 0000000000000000 => 3fd9602b4fe7a892 fff0000000000000
+#2: xvdivdp fff0000000000000 / 0123214569900000 AND fff0000000000000 / 7ff0000000000000 => fff0000000000000 7ff8000000000000
+#3: xvdivdp fff0000000000000 / 7ff7ffffffffffff AND fff0000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvdivdp c0d0650f5a07b353 / fff0000000000000 AND c0d0650f5a07b353 / c0d0650f5a07b353 => 0000000000000000 3ff0000000000000
+#5: xvdivdp c0d0650f5a07b353 / 8000000000000000 AND c0d0650f5a07b353 / 0000000000000000 => 7ff0000000000000 fff0000000000000
+#6: xvdivdp c0d0650f5a07b353 / 0123214569900000 AND c0d0650f5a07b353 / 7ff0000000000000 => ff9b6cb57ca13c00 8000000000000000
+#7: xvdivdp c0d0650f5a07b353 / 7ff7ffffffffffff AND c0d0650f5a07b353 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvdivdp 8000000000000000 / fff0000000000000 AND 8000000000000000 / c0d0650f5a07b353 => 0000000000000000 0000000000000000
+#9: xvdivdp 8000000000000000 / 8000000000000000 AND 8000000000000000 / 0000000000000000 => 7ff8000000000000 7ff8000000000000
+#10: xvdivdp 8000000000000000 / 0123214569900000 AND 8000000000000000 / 7ff0000000000000 => 8000000000000000 8000000000000000
+#11: xvdivdp 8000000000000000 / 7ff7ffffffffffff AND 8000000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvdivdp 0000000000000000 / fff0000000000000 AND 0000000000000000 / c0d0650f5a07b353 => 8000000000000000 8000000000000000
+#13: xvdivdp 0000000000000000 / 8000000000000000 AND 0000000000000000 / 0000000000000000 => 7ff8000000000000 7ff8000000000000
+#14: xvdivdp 0000000000000000 / 0123214569900000 AND 0000000000000000 / 7ff0000000000000 => 0000000000000000 0000000000000000
+#15: xvdivdp 0000000000000000 / 7ff7ffffffffffff AND 0000000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvdivdp 0123214569900000 / fff0000000000000 AND 0123214569900000 / c0d0650f5a07b353 => 8000000000000000 8042ab59d8b6ec87
+#17: xvdivdp 0123214569900000 / 8000000000000000 AND 0123214569900000 / 0000000000000000 => fff0000000000000 7ff0000000000000
+#18: xvdivdp 0123214569900000 / 404f000000000000 AND 0123214569900000 / 7ff0000000000000 => 00c3bf3f64b5ad6b 0000000000000000
+#19: xvdivdp 0123214569900000 / 7ff7ffffffffffff AND 0123214569900000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvdivdp 7ff0000000000000 / fff0000000000000 AND 7ff0000000000000 / c0d0650f5a07b353 => 7ff8000000000000 fff0000000000000
+#21: xvdivdp 7ff0000000000000 / 8000000000000000 AND 7ff0000000000000 / 0000000000000000 => fff0000000000000 7ff0000000000000
+#22: xvdivdp 7ff0000000000000 / 0123214569900000 AND 7ff0000000000000 / 7ff0000000000000 => 7ff0000000000000 7ff8000000000000
+#23: xvdivdp 7ff0000000000000 / 7ff7ffffffffffff AND 7ff0000000000000 / 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvdivdp fff7ffffffffffff / fff0000000000000 AND fff7ffffffffffff / c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvdivdp fff8000000000000 / 8000000000000000 AND fff8000000000000 / 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvdivdp fff7ffffffffffff / 0123214569900000 AND fff7ffffffffffff / 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvdivdp fff7ffffffffffff / 7ff7ffffffffffff AND fff7ffffffffffff / 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvdivdp fff8000000000000 / fff0000000000000 AND fff8000000000000 / c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvdivdp fff8000000000000 / 8000000000000000 AND 41232585a9900000 / 41382511a2000000 => fff8000000000000 3fd9602b4fe7a892
+#30: xvdivdp 41232585a9900000 / 41382511a2000000 AND 7ff7ffffffffffff / 7ff8000000000000 => 3fd9602b4fe7a892 7fffffffffffffff
+#31: xvdivdp 7ff8000000000000 / 7ff8000000000000 AND 7ff8000000000000 / fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvdivsp ff800000 / ff800000 AND ff800000 / c683287b AND 49192c2d / 49c1288d AND ff800000 / 00000000 => 7fc00000 7f800000 3ecb015a ff800000
+#1: xvdivsp ff800000 / 00000000 AND ff800000 / 7f800000 AND ff800000 / 7fffffff AND ff800000 / 7fc00000 => ff800000 7fc00000 7fffffff 7fc00000
+#2: xvdivsp c683287b / ff800000 AND c683287b / c683287b AND c683287b / 80000000 AND c683287b / 00000000 => 00000000 3f800000 7f800000 ff800000
+#3: xvdivsp c683287b / 00000000 AND c683287b / 7f800000 AND c683287b / 7fffffff AND c683287b / 7fc00000 => ff800000 80000000 7fffffff 7fc00000
+#4: xvdivsp 80000000 / ff800000 AND 80000000 / c683287b AND 80000000 / 80000000 AND 80000000 / 00000000 => 00000000 00000000 7fc00000 7fc00000
+#5: xvdivsp 80000000 / 00000000 AND 80000000 / 7f800000 AND 80000000 / 7fffffff AND 80000000 / 7fc00000 => 7fc00000 80000000 7fffffff 7fc00000
+#6: xvdivsp 00000000 / ff800000 AND 00000000 / c683287b AND 00000000 / 80000000 AND 00000000 / 00000000 => 80000000 80000000 7fc00000 7fc00000
+#7: xvdivsp 00000000 / 00000000 AND 00000000 / 7f800000 AND 00000000 / 7fffffff AND 00000000 / 7fc00000 => 7fc00000 00000000 7fffffff 7fc00000
+#8: xvdivsp 00000000 / ff800000 AND 00000000 / c683287b AND 00000000 / 80000000 AND 00000000 / 00000000 => 80000000 80000000 7fc00000 7fc00000
+#9: xvdivsp 00000000 / 42780000 AND 00000000 / 7f800000 AND 00000000 / 7fffffff AND 00000000 / 7fc00000 => 00000000 00000000 7fffffff 7fc00000
+#10: xvdivsp 7f800000 / ff800000 AND 7f800000 / c683287b AND 7f800000 / 80000000 AND 7f800000 / 00000000 => 7fc00000 ff800000 ff800000 7f800000
+#11: xvdivsp 7f800000 / 00000000 AND 7f800000 / 7f800000 AND 7f800000 / 7fffffff AND 7f800000 / 7fc00000 => 7f800000 7fc00000 7fffffff 7fc00000
+#12: xvdivsp ffffffff / ff800000 AND ffffffff / c683287b AND ffc00000 / 80000000 AND ffc00000 / 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvdivsp ffffffff / 00000000 AND ffffffff / 7f800000 AND ffffffff / 7fffffff AND ffffffff / 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvdivsp ffc00000 / ff800000 AND ffc00000 / c683287b AND ffc00000 / 80000000 AND 49192c2d / 49c1288d => ffc00000 ffc00000 ffc00000 3ecb015a
+#15: xvdivsp 49192c2d / 49c1288d AND 7fffffff / 7fc00000 AND 7fc00000 / 7fc00000 AND 7fc00000 / ffc00000 => 3ecb015a 7fffffff 7fc00000 7fc00000
+
+
+#0: xvmuldp fff0000000000000 * fff0000000000000 AND fff0000000000000 * c0d0650f5a07b353 => 7ff0000000000000 7ff0000000000000
+#1: xvmuldp 41232585a9900000 * 41382511a2000000 AND fff0000000000000 * 0000000000000000 => 426ce4a45d2a0a7e 7ff8000000000000
+#2: xvmuldp fff0000000000000 * 0123214569900000 AND fff0000000000000 * 7ff0000000000000 => fff0000000000000 fff0000000000000
+#3: xvmuldp fff0000000000000 * 7ff7ffffffffffff AND fff0000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvmuldp c0d0650f5a07b353 * fff0000000000000 AND c0d0650f5a07b353 * c0d0650f5a07b353 => 7ff0000000000000 41b0cc9d05eec2a7
+#5: xvmuldp c0d0650f5a07b353 * 8000000000000000 AND c0d0650f5a07b353 * 0000000000000000 => 0000000000000000 8000000000000000
+#6: xvmuldp c0d0650f5a07b353 * 0123214569900000 AND c0d0650f5a07b353 * 7ff0000000000000 => 82039a19ca8fcb5f fff0000000000000
+#7: xvmuldp c0d0650f5a07b353 * 7ff7ffffffffffff AND c0d0650f5a07b353 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvmuldp 8000000000000000 * fff0000000000000 AND 8000000000000000 * c0d0650f5a07b353 => 7ff8000000000000 0000000000000000
+#9: xvmuldp 8000000000000000 * 8000000000000000 AND 8000000000000000 * 0000000000000000 => 0000000000000000 8000000000000000
+#10: xvmuldp 8000000000000000 * 0123214569900000 AND 8000000000000000 * 7ff0000000000000 => 8000000000000000 7ff8000000000000
+#11: xvmuldp 8000000000000000 * 7ff7ffffffffffff AND 8000000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvmuldp 0000000000000000 * fff0000000000000 AND 0000000000000000 * c0d0650f5a07b353 => 7ff8000000000000 8000000000000000
+#13: xvmuldp 0000000000000000 * 8000000000000000 AND 0000000000000000 * 0000000000000000 => 8000000000000000 0000000000000000
+#14: xvmuldp 0000000000000000 * 0123214569900000 AND 0000000000000000 * 7ff0000000000000 => 0000000000000000 7ff8000000000000
+#15: xvmuldp 0000000000000000 * 7ff7ffffffffffff AND 0000000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvmuldp 0123214569900000 * fff0000000000000 AND 0123214569900000 * c0d0650f5a07b353 => fff0000000000000 82039a19ca8fcb5f
+#17: xvmuldp 0123214569900000 * 8000000000000000 AND 0123214569900000 * 0000000000000000 => 8000000000000000 0000000000000000
+#18: xvmuldp 0123214569900000 * 404f000000000000 AND 0123214569900000 * 7ff0000000000000 => 0182883b3e438000 7ff0000000000000
+#19: xvmuldp 0123214569900000 * 7ff7ffffffffffff AND 0123214569900000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvmuldp 7ff0000000000000 * fff0000000000000 AND 7ff0000000000000 * c0d0650f5a07b353 => fff0000000000000 fff0000000000000
+#21: xvmuldp 7ff0000000000000 * 8000000000000000 AND 7ff0000000000000 * 0000000000000000 => 7ff8000000000000 7ff8000000000000
+#22: xvmuldp 7ff0000000000000 * 0123214569900000 AND 7ff0000000000000 * 7ff0000000000000 => 7ff0000000000000 7ff0000000000000
+#23: xvmuldp 7ff0000000000000 * 7ff7ffffffffffff AND 7ff0000000000000 * 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvmuldp fff7ffffffffffff * fff0000000000000 AND fff7ffffffffffff * c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvmuldp fff8000000000000 * 8000000000000000 AND fff8000000000000 * 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvmuldp fff7ffffffffffff * 0123214569900000 AND fff7ffffffffffff * 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvmuldp fff7ffffffffffff * 7ff7ffffffffffff AND fff7ffffffffffff * 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvmuldp fff8000000000000 * fff0000000000000 AND fff8000000000000 * c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvmuldp fff8000000000000 * 8000000000000000 AND 41232585a9900000 * 41382511a2000000 => fff8000000000000 426ce4a45d2a0a7e
+#30: xvmuldp 41232585a9900000 * 41382511a2000000 AND 7ff7ffffffffffff * 7ff8000000000000 => 426ce4a45d2a0a7e 7fffffffffffffff
+#31: xvmuldp 7ff8000000000000 * 7ff8000000000000 AND 7ff8000000000000 * fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvmulsp ff800000 * ff800000 AND ff800000 * c683287b AND 49192c2d * 49c1288d AND ff800000 * 00000000 => 7f800000 7f800000 53672522 7fc00000
+#1: xvmulsp ff800000 * 00000000 AND ff800000 * 7f800000 AND ff800000 * 7fffffff AND ff800000 * 7fc00000 => 7fc00000 ff800000 7fffffff 7fc00000
+#2: xvmulsp c683287b * ff800000 AND c683287b * c683287b AND c683287b * 80000000 AND c683287b * 00000000 => 7f800000 4d8664e9 00000000 80000000
+#3: xvmulsp c683287b * 00000000 AND c683287b * 7f800000 AND c683287b * 7fffffff AND c683287b * 7fc00000 => 80000000 ff800000 7fffffff 7fc00000
+#4: xvmulsp 80000000 * ff800000 AND 80000000 * c683287b AND 80000000 * 80000000 AND 80000000 * 00000000 => 7fc00000 00000000 00000000 80000000
+#5: xvmulsp 80000000 * 00000000 AND 80000000 * 7f800000 AND 80000000 * 7fffffff AND 80000000 * 7fc00000 => 80000000 7fc00000 7fffffff 7fc00000
+#6: xvmulsp 00000000 * ff800000 AND 00000000 * c683287b AND 00000000 * 80000000 AND 00000000 * 00000000 => 7fc00000 80000000 80000000 00000000
+#7: xvmulsp 00000000 * 00000000 AND 00000000 * 7f800000 AND 00000000 * 7fffffff AND 00000000 * 7fc00000 => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmulsp 00000000 * ff800000 AND 00000000 * c683287b AND 00000000 * 80000000 AND 00000000 * 00000000 => 7fc00000 80000000 80000000 00000000
+#9: xvmulsp 00000000 * 42780000 AND 00000000 * 7f800000 AND 00000000 * 7fffffff AND 00000000 * 7fc00000 => 00000000 7fc00000 7fffffff 7fc00000
+#10: xvmulsp 7f800000 * ff800000 AND 7f800000 * c683287b AND 7f800000 * 80000000 AND 7f800000 * 00000000 => ff800000 ff800000 7fc00000 7fc00000
+#11: xvmulsp 7f800000 * 00000000 AND 7f800000 * 7f800000 AND 7f800000 * 7fffffff AND 7f800000 * 7fc00000 => 7fc00000 7f800000 7fffffff 7fc00000
+#12: xvmulsp ffffffff * ff800000 AND ffffffff * c683287b AND ffc00000 * 80000000 AND ffc00000 * 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmulsp ffffffff * 00000000 AND ffffffff * 7f800000 AND ffffffff * 7fffffff AND ffffffff * 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvmulsp ffc00000 * ff800000 AND ffc00000 * c683287b AND ffc00000 * 80000000 AND 49192c2d * 49c1288d => ffc00000 ffc00000 ffc00000 53672522
+#15: xvmulsp 49192c2d * 49c1288d AND 7fffffff * 7fc00000 AND 7fc00000 * 7fc00000 AND 7fc00000 * ffc00000 => 53672522 7fffffff 7fc00000 7fc00000
+
+
+#0: xvsubdp fff0000000000000 - fff0000000000000 AND fff0000000000000 - c0d0650f5a07b353 => 7ff8000000000000 fff0000000000000
+#1: xvsubdp 41232585a9900000 - 41382511a2000000 AND fff0000000000000 - 0000000000000000 => c12d249d9a700000 fff0000000000000
+#2: xvsubdp fff0000000000000 - 0123214569900000 AND fff0000000000000 - 7ff0000000000000 => fff0000000000000 fff0000000000000
+#3: xvsubdp fff0000000000000 - 7ff7ffffffffffff AND fff0000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#4: xvsubdp c0d0650f5a07b353 - fff0000000000000 AND c0d0650f5a07b353 - c0d0650f5a07b353 => 7ff0000000000000 0000000000000000
+#5: xvsubdp c0d0650f5a07b353 - 8000000000000000 AND c0d0650f5a07b353 - 0000000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#6: xvsubdp c0d0650f5a07b353 - 0123214569900000 AND c0d0650f5a07b353 - 7ff0000000000000 => c0d0650f5a07b353 fff0000000000000
+#7: xvsubdp c0d0650f5a07b353 - 7ff7ffffffffffff AND c0d0650f5a07b353 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#8: xvsubdp 8000000000000000 - fff0000000000000 AND 8000000000000000 - c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#9: xvsubdp 8000000000000000 - 8000000000000000 AND 8000000000000000 - 0000000000000000 => 0000000000000000 8000000000000000
+#10: xvsubdp 8000000000000000 - 0123214569900000 AND 8000000000000000 - 7ff0000000000000 => 8123214569900000 fff0000000000000
+#11: xvsubdp 8000000000000000 - 7ff7ffffffffffff AND 8000000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#12: xvsubdp 0000000000000000 - fff0000000000000 AND 0000000000000000 - c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#13: xvsubdp 0000000000000000 - 8000000000000000 AND 0000000000000000 - 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvsubdp 0000000000000000 - 0123214569900000 AND 0000000000000000 - 7ff0000000000000 => 8123214569900000 fff0000000000000
+#15: xvsubdp 0000000000000000 - 7ff7ffffffffffff AND 0000000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#16: xvsubdp 0123214569900000 - fff0000000000000 AND 0123214569900000 - c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#17: xvsubdp 0123214569900000 - 8000000000000000 AND 0123214569900000 - 0000000000000000 => 0123214569900000 0123214569900000
+#18: xvsubdp 0123214569900000 - 404f000000000000 AND 0123214569900000 - 7ff0000000000000 => c04f000000000000 fff0000000000000
+#19: xvsubdp 0123214569900000 - 7ff7ffffffffffff AND 0123214569900000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#20: xvsubdp 7ff0000000000000 - fff0000000000000 AND 7ff0000000000000 - c0d0650f5a07b353 => 7ff0000000000000 7ff0000000000000
+#21: xvsubdp 7ff0000000000000 - 8000000000000000 AND 7ff0000000000000 - 0000000000000000 => 7ff0000000000000 7ff0000000000000
+#22: xvsubdp 7ff0000000000000 - 0123214569900000 AND 7ff0000000000000 - 7ff0000000000000 => 7ff0000000000000 7ff8000000000000
+#23: xvsubdp 7ff0000000000000 - 7ff7ffffffffffff AND 7ff0000000000000 - 7ff8000000000000 => 7fffffffffffffff 7ff8000000000000
+#24: xvsubdp fff7ffffffffffff - fff0000000000000 AND fff7ffffffffffff - c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvsubdp fff8000000000000 - 8000000000000000 AND fff8000000000000 - 0000000000000000 => fff8000000000000 fff8000000000000
+#26: xvsubdp fff7ffffffffffff - 0123214569900000 AND fff7ffffffffffff - 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvsubdp fff7ffffffffffff - 7ff7ffffffffffff AND fff7ffffffffffff - 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvsubdp fff8000000000000 - fff0000000000000 AND fff8000000000000 - c0d0650f5a07b353 => fff8000000000000 fff8000000000000
+#29: xvsubdp fff8000000000000 - 8000000000000000 AND 41232585a9900000 - 41382511a2000000 => fff8000000000000 c12d249d9a700000
+#30: xvsubdp 41232585a9900000 - 41382511a2000000 AND 7ff7ffffffffffff - 7ff8000000000000 => c12d249d9a700000 7fffffffffffffff
+#31: xvsubdp 7ff8000000000000 - 7ff8000000000000 AND 7ff8000000000000 - fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvsubsp ff800000 - ff800000 AND ff800000 - c683287b AND 49192c2d - 49c1288d AND ff800000 - 00000000 => 7fc00000 ff800000 c96924ed ff800000
+#1: xvsubsp ff800000 - 00000000 AND ff800000 - 7f800000 AND ff800000 - 7fffffff AND ff800000 - 7fc00000 => ff800000 ff800000 7fffffff 7fc00000
+#2: xvsubsp c683287b - ff800000 AND c683287b - c683287b AND c683287b - 80000000 AND c683287b - 00000000 => 7f800000 00000000 c683287b c683287b
+#3: xvsubsp c683287b - 00000000 AND c683287b - 7f800000 AND c683287b - 7fffffff AND c683287b - 7fc00000 => c683287b ff800000 7fffffff 7fc00000
+#4: xvsubsp 80000000 - ff800000 AND 80000000 - c683287b AND 80000000 - 80000000 AND 80000000 - 00000000 => 7f800000 4683287b 00000000 80000000
+#5: xvsubsp 80000000 - 00000000 AND 80000000 - 7f800000 AND 80000000 - 7fffffff AND 80000000 - 7fc00000 => 80000000 ff800000 7fffffff 7fc00000
+#6: xvsubsp 00000000 - ff800000 AND 00000000 - c683287b AND 00000000 - 80000000 AND 00000000 - 00000000 => 7f800000 4683287b 00000000 00000000
+#7: xvsubsp 00000000 - 00000000 AND 00000000 - 7f800000 AND 00000000 - 7fffffff AND 00000000 - 7fc00000 => 00000000 ff800000 7fffffff 7fc00000
+#8: xvsubsp 00000000 - ff800000 AND 00000000 - c683287b AND 00000000 - 80000000 AND 00000000 - 00000000 => 7f800000 4683287b 00000000 00000000
+#9: xvsubsp 00000000 - 42780000 AND 00000000 - 7f800000 AND 00000000 - 7fffffff AND 00000000 - 7fc00000 => c2780000 ff800000 7fffffff 7fc00000
+#10: xvsubsp 7f800000 - ff800000 AND 7f800000 - c683287b AND 7f800000 - 80000000 AND 7f800000 - 00000000 => 7f800000 7f800000 7f800000 7f800000
+#11: xvsubsp 7f800000 - 00000000 AND 7f800000 - 7f800000 AND 7f800000 - 7fffffff AND 7f800000 - 7fc00000 => 7f800000 7fc00000 7fffffff 7fc00000
+#12: xvsubsp ffffffff - ff800000 AND ffffffff - c683287b AND ffc00000 - 80000000 AND ffc00000 - 00000000 => ffffffff ffffffff ffc00000 ffc00000
+#13: xvsubsp ffffffff - 00000000 AND ffffffff - 7f800000 AND ffffffff - 7fffffff AND ffffffff - 7fc00000 => ffffffff ffffffff ffffffff ffffffff
+#14: xvsubsp ffc00000 - ff800000 AND ffc00000 - c683287b AND ffc00000 - 80000000 AND 49192c2d - 49c1288d => ffc00000 ffc00000 ffc00000 c96924ed
+#15: xvsubsp 49192c2d - 49c1288d AND 7fffffff - 7fc00000 AND 7fc00000 - 7fc00000 AND 7fc00000 - ffc00000 => c96924ed 7fffffff 7fc00000 7fc00000
+
+
+#0: xvmaxdp fff0000000000000 @max@ fff0000000000000 AND fff0000000000000 @max@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#1: xvmaxdp 41232585a9900000 @max@ 41382511a2000000 AND fff0000000000000 @max@ 0000000000000000 => 41382511a2000000 0000000000000000
+#2: xvmaxdp fff0000000000000 @max@ 0123214569900000 AND fff0000000000000 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#3: xvmaxdp fff0000000000000 @max@ 7ff7ffffffffffff AND fff0000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff fff0000000000000
+#4: xvmaxdp c0d0650f5a07b353 @max@ fff0000000000000 AND c0d0650f5a07b353 @max@ c0d0650f5a07b353 => c0d0650f5a07b353 c0d0650f5a07b353
+#5: xvmaxdp c0d0650f5a07b353 @max@ 8000000000000000 AND c0d0650f5a07b353 @max@ 0000000000000000 => 8000000000000000 0000000000000000
+#6: xvmaxdp c0d0650f5a07b353 @max@ 0123214569900000 AND c0d0650f5a07b353 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#7: xvmaxdp c0d0650f5a07b353 @max@ 7ff7ffffffffffff AND c0d0650f5a07b353 @max@ 7ff8000000000000 => 7fffffffffffffff c0d0650f5a07b353
+#8: xvmaxdp 8000000000000000 @max@ fff0000000000000 AND 8000000000000000 @max@ c0d0650f5a07b353 => 8000000000000000 8000000000000000
+#9: xvmaxdp 8000000000000000 @max@ 8000000000000000 AND 8000000000000000 @max@ 0000000000000000 => 8000000000000000 0000000000000000
+#10: xvmaxdp 8000000000000000 @max@ 0123214569900000 AND 8000000000000000 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#11: xvmaxdp 8000000000000000 @max@ 7ff7ffffffffffff AND 8000000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff 8000000000000000
+#12: xvmaxdp 0000000000000000 @max@ fff0000000000000 AND 0000000000000000 @max@ c0d0650f5a07b353 => 0000000000000000 0000000000000000
+#13: xvmaxdp 0000000000000000 @max@ 8000000000000000 AND 0000000000000000 @max@ 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvmaxdp 0000000000000000 @max@ 0123214569900000 AND 0000000000000000 @max@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#15: xvmaxdp 0000000000000000 @max@ 7ff7ffffffffffff AND 0000000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff 0000000000000000
+#16: xvmaxdp 0123214569900000 @max@ fff0000000000000 AND 0123214569900000 @max@ c0d0650f5a07b353 => 0123214569900000 0123214569900000
+#17: xvmaxdp 0123214569900000 @max@ 8000000000000000 AND 0123214569900000 @max@ 0000000000000000 => 0123214569900000 0123214569900000
+#18: xvmaxdp 0123214569900000 @max@ 404f000000000000 AND 0123214569900000 @max@ 7ff0000000000000 => 404f000000000000 7ff0000000000000
+#19: xvmaxdp 0123214569900000 @max@ 7ff7ffffffffffff AND 0123214569900000 @max@ 7ff8000000000000 => 7fffffffffffffff 0123214569900000
+#20: xvmaxdp 7ff0000000000000 @max@ fff0000000000000 AND 7ff0000000000000 @max@ c0d0650f5a07b353 => 7ff0000000000000 7ff0000000000000
+#21: xvmaxdp 7ff0000000000000 @max@ 8000000000000000 AND 7ff0000000000000 @max@ 0000000000000000 => 7ff0000000000000 7ff0000000000000
+#22: xvmaxdp 7ff0000000000000 @max@ 0123214569900000 AND 7ff0000000000000 @max@ 7ff0000000000000 => 7ff0000000000000 7ff0000000000000
+#23: xvmaxdp 7ff0000000000000 @max@ 7ff7ffffffffffff AND 7ff0000000000000 @max@ 7ff8000000000000 => 7fffffffffffffff 7ff0000000000000
+#24: xvmaxdp fff7ffffffffffff @max@ fff0000000000000 AND fff7ffffffffffff @max@ c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvmaxdp fff8000000000000 @max@ 8000000000000000 AND fff8000000000000 @max@ 0000000000000000 => 8000000000000000 0000000000000000
+#26: xvmaxdp fff7ffffffffffff @max@ 0123214569900000 AND fff7ffffffffffff @max@ 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvmaxdp fff7ffffffffffff @max@ 7ff7ffffffffffff AND fff7ffffffffffff @max@ 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvmaxdp fff8000000000000 @max@ fff0000000000000 AND fff8000000000000 @max@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#29: xvmaxdp fff8000000000000 @max@ 8000000000000000 AND 41232585a9900000 @max@ 41382511a2000000 => 8000000000000000 41382511a2000000
+#30: xvmaxdp 41232585a9900000 @max@ 41382511a2000000 AND 7ff7ffffffffffff @max@ 7ff8000000000000 => 41382511a2000000 7fffffffffffffff
+#31: xvmaxdp 7ff8000000000000 @max@ 7ff8000000000000 AND 7ff8000000000000 @max@ fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvmindp fff0000000000000 @min@ fff0000000000000 AND fff0000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 fff0000000000000
+#1: xvmindp 41232585a9900000 @min@ 41382511a2000000 AND fff0000000000000 @min@ 0000000000000000 => 41232585a9900000 fff0000000000000
+#2: xvmindp fff0000000000000 @min@ 0123214569900000 AND fff0000000000000 @min@ 7ff0000000000000 => fff0000000000000 fff0000000000000
+#3: xvmindp fff0000000000000 @min@ 7ff7ffffffffffff AND fff0000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff fff0000000000000
+#4: xvmindp c0d0650f5a07b353 @min@ fff0000000000000 AND c0d0650f5a07b353 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#5: xvmindp c0d0650f5a07b353 @min@ 8000000000000000 AND c0d0650f5a07b353 @min@ 0000000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#6: xvmindp c0d0650f5a07b353 @min@ 0123214569900000 AND c0d0650f5a07b353 @min@ 7ff0000000000000 => c0d0650f5a07b353 c0d0650f5a07b353
+#7: xvmindp c0d0650f5a07b353 @min@ 7ff7ffffffffffff AND c0d0650f5a07b353 @min@ 7ff8000000000000 => 7fffffffffffffff c0d0650f5a07b353
+#8: xvmindp 8000000000000000 @min@ fff0000000000000 AND 8000000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#9: xvmindp 8000000000000000 @min@ 8000000000000000 AND 8000000000000000 @min@ 0000000000000000 => 8000000000000000 8000000000000000
+#10: xvmindp 8000000000000000 @min@ 0123214569900000 AND 8000000000000000 @min@ 7ff0000000000000 => 8000000000000000 8000000000000000
+#11: xvmindp 8000000000000000 @min@ 7ff7ffffffffffff AND 8000000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff 8000000000000000
+#12: xvmindp 0000000000000000 @min@ fff0000000000000 AND 0000000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#13: xvmindp 0000000000000000 @min@ 8000000000000000 AND 0000000000000000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#14: xvmindp 0000000000000000 @min@ 0123214569900000 AND 0000000000000000 @min@ 7ff0000000000000 => 0000000000000000 0000000000000000
+#15: xvmindp 0000000000000000 @min@ 7ff7ffffffffffff AND 0000000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff 0000000000000000
+#16: xvmindp 0123214569900000 @min@ fff0000000000000 AND 0123214569900000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#17: xvmindp 0123214569900000 @min@ 8000000000000000 AND 0123214569900000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#18: xvmindp 0123214569900000 @min@ 404f000000000000 AND 0123214569900000 @min@ 7ff0000000000000 => 0123214569900000 0123214569900000
+#19: xvmindp 0123214569900000 @min@ 7ff7ffffffffffff AND 0123214569900000 @min@ 7ff8000000000000 => 7fffffffffffffff 0123214569900000
+#20: xvmindp 7ff0000000000000 @min@ fff0000000000000 AND 7ff0000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#21: xvmindp 7ff0000000000000 @min@ 8000000000000000 AND 7ff0000000000000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#22: xvmindp 7ff0000000000000 @min@ 0123214569900000 AND 7ff0000000000000 @min@ 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#23: xvmindp 7ff0000000000000 @min@ 7ff7ffffffffffff AND 7ff0000000000000 @min@ 7ff8000000000000 => 7fffffffffffffff 7ff0000000000000
+#24: xvmindp fff7ffffffffffff @min@ fff0000000000000 AND fff7ffffffffffff @min@ c0d0650f5a07b353 => ffffffffffffffff ffffffffffffffff
+#25: xvmindp fff8000000000000 @min@ 8000000000000000 AND fff8000000000000 @min@ 0000000000000000 => 8000000000000000 0000000000000000
+#26: xvmindp fff7ffffffffffff @min@ 0123214569900000 AND fff7ffffffffffff @min@ 7ff0000000000000 => ffffffffffffffff ffffffffffffffff
+#27: xvmindp fff7ffffffffffff @min@ 7ff7ffffffffffff AND fff7ffffffffffff @min@ 7ff8000000000000 => ffffffffffffffff ffffffffffffffff
+#28: xvmindp fff8000000000000 @min@ fff0000000000000 AND fff8000000000000 @min@ c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#29: xvmindp fff8000000000000 @min@ 8000000000000000 AND 41232585a9900000 @min@ 41382511a2000000 => 8000000000000000 41232585a9900000
+#30: xvmindp 41232585a9900000 @min@ 41382511a2000000 AND 7ff7ffffffffffff @min@ 7ff8000000000000 => 41232585a9900000 7fffffffffffffff
+#31: xvmindp 7ff8000000000000 @min@ 7ff8000000000000 AND 7ff8000000000000 @min@ fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvmaxsp ff800000 @max@ ff800000 AND ff800000 @max@ c683287b AND 49192c2d @max@ 49c1288d AND ff800000 @max@ 00000000 => ff800000 c683287b 49c1288d 00000000
+#1: xvmaxsp ff800000 @max@ 00000000 AND ff800000 @max@ 7f800000 AND ff800000 @max@ 7fffffff AND ff800000 @max@ 7fc00000 => 00000000 7f800000 ff800000 ff800000
+#2: xvmaxsp c683287b @max@ ff800000 AND c683287b @max@ c683287b AND c683287b @max@ 80000000 AND c683287b @max@ 00000000 => c683287b c683287b 80000000 00000000
+#3: xvmaxsp c683287b @max@ 00000000 AND c683287b @max@ 7f800000 AND c683287b @max@ 7fffffff AND c683287b @max@ 7fc00000 => 00000000 7f800000 c683287b c683287b
+#4: xvmaxsp 80000000 @max@ ff800000 AND 80000000 @max@ c683287b AND 80000000 @max@ 80000000 AND 80000000 @max@ 00000000 => 80000000 80000000 80000000 00000000
+#5: xvmaxsp 80000000 @max@ 00000000 AND 80000000 @max@ 7f800000 AND 80000000 @max@ 7fffffff AND 80000000 @max@ 7fc00000 => 00000000 7f800000 80000000 80000000
+#6: xvmaxsp 00000000 @max@ ff800000 AND 00000000 @max@ c683287b AND 00000000 @max@ 80000000 AND 00000000 @max@ 00000000 => 00000000 00000000 00000000 00000000
+#7: xvmaxsp 00000000 @max@ 00000000 AND 00000000 @max@ 7f800000 AND 00000000 @max@ 7fffffff AND 00000000 @max@ 7fc00000 => 00000000 7f800000 00000000 00000000
+#8: xvmaxsp 00000000 @max@ ff800000 AND 00000000 @max@ c683287b AND 00000000 @max@ 80000000 AND 00000000 @max@ 00000000 => 00000000 00000000 00000000 00000000
+#9: xvmaxsp 00000000 @max@ 42780000 AND 00000000 @max@ 7f800000 AND 00000000 @max@ 7fffffff AND 00000000 @max@ 7fc00000 => 42780000 7f800000 00000000 00000000
+#10: xvmaxsp 7f800000 @max@ ff800000 AND 7f800000 @max@ c683287b AND 7f800000 @max@ 80000000 AND 7f800000 @max@ 00000000 => 7f800000 7f800000 7f800000 7f800000
+#11: xvmaxsp 7f800000 @max@ 00000000 AND 7f800000 @max@ 7f800000 AND 7f800000 @max@ 7fffffff AND 7f800000 @max@ 7fc00000 => 7f800000 7f800000 7f800000 7f800000
+#12: xvmaxsp ffffffff @max@ ff800000 AND ffffffff @max@ c683287b AND ffc00000 @max@ 80000000 AND ffc00000 @max@ 00000000 => ff800000 c683287b 80000000 00000000
+#13: xvmaxsp ffffffff @max@ 00000000 AND ffffffff @max@ 7f800000 AND ffffffff @max@ 7fffffff AND ffffffff @max@ 7fc00000 => 00000000 7f800000 ffffffff ffffffff
+#14: xvmaxsp ffc00000 @max@ ff800000 AND ffc00000 @max@ c683287b AND ffc00000 @max@ 80000000 AND 49192c2d @max@ 49c1288d => ff800000 c683287b 80000000 49c1288d
+#15: xvmaxsp 49192c2d @max@ 49c1288d AND 7fffffff @max@ 7fc00000 AND 7fc00000 @max@ 7fc00000 AND 7fc00000 @max@ ffc00000 => 49c1288d 7fffffff 7fc00000 7fc00000
+
+
+#0: xvminsp ff800000 @min@ ff800000 AND ff800000 @min@ c683287b AND 49192c2d @min@ 49c1288d AND ff800000 @min@ 00000000 => ff800000 ff800000 49192c2d ff800000
+#1: xvminsp ff800000 @min@ 00000000 AND ff800000 @min@ 7f800000 AND ff800000 @min@ 7fffffff AND ff800000 @min@ 7fc00000 => ff800000 ff800000 ff800000 ff800000
+#2: xvminsp c683287b @min@ ff800000 AND c683287b @min@ c683287b AND c683287b @min@ 80000000 AND c683287b @min@ 00000000 => ff800000 c683287b c683287b c683287b
+#3: xvminsp c683287b @min@ 00000000 AND c683287b @min@ 7f800000 AND c683287b @min@ 7fffffff AND c683287b @min@ 7fc00000 => c683287b c683287b c683287b c683287b
+#4: xvminsp 80000000 @min@ ff800000 AND 80000000 @min@ c683287b AND 80000000 @min@ 80000000 AND 80000000 @min@ 00000000 => ff800000 c683287b 80000000 80000000
+#5: xvminsp 80000000 @min@ 00000000 AND 80000000 @min@ 7f800000 AND 80000000 @min@ 7fffffff AND 80000000 @min@ 7fc00000 => 80000000 80000000 80000000 80000000
+#6: xvminsp 00000000 @min@ ff800000 AND 00000000 @min@ c683287b AND 00000000 @min@ 80000000 AND 00000000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#7: xvminsp 00000000 @min@ 00000000 AND 00000000 @min@ 7f800000 AND 00000000 @min@ 7fffffff AND 00000000 @min@ 7fc00000 => 00000000 00000000 00000000 00000000
+#8: xvminsp 00000000 @min@ ff800000 AND 00000000 @min@ c683287b AND 00000000 @min@ 80000000 AND 00000000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#9: xvminsp 00000000 @min@ 42780000 AND 00000000 @min@ 7f800000 AND 00000000 @min@ 7fffffff AND 00000000 @min@ 7fc00000 => 00000000 00000000 00000000 00000000
+#10: xvminsp 7f800000 @min@ ff800000 AND 7f800000 @min@ c683287b AND 7f800000 @min@ 80000000 AND 7f800000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#11: xvminsp 7f800000 @min@ 00000000 AND 7f800000 @min@ 7f800000 AND 7f800000 @min@ 7fffffff AND 7f800000 @min@ 7fc00000 => 00000000 7f800000 7f800000 7f800000
+#12: xvminsp ffffffff @min@ ff800000 AND ffffffff @min@ c683287b AND ffc00000 @min@ 80000000 AND ffc00000 @min@ 00000000 => ff800000 c683287b 80000000 00000000
+#13: xvminsp ffffffff @min@ 00000000 AND ffffffff @min@ 7f800000 AND ffffffff @min@ 7fffffff AND ffffffff @min@ 7fc00000 => 00000000 7f800000 ffffffff ffffffff
+#14: xvminsp ffc00000 @min@ ff800000 AND ffc00000 @min@ c683287b AND ffc00000 @min@ 80000000 AND 49192c2d @min@ 49c1288d => ff800000 c683287b 80000000 49192c2d
+#15: xvminsp 49192c2d @min@ 49c1288d AND 7fffffff @min@ 7fc00000 AND 7fc00000 @min@ 7fc00000 AND 7fc00000 @min@ ffc00000 => 49192c2d 7fffffff 7fc00000 7fc00000
+
+
+#0: xvcpsgndp fff0000000000000 +-cp fff0000000000000 AND fff0000000000000 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#1: xvcpsgndp 41232585a9900000 +-cp 41382511a2000000 AND fff0000000000000 +-cp 0000000000000000 => 41382511a2000000 8000000000000000
+#2: xvcpsgndp fff0000000000000 +-cp 0123214569900000 AND fff0000000000000 +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#3: xvcpsgndp fff0000000000000 +-cp 7ff7ffffffffffff AND fff0000000000000 +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#4: xvcpsgndp c0d0650f5a07b353 +-cp fff0000000000000 AND c0d0650f5a07b353 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#5: xvcpsgndp c0d0650f5a07b353 +-cp 8000000000000000 AND c0d0650f5a07b353 +-cp 0000000000000000 => 8000000000000000 8000000000000000
+#6: xvcpsgndp c0d0650f5a07b353 +-cp 0123214569900000 AND c0d0650f5a07b353 +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#7: xvcpsgndp c0d0650f5a07b353 +-cp 7ff7ffffffffffff AND c0d0650f5a07b353 +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#8: xvcpsgndp 8000000000000000 +-cp fff0000000000000 AND 8000000000000000 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#9: xvcpsgndp 8000000000000000 +-cp 8000000000000000 AND 8000000000000000 +-cp 0000000000000000 => 8000000000000000 8000000000000000
+#10: xvcpsgndp 8000000000000000 +-cp 0123214569900000 AND 8000000000000000 +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#11: xvcpsgndp 8000000000000000 +-cp 7ff7ffffffffffff AND 8000000000000000 +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#12: xvcpsgndp 0000000000000000 +-cp fff0000000000000 AND 0000000000000000 +-cp c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#13: xvcpsgndp 0000000000000000 +-cp 8000000000000000 AND 0000000000000000 +-cp 0000000000000000 => 0000000000000000 0000000000000000
+#14: xvcpsgndp 0000000000000000 +-cp 0123214569900000 AND 0000000000000000 +-cp 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#15: xvcpsgndp 0000000000000000 +-cp 7ff7ffffffffffff AND 0000000000000000 +-cp 7ff8000000000000 => 7ff7ffffffffffff 7ff8000000000000
+#16: xvcpsgndp 0123214569900000 +-cp fff0000000000000 AND 0123214569900000 +-cp c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#17: xvcpsgndp 0123214569900000 +-cp 8000000000000000 AND 0123214569900000 +-cp 0000000000000000 => 0000000000000000 0000000000000000
+#18: xvcpsgndp 0123214569900000 +-cp 404f000000000000 AND 0123214569900000 +-cp 7ff0000000000000 => 404f000000000000 7ff0000000000000
+#19: xvcpsgndp 0123214569900000 +-cp 7ff7ffffffffffff AND 0123214569900000 +-cp 7ff8000000000000 => 7ff7ffffffffffff 7ff8000000000000
+#20: xvcpsgndp 7ff0000000000000 +-cp fff0000000000000 AND 7ff0000000000000 +-cp c0d0650f5a07b353 => 7ff0000000000000 40d0650f5a07b353
+#21: xvcpsgndp 7ff0000000000000 +-cp 8000000000000000 AND 7ff0000000000000 +-cp 0000000000000000 => 0000000000000000 0000000000000000
+#22: xvcpsgndp 7ff0000000000000 +-cp 0123214569900000 AND 7ff0000000000000 +-cp 7ff0000000000000 => 0123214569900000 7ff0000000000000
+#23: xvcpsgndp 7ff0000000000000 +-cp 7ff7ffffffffffff AND 7ff0000000000000 +-cp 7ff8000000000000 => 7ff7ffffffffffff 7ff8000000000000
+#24: xvcpsgndp fff7ffffffffffff +-cp fff0000000000000 AND fff7ffffffffffff +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#25: xvcpsgndp fff8000000000000 +-cp 8000000000000000 AND fff8000000000000 +-cp 0000000000000000 => 8000000000000000 8000000000000000
+#26: xvcpsgndp fff7ffffffffffff +-cp 0123214569900000 AND fff7ffffffffffff +-cp 7ff0000000000000 => 8123214569900000 fff0000000000000
+#27: xvcpsgndp fff7ffffffffffff +-cp 7ff7ffffffffffff AND fff7ffffffffffff +-cp 7ff8000000000000 => fff7ffffffffffff fff8000000000000
+#28: xvcpsgndp fff8000000000000 +-cp fff0000000000000 AND fff8000000000000 +-cp c0d0650f5a07b353 => fff0000000000000 c0d0650f5a07b353
+#29: xvcpsgndp fff8000000000000 +-cp 8000000000000000 AND 41232585a9900000 +-cp 41382511a2000000 => 8000000000000000 41382511a2000000
+#30: xvcpsgndp 41232585a9900000 +-cp 41382511a2000000 AND 7ff7ffffffffffff +-cp 7ff8000000000000 => 41382511a2000000 7ff8000000000000
+#31: xvcpsgndp 7ff8000000000000 +-cp 7ff8000000000000 AND 7ff8000000000000 +-cp fff8000000000000 => 7ff8000000000000 7ff8000000000000
+
+
+#0: xvcpsgnsp ff800000 +-cp ff800000 AND ff800000 +-cp c683287b AND 49192c2d +-cp 49c1288d AND ff800000 +-cp 00000000 => ff800000 c683287b 49c1288d 80000000
+#1: xvcpsgnsp ff800000 +-cp 00000000 AND ff800000 +-cp 7f800000 AND ff800000 +-cp 7fffffff AND ff800000 +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#2: xvcpsgnsp c683287b +-cp ff800000 AND c683287b +-cp c683287b AND c683287b +-cp 80000000 AND c683287b +-cp 00000000 => ff800000 c683287b 80000000 80000000
+#3: xvcpsgnsp c683287b +-cp 00000000 AND c683287b +-cp 7f800000 AND c683287b +-cp 7fffffff AND c683287b +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#4: xvcpsgnsp 80000000 +-cp ff800000 AND 80000000 +-cp c683287b AND 80000000 +-cp 80000000 AND 80000000 +-cp 00000000 => ff800000 c683287b 80000000 80000000
+#5: xvcpsgnsp 80000000 +-cp 00000000 AND 80000000 +-cp 7f800000 AND 80000000 +-cp 7fffffff AND 80000000 +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#6: xvcpsgnsp 00000000 +-cp ff800000 AND 00000000 +-cp c683287b AND 00000000 +-cp 80000000 AND 00000000 +-cp 00000000 => 7f800000 4683287b 00000000 00000000
+#7: xvcpsgnsp 00000000 +-cp 00000000 AND 00000000 +-cp 7f800000 AND 00000000 +-cp 7fffffff AND 00000000 +-cp 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#8: xvcpsgnsp 00000000 +-cp ff800000 AND 00000000 +-cp c683287b AND 00000000 +-cp 80000000 AND 00000000 +-cp 00000000 => 7f800000 4683287b 00000000 00000000
+#9: xvcpsgnsp 00000000 +-cp 42780000 AND 00000000 +-cp 7f800000 AND 00000000 +-cp 7fffffff AND 00000000 +-cp 7fc00000 => 42780000 7f800000 7fffffff 7fc00000
+#10: xvcpsgnsp 7f800000 +-cp ff800000 AND 7f800000 +-cp c683287b AND 7f800000 +-cp 80000000 AND 7f800000 +-cp 00000000 => 7f800000 4683287b 00000000 00000000
+#11: xvcpsgnsp 7f800000 +-cp 00000000 AND 7f800000 +-cp 7f800000 AND 7f800000 +-cp 7fffffff AND 7f800000 +-cp 7fc00000 => 00000000 7f800000 7fffffff 7fc00000
+#12: xvcpsgnsp ffffffff +-cp ff800000 AND ffffffff +-cp c683287b AND ffc00000 +-cp 80000000 AND ffc00000 +-cp 00000000 => ff800000 c683287b 80000000 80000000
+#13: xvcpsgnsp ffffffff +-cp 00000000 AND ffffffff +-cp 7f800000 AND ffffffff +-cp 7fffffff AND ffffffff +-cp 7fc00000 => 80000000 ff800000 ffffffff ffc00000
+#14: xvcpsgnsp ffc00000 +-cp ff800000 AND ffc00000 +-cp c683287b AND ffc00000 +-cp 80000000 AND 49192c2d +-cp 49c1288d => ff800000 c683287b 80000000 49c1288d
+#15: xvcpsgnsp 49192c2d +-cp 49c1288d AND 7fffffff +-cp 7fc00000 AND 7fc00000 +-cp 7fc00000 AND 7fc00000 +-cp ffc00000 => 49c1288d 7fc00000 7fc00000 7fc00000
+
+
+Test bit permute double
+bpermd: 0x1b2c31f030000001 : 0xa12bc37de56f9708 => 0xce
+
+Test xxsel instruction
+xxsel a12bc37de56f9708,fedc432124681235,ffffffff01020304 => fedc4321e46d960c
+xxsel 3894c1fddeadbeef,f1e2d3c4e0057708,128934bd00000000 => 3894d1c4deadbeef
+
+Test xxspltw instruction
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 0=> 0xfedc4321fedc4321fedc4321fedc4321
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 1=> 0x24681235246812352468123524681235
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 2=> 0xf1e2d3c4f1e2d3c4f1e2d3c4f1e2d3c4
+xxspltw 0xfedc432124681235f1e2d3c4e0057708 3=> 0xe0057708e0057708e0057708e0057708
+
+Test div extensions
+#0: divde: 0x0000000000000004 / 0xfffffffffffffffc = 0x0000000000000000; CR=0; XER=0
+#1: divde: 0x0000000000000004 / 0xfffffffffffffffd = 0x0000000000000000; CR=0; XER=0
+#2: divde: 0x0000000000000004 / 0x0000000000000004 = 0x0000000000000000; CR=0; XER=0
+#3: divde: 0x0000000000000004 / 0xfffffffffffffffb = 0x0000000000000000; CR=0; XER=0
+#4: divde: 0x0000000000000003 / 0x0000000000000008 = 0x6000000000000000; CR=0; XER=0
+#5: divde: 0x8000000000000000 / 0x000000000000000a = 0x0000000000000000; CR=0; XER=0
+#6: divde: 0x000000000000050c / 0xffffffffffffffff = 0x0000000000000000; CR=0; XER=0
+#7: divde: 0x000000000000050c / 0xfffffffffffff000 = 0xaf40000000000000; CR=0; XER=0
+#8: divde: 0x000000001234fedc / 0x000000008000a873 = 0x2469cdcc6ad4ce20; CR=0; XER=0
+#9: divde: 0xabcd87651234fedc / 0x00000000a123b893 = 0x0000000000000000; CR=0; XER=0
+#10: divde: 0x000123456789abdc / 0x0000000000000000 = 0x0000000000000000; CR=0; XER=0
+#11: divde: 0x0000000000000000 / 0x0000000000000002 = 0x0000000000000000; CR=0; XER=0
+#12: divde: 0x0000000000000077 / 0x00000000000a3499 = 0x000ba911a321dcca; CR=0; XER=0
+
+#0: divde.: 0x0000000000000004 / 0xfffffffffffffffc = 0x0000000000000000; CR=2; XER=0
+#1: divde.: 0x0000000000000004 / 0xfffffffffffffffd = 0x0000000000000000; CR=2; XER=0
+#2: divde.: 0x0000000000000004 / 0x0000000000000004 = 0x0000000000000000; CR=2; XER=0
+#3: divde.: 0x0000000000000004 / 0xfffffffffffffffb = 0x0000000000000000; CR=2; XER=0
+#4: divde.: 0x0000000000000003 / 0x0000000000000008 = 0x6000000000000000; CR=4; XER=0
+#5: divde.: 0x8000000000000000 / 0x000000000000000a = 0x0000000000000000; CR=2; XER=0
+#6: divde.: 0x000000000000050c / 0xffffffffffffffff = 0x0000000000000000; CR=2; XER=0
+#7: divde.: 0x000000000000050c / 0xfffffffffffff000 = 0xaf40000000000000; CR=8; XER=0
+#8: divde.: 0x000000001234fedc / 0x000000008000a873 = 0x2469cdcc6ad4ce20; CR=4; XER=0
+#9: divde.: 0xabcd87651234fedc / 0x00000000a123b893 = 0x0000000000000000; CR=2; XER=0
+#10: divde.: 0x000123456789abdc / 0x0000000000000000 = 0x0000000000000000; CR=2; XER=0
+#11: divde.: 0x0000000000000000 / 0x0000000000000002 = 0x0000000000000000; CR=2; XER=0
+#12: divde.: 0x0000000000000077 / 0x00000000000a3499 = 0x000ba911a321dcca; CR=4; XER=0
+
+
+#0: divdeo: 0x0000000000000004 / 0xfffffffffffffffc = 0x0000000000000000; CR=0; XER=c0000000
+#1: divdeo: 0x0000000000000004 / 0xfffffffffffffffd = 0x0000000000000000; CR=0; XER=c0000000
+#2: divdeo: 0x0000000000000004 / 0x0000000000000004 = 0x0000000000000000; CR=0; XER=c0000000
+#3: divdeo: 0x0000000000000004 / 0xfffffffffffffffb = 0x0000000000000000; CR=0; XER=c0000000
+#4: divdeo: 0x0000000000000003 / 0x0000000000000008 = 0x6000000000000000; CR=0; XER=0
+#5: divdeo: 0x8000000000000000 / 0x000000000000000a = 0x0000000000000000; CR=0; XER=c0000000
+#6: divdeo: 0x000000000000050c / 0xffffffffffffffff = 0x0000000000000000; CR=0; XER=c0000000
+#7: divdeo: 0x000000000000050c / 0xfffffffffffff000 = 0xaf40000000000000; CR=0; XER=0
+#8: divdeo: 0x000000001234fedc / 0x000000008000a873 = 0x2469cdcc6ad4ce20; CR=0; XER=0
+#9: divdeo: 0xabcd87651234fedc / 0x00000000a123b893 = 0x0000000000000000; CR=0; XER=c0000000
+#10: divdeo: 0x000123456789abdc / 0x0000000000000000 = 0x0000000000000000; CR=0; XER=c0000000
+#11: divdeo: 0x0000000000000000 / 0x0000000000000002 = 0x0000000000000000; CR=0; XER=0
+#12: divdeo: 0x0000000000000077 / 0x00000000000a3499 = 0x000ba911a321dcca; CR=0; XER=0
+
+#0: divdeo.: 0x0000000000000004 / 0xfffffffffffffffc = 0x0000000000000000; CR=3; XER=c0000000
+#1: divdeo.: 0x0000000000000004 / 0xfffffffffffffffd = 0x0000000000000000; CR=3; XER=c0000000
+#2: divdeo.: 0x0000000000000004 / 0x0000000000000004 = 0x0000000000000000; CR=3; XER=c0000000
+#3: divdeo.: 0x0000000000000004 / 0xfffffffffffffffb = 0x0000000000000000; CR=3; XER=c0000000
+#4: divdeo.: 0x0000000000000003 / 0x0000000000000008 = 0x6000000000000000; CR=4; XER=0
+#5: divdeo.: 0x8000000000000000 / 0x000000000000000a = 0x0000000000000000; CR=3; XER=c0000000
+#6: divdeo.: 0x000000000000050c / 0xffffffffffffffff = 0x0000000000000000; CR=3; XER=c0000000
+#7: divdeo.: 0x000000000000050c / 0xfffffffffffff000 = 0xaf40000000000000; CR=8; XER=0
+#8: divdeo.: 0x000000001234fedc / 0x000000008000a873 = 0x2469cdcc6ad4ce20; CR=4; XER=0
+#9: divdeo.: 0xabcd87651234fedc / 0x00000000a123b893 = 0x0000000000000000; CR=3; XER=c0000000
+#10: divdeo.: 0x000123456789abdc / 0x0000000000000000 = 0x0000000000000000; CR=3; XER=c0000000
+#11: divdeo.: 0x0000000000000000 / 0x0000000000000002 = 0x0000000000000000; CR=2; XER=0
+#12: divdeo.: 0x0000000000000077 / 0x00000000000a3499 = 0x000ba911a321dcca; CR=4; XER=0
+
+
+#0: divweu: 0x00000000 / 0x00000002 = 0x00000000; CR=0; XER=0
+#1: divweu: 0x00000002 / 0x00000000 = 0x00000000; CR=0; XER=0
+#2: divweu: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=0; XER=0
+#3: divweu: 0xfabc1234 / 0x00000005 = 0x00000000; CR=0; XER=0
+#4: divweu: 0x0000004d / 0x00000042 = 0x00000000; CR=0; XER=0
+#5: divweu: 0x00000005 / 0xfabc1234 = 0x00000005; CR=0; XER=0
+
+#0: divweu.: 0x00000000 / 0x00000002 = 0x00000000; CR=2; XER=0
+#1: divweu.: 0x00000002 / 0x00000000 = 0x00000000; CR=2; XER=0
+#2: divweu.: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=4; XER=0
+#3: divweu.: 0xfabc1234 / 0x00000005 = 0x00000000; CR=2; XER=0
+#4: divweu.: 0x0000004d / 0x00000042 = 0x00000000; CR=2; XER=0
+#5: divweu.: 0x00000005 / 0xfabc1234 = 0x00000005; CR=4; XER=0
+
+
+#0: divweuo: 0x00000000 / 0x00000002 = 0x00000000; CR=0; XER=0
+#1: divweuo: 0x00000002 / 0x00000000 = 0x00000000; CR=0; XER=c0000000
+#2: divweuo: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=0; XER=0
+#3: divweuo: 0xfabc1234 / 0x00000005 = 0x00000000; CR=0; XER=c0000000
+#4: divweuo: 0x0000004d / 0x00000042 = 0x00000000; CR=0; XER=c0000000
+#5: divweuo: 0x00000005 / 0xfabc1234 = 0x00000005; CR=0; XER=0
+
+#0: divweuo.: 0x00000000 / 0x00000002 = 0x00000000; CR=2; XER=0
+#1: divweuo.: 0x00000002 / 0x00000000 = 0x00000000; CR=3; XER=c0000000
+#2: divweuo.: 0x7abc1234 / 0xf0000000 = 0x82eabe15; CR=4; XER=0
+#3: divweuo.: 0xfabc1234 / 0x00000005 = 0x00000000; CR=3; XER=c0000000
+#4: divweuo.: 0x0000004d / 0x00000042 = 0x00000000; CR=3; XER=c0000000
+#5: divweuo.: 0x00000005 / 0xfabc1234 = 0x00000005; CR=4; XER=0
+
+
+Test floating point convert [word | doubleword] unsigned, with round toward zero
+#0: fctiduz: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiduz: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiduz: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiduz: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctiduz: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiduz: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiduz: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiduz: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctiduz: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiduz: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiduz: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiduz: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiduz: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiduz: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiduz: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiduz: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiduz: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+#0: fctiduz.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiduz.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiduz.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiduz.: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctiduz.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiduz.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiduz.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiduz.: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctiduz.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiduz.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiduz.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiduz.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiduz.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiduz.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiduz.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiduz.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiduz.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+
+#0: fctidu: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctidu: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctidu: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctidu: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctidu: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctidu: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctidu: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctidu: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctidu: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctidu: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctidu: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctidu: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctidu: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctidu: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctidu: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctidu: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctidu: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+#0: fctidu.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctidu.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctidu.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctidu.: 0x7fe800000000051b (1.348270e+308) ==> 0xffffffffffffffff
+#4: fctidu.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctidu.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctidu.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctidu.: 0x7ff0000000000000 (inf) ==> 0xffffffffffffffff
+#8: fctidu.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctidu.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctidu.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctidu.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctidu.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctidu.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctidu.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctidu.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctidu.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+
+#0: fctiwuz: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwuz: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwuz: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwuz: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwuz: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwuz: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwuz: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwuz: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwuz: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwuz: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwuz: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwuz: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwuz: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwuz: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwuz: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwuz: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiwuz: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+#0: fctiwuz.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwuz.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwuz.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwuz.: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwuz.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwuz.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwuz.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwuz.: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwuz.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwuz.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwuz.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwuz.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwuz.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwuz.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwuz.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwuz.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c2
+#16: fctiwuz.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182511
+
+
+#0: fctiwu: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwu: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwu: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwu: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwu: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwu: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwu: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwu: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwu: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwu: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwu: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwu: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwu: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwu: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwu: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwu: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctiwu: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+#0: fctiwu.: 0x3fd8000000000000 (3.750000e-01) ==> 0x0000000000000000
+#1: fctiwu.: 0x404f000000000000 (6.200000e+01) ==> 0x000000000000003e
+#2: fctiwu.: 0x0018000000b77501 (3.337611e-308) ==> 0x0000000000000000
+#3: fctiwu.: 0x7fe800000000051b (1.348270e+308) ==> 0x00000000ffffffff
+#4: fctiwu.: 0x0123214569900000 (3.486973e-303) ==> 0x0000000000000000
+#5: fctiwu.: 0x0000000000000000 (0.000000e+00) ==> 0x0000000000000000
+#6: fctiwu.: 0x8000000000000000 (-0.000000e+00) ==> 0x0000000000000000
+#7: fctiwu.: 0x7ff0000000000000 (inf) ==> 0x00000000ffffffff
+#8: fctiwu.: 0xfff0000000000000 (-inf) ==> 0x0000000000000000
+#9: fctiwu.: 0x7ff7ffffffffffff (nan) ==> 0x0000000000000000
+#10: fctiwu.: 0xfff7ffffffffffff (-nan) ==> 0x0000000000000000
+#11: fctiwu.: 0x7ff8000000000000 (nan) ==> 0x0000000000000000
+#12: fctiwu.: 0xfff8000000000000 (-nan) ==> 0x0000000000000000
+#13: fctiwu.: 0x8008340000078000 (-1.140785e-308) ==> 0x0000000000000000
+#14: fctiwu.: 0xc0d0650f5a07b353 (-1.678824e+04) ==> 0x0000000000000000
+#15: fctiwu.: 0x41232585a9900000 (6.273948e+05) ==> 0x00000000000992c3
+#16: fctiwu.: 0x41382511a2000000 (1.582354e+06) ==> 0x0000000000182512
+
+
+Test stdbrx instruction
+stdbrx: 0xdeadbacf12345678 ==> 0x78563412cfbaadde
+
+Test floating point arithmetic instructions -- with a{d|s}p or m{d|s}p
+#0: xsnmsubadp !*-(fff0000000000000,fff0000000000000,3fd8000000000000) = 7ff8000000000000
+#1: xsnmsubadp !*-(c0d0650f5a07b353,fff0000000000000,404f000000000000) = 7ff0000000000000
+#2: xsnmsubadp !*-(41382511a2000000,41232585a9900000,0018000000b77501) = 41382511a2000000
+#3: xsnmsubadp !*-(0000000000000000,fff0000000000000,7fe800000000051b) = 7ff0000000000000
+#4: xsnmsubadp !*-(0123214569900000,fff0000000000000,0123214569900000) = 7ff0000000000000
+#5: xsnmsubadp !*-(7ff0000000000000,fff0000000000000,0000000000000000) = 7ff8000000000000
+#6: xsnmsubadp !*-(7ff7ffffffffffff,fff0000000000000,8000000000000000) = 7fffffffffffffff
+#7: xsnmsubadp !*-(7ff8000000000000,fff0000000000000,7ff0000000000000) = 7ff8000000000000
+#8: xsnmsubadp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) = fff0000000000000
+#9: xsnmsubadp !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) = 7fffffffffffffff
+#10: xsnmsubadp !*-(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) = ffffffffffffffff
+#11: xsnmsubadp !*-(0000000000000000,c0d0650f5a07b353,7ff8000000000000) = 7ff8000000000000
+#12: xsnmsubadp !*-(0123214569900000,c0d0650f5a07b353,fff8000000000000) = fff8000000000000
+#13: xsnmsubadp !*-(7ff0000000000000,c0d0650f5a07b353,8008340000078000) = 7ff0000000000000
+#14: xsnmsubadp !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) = 7fffffffffffffff
+#15: xsnmsubadp !*-(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) = 7ff8000000000000
+#16: xsnmsubadp !*-(fff0000000000000,8000000000000000,3fd8000000000000) = fff0000000000000
+#17: xsnmsubadp !*-(c0d0650f5a07b353,8000000000000000,404f000000000000) = c0d0650f5a07b353
+#18: xsnmsubadp !*-(8000000000000000,8000000000000000,0018000000b77501) = 8000000000000000
+#19: xsnmsubadp !*-(0000000000000000,8000000000000000,7fe800000000051b) = 0000000000000000
+#20: xsnmsubadp !*-(0123214569900000,8000000000000000,0123214569900000) = 0123214569900000
+#21: xsnmsubadp !*-(7ff0000000000000,8000000000000000,0000000000000000) = 7ff0000000000000
+#22: xsnmsubadp !*-(7ff7ffffffffffff,8000000000000000,8000000000000000) = 7fffffffffffffff
+#23: xsnmsubadp !*-(7ff8000000000000,8000000000000000,7ff0000000000000) = 7ff8000000000000
+#24: xsnmsubadp !*-(fff0000000000000,0000000000000000,fff0000000000000) = 7ff8000000000000
+#25: xsnmsubadp !*-(c0d0650f5a07b353,0000000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#26: xsnmsubadp !*-(8000000000000000,0000000000000000,fff7ffffffffffff) = ffffffffffffffff
+#27: xsnmsubadp !*-(0000000000000000,0000000000000000,7ff8000000000000) = 7ff8000000000000
+#28: xsnmsubadp !*-(0123214569900000,0000000000000000,fff8000000000000) = fff8000000000000
+#29: xsnmsubadp !*-(7ff0000000000000,0000000000000000,8008340000078000) = 7ff0000000000000
+#30: xsnmsubadp !*-(7ff7ffffffffffff,0000000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#31: xsnmsubadp !*-(7ff8000000000000,0000000000000000,41232585a9900000) = 7ff8000000000000
+#32: xsnmsubadp !*-(fff0000000000000,0123214569900000,3fd8000000000000) = fff0000000000000
+#33: xsnmsubadp !*-(c0d0650f5a07b353,0123214569900000,404f000000000000) = c0d0650f5a07b353
+#34: xsnmsubadp !*-(8000000000000000,0123214569900000,0018000000b77501) = 8000000000000000
+#35: xsnmsubadp !*-(0000000000000000,0123214569900000,7fe800000000051b) = c11cb1e81e58061b
+#36: xsnmsubadp !*-(404f000000000000,0123214569900000,0123214569900000) = 404f000000000000
+#37: xsnmsubadp !*-(7ff0000000000000,0123214569900000,0000000000000000) = 7ff0000000000000
+#38: xsnmsubadp !*-(7ff7ffffffffffff,0123214569900000,8000000000000000) = 7fffffffffffffff
+#39: xsnmsubadp !*-(7ff8000000000000,0123214569900000,7ff0000000000000) = 7ff8000000000000
+#40: xsnmsubadp !*-(fff0000000000000,7ff0000000000000,fff0000000000000) = 7ff8000000000000
+#41: xsnmsubadp !*-(c0d0650f5a07b353,7ff0000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#42: xsnmsubadp !*-(8000000000000000,7ff0000000000000,fff7ffffffffffff) = ffffffffffffffff
+#43: xsnmsubadp !*-(0000000000000000,7ff0000000000000,7ff8000000000000) = 7ff8000000000000
+#44: xsnmsubadp !*-(0123214569900000,7ff0000000000000,fff8000000000000) = fff8000000000000
+#45: xsnmsubadp !*-(7ff0000000000000,7ff0000000000000,8008340000078000) = 7ff0000000000000
+#46: xsnmsubadp !*-(7ff7ffffffffffff,7ff0000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#47: xsnmsubadp !*-(7ff8000000000000,7ff0000000000000,41232585a9900000) = 7ff8000000000000
+#48: xsnmsubadp !*-(fff0000000000000,fff7ffffffffffff,3fd8000000000000) = ffffffffffffffff
+#49: xsnmsubadp !*-(c0d0650f5a07b353,fff7ffffffffffff,404f000000000000) = ffffffffffffffff
+#50: xsnmsubadp !*-(8000000000000000,fff8000000000000,0018000000b77501) = fff8000000000000
+#51: xsnmsubadp !*-(0000000000000000,fff8000000000000,7fe800000000051b) = fff8000000000000
+#52: xsnmsubadp !*-(0123214569900000,fff7ffffffffffff,0123214569900000) = ffffffffffffffff
+#53: xsnmsubadp !*-(7ff0000000000000,fff7ffffffffffff,0000000000000000) = ffffffffffffffff
+#54: xsnmsubadp !*-(7ff7ffffffffffff,fff7ffffffffffff,8000000000000000) = ffffffffffffffff
+#55: xsnmsubadp !*-(7ff8000000000000,fff7ffffffffffff,7ff0000000000000) = ffffffffffffffff
+#56: xsnmsubadp !*-(fff0000000000000,fff8000000000000,fff0000000000000) = fff8000000000000
+#57: xsnmsubadp !*-(c0d0650f5a07b353,fff8000000000000,7ff7ffffffffffff) = fff8000000000000
+#58: xsnmsubadp !*-(8000000000000000,fff8000000000000,fff7ffffffffffff) = fff8000000000000
+#59: xsnmsubadp !*-(41382511a2000000,41232585a9900000,7ff8000000000000) = 7ff8000000000000
+#60: xsnmsubadp !*-(41382511a2000000,41232585a9900000,fff8000000000000) = fff8000000000000
+#61: xsnmsubadp !*-(7ff8000000000000,7ff7ffffffffffff,8008340000078000) = 7fffffffffffffff
+#62: xsnmsubadp !*-(7ff8000000000000,7ff8000000000000,c0d0650f5a07b353) = 7ff8000000000000
+#63: xsnmsubadp !*-(fff8000000000000,7ff8000000000000,41232585a9900000) = 7ff8000000000000
+
+#0: xsnmsubmdp !*-(3fd8000000000000,fff0000000000000,fff0000000000000) = 7ff8000000000000
+#1: xsnmsubmdp !*-(404f000000000000,fff0000000000000,c0d0650f5a07b353) = 7ff0000000000000
+#2: xsnmsubmdp !*-(0018000000b77501,41232585a9900000,41382511a2000000) = 41382511a2000000
+#3: xsnmsubmdp !*-(7fe800000000051b,fff0000000000000,0000000000000000) = 7ff0000000000000
+#4: xsnmsubmdp !*-(0123214569900000,fff0000000000000,0123214569900000) = 7ff0000000000000
+#5: xsnmsubmdp !*-(0000000000000000,fff0000000000000,7ff0000000000000) = 7ff8000000000000
+#6: xsnmsubmdp !*-(8000000000000000,fff0000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#7: xsnmsubmdp !*-(7ff0000000000000,fff0000000000000,7ff8000000000000) = 7ff8000000000000
+#8: xsnmsubmdp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) = fff0000000000000
+#9: xsnmsubmdp !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) = 7fffffffffffffff
+#10: xsnmsubmdp !*-(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) = ffffffffffffffff
+#11: xsnmsubmdp !*-(7ff8000000000000,c0d0650f5a07b353,0000000000000000) = 7ff8000000000000
+#12: xsnmsubmdp !*-(fff8000000000000,c0d0650f5a07b353,0123214569900000) = fff8000000000000
+#13: xsnmsubmdp !*-(8008340000078000,c0d0650f5a07b353,7ff0000000000000) = 7ff0000000000000
+#14: xsnmsubmdp !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) = 7fffffffffffffff
+#15: xsnmsubmdp !*-(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) = 7ff8000000000000
+#16: xsnmsubmdp !*-(3fd8000000000000,8000000000000000,fff0000000000000) = fff0000000000000
+#17: xsnmsubmdp !*-(404f000000000000,8000000000000000,c0d0650f5a07b353) = c0d0650f5a07b353
+#18: xsnmsubmdp !*-(0018000000b77501,8000000000000000,8000000000000000) = 8000000000000000
+#19: xsnmsubmdp !*-(7fe800000000051b,8000000000000000,0000000000000000) = 0000000000000000
+#20: xsnmsubmdp !*-(0123214569900000,8000000000000000,0123214569900000) = 0123214569900000
+#21: xsnmsubmdp !*-(0000000000000000,8000000000000000,7ff0000000000000) = 7ff0000000000000
+#22: xsnmsubmdp !*-(8000000000000000,8000000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#23: xsnmsubmdp !*-(7ff0000000000000,8000000000000000,7ff8000000000000) = 7ff8000000000000
+#24: xsnmsubmdp !*-(fff0000000000000,0000000000000000,fff0000000000000) = 7ff8000000000000
+#25: xsnmsubmdp !*-(7ff7ffffffffffff,0000000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#26: xsnmsubmdp !*-(fff7ffffffffffff,0000000000000000,8000000000000000) = ffffffffffffffff
+#27: xsnmsubmdp !*-(7ff8000000000000,0000000000000000,0000000000000000) = 7ff8000000000000
+#28: xsnmsubmdp !*-(fff8000000000000,0000000000000000,0123214569900000) = fff8000000000000
+#29: xsnmsubmdp !*-(8008340000078000,0000000000000000,7ff0000000000000) = 7ff0000000000000
+#30: xsnmsubmdp !*-(c0d0650f5a07b353,0000000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#31: xsnmsubmdp !*-(41232585a9900000,0000000000000000,7ff8000000000000) = 7ff8000000000000
+#32: xsnmsubmdp !*-(3fd8000000000000,0123214569900000,fff0000000000000) = fff0000000000000
+#33: xsnmsubmdp !*-(404f000000000000,0123214569900000,c0d0650f5a07b353) = c0d0650f5a07b353
+#34: xsnmsubmdp !*-(0018000000b77501,0123214569900000,8000000000000000) = 8000000000000000
+#35: xsnmsubmdp !*-(7fe800000000051b,0123214569900000,0000000000000000) = c11cb1e81e58061b
+#36: xsnmsubmdp !*-(0123214569900000,0123214569900000,404f000000000000) = 404f000000000000
+#37: xsnmsubmdp !*-(0000000000000000,0123214569900000,7ff0000000000000) = 7ff0000000000000
+#38: xsnmsubmdp !*-(8000000000000000,0123214569900000,7ff7ffffffffffff) = 7fffffffffffffff
+#39: xsnmsubmdp !*-(7ff0000000000000,0123214569900000,7ff8000000000000) = 7ff8000000000000
+#40: xsnmsubmdp !*-(fff0000000000000,7ff0000000000000,fff0000000000000) = 7ff8000000000000
+#41: xsnmsubmdp !*-(7ff7ffffffffffff,7ff0000000000000,c0d0650f5a07b353) = 7fffffffffffffff
+#42: xsnmsubmdp !*-(fff7ffffffffffff,7ff0000000000000,8000000000000000) = ffffffffffffffff
+#43: xsnmsubmdp !*-(7ff8000000000000,7ff0000000000000,0000000000000000) = 7ff8000000000000
+#44: xsnmsubmdp !*-(fff8000000000000,7ff0000000000000,0123214569900000) = fff8000000000000
+#45: xsnmsubmdp !*-(8008340000078000,7ff0000000000000,7ff0000000000000) = 7ff0000000000000
+#46: xsnmsubmdp !*-(c0d0650f5a07b353,7ff0000000000000,7ff7ffffffffffff) = 7fffffffffffffff
+#47: xsnmsubmdp !*-(41232585a9900000,7ff0000000000000,7ff8000000000000) = 7ff8000000000000
+#48: xsnmsubmdp !*-(3fd8000000000000,fff7ffffffffffff,fff0000000000000) = ffffffffffffffff
+#49: xsnmsubmdp !*-(404f000000000000,fff7ffffffffffff,c0d0650f5a07b353) = ffffffffffffffff
+#50: xsnmsubmdp !*-(0018000000b77501,fff8000000000000,8000000000000000) = fff8000000000000
+#51: xsnmsubmdp !*-(7fe800000000051b,fff8000000000000,0000000000000000) = fff8000000000000
+#52: xsnmsubmdp !*-(0123214569900000,fff7ffffffffffff,0123214569900000) = ffffffffffffffff
+#53: xsnmsubmdp !*-(0000000000000000,fff7ffffffffffff,7ff0000000000000) = ffffffffffffffff
+#54: xsnmsubmdp !*-(8000000000000000,fff7ffffffffffff,7ff7ffffffffffff) = ffffffffffffffff
+#55: xsnmsubmdp !*-(7ff0000000000000,fff7ffffffffffff,7ff8000000000000) = ffffffffffffffff
+#56: xsnmsubmdp !*-(fff0000000000000,fff8000000000000,fff0000000000000) = fff8000000000000
+#57: xsnmsubmdp !*-(7ff7ffffffffffff,fff8000000000000,c0d0650f5a07b353) = fff8000000000000
+#58: xsnmsubmdp !*-(fff7ffffffffffff,fff8000000000000,8000000000000000) = fff8000000000000
+#59: xsnmsubmdp !*-(7ff8000000000000,41232585a9900000,41382511a2000000) = 7ff8000000000000
+#60: xsnmsubmdp !*-(fff8000000000000,41232585a9900000,41382511a2000000) = fff8000000000000
+#61: xsnmsubmdp !*-(8008340000078000,7ff7ffffffffffff,7ff8000000000000) = 7fffffffffffffff
+#62: xsnmsubmdp !*-(c0d0650f5a07b353,7ff8000000000000,7ff8000000000000) = 7ff8000000000000
+#63: xsnmsubmdp !*-(41232585a9900000,7ff8000000000000,fff8000000000000) = 7ff8000000000000
+
+#0: xvmaddadp *+(fff0000000000000,fff0000000000000,3fd8000000000000) AND *+(c0d0650f5a07b353,fff0000000000000,404f000000000000) => fff0000000000000 fff0000000000000
+#1: xvmaddadp *+(41382511a2000000,41232585a9900000,0018000000b77501) AND *+(0000000000000000,fff0000000000000,7fe800000000051b) => 41382511a2000000 fff0000000000000
+#2: xvmaddadp *+(0123214569900000,fff0000000000000,0123214569900000) AND *+(7ff0000000000000,fff0000000000000,0000000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmaddadp *+(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND *+(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmaddadp *+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => 7ff8000000000000 7fffffffffffffff
+#5: xvmaddadp *+(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND *+(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmaddadp *+(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND *+(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 7ff0000000000000
+#7: xvmaddadp *+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND *+(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmaddadp *+(fff0000000000000,8000000000000000,404f000000000000) AND *+(c0d0650f5a07b353,8000000000000000,0018000000b77501) => fff0000000000000 c0d0650f5a07b353
+#9: xvmaddadp *+(8000000000000000,8000000000000000,7fe800000000051b) AND *+(0000000000000000,8000000000000000,0123214569900000) => 8000000000000000 0000000000000000
+#10: xvmaddadp *+(0123214569900000,8000000000000000,0000000000000000) AND *+(7ff0000000000000,8000000000000000,8000000000000000) => 0123214569900000 7ff0000000000000
+#11: xvmaddadp *+(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND *+(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmaddadp *+(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND *+(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvmaddadp *+(8000000000000000,0000000000000000,7ff8000000000000) AND *+(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmaddadp *+(0123214569900000,0000000000000000,8008340000078000) AND *+(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 0123214569900000 7ff0000000000000
+#15: xvmaddadp *+(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND *+(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmaddadp *+(fff0000000000000,0123214569900000,0018000000b77501) AND *+(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => fff0000000000000 411bab9728b78ae5
+#17: xvmaddadp *+(8000000000000000,0123214569900000,0123214569900000) AND *+(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmaddadp *+(404f000000000000,0123214569900000,8000000000000000) AND *+(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff0000000000000
+#19: xvmaddadp *+(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND *+(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvmaddadp *+(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND *+(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvmaddadp *+(8000000000000000,7ff0000000000000,fff8000000000000) AND *+(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 fff0000000000000
+#22: xvmaddadp *+(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND *+(7ff0000000000000,7ff0000000000000,41232585a9900000) => fff0000000000000 7ff0000000000000
+#23: xvmaddadp *+(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND *+(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvmaddadp *+(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND *+(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvmaddadp *+(8000000000000000,fff8000000000000,0000000000000000) AND *+(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmaddadp *+(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND *+(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmaddadp *+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *+(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvmaddadp *+(fff0000000000000,fff8000000000000,7ff8000000000000) AND *+(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvmaddadp *+(8000000000000000,fff8000000000000,8008340000078000) AND *+(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 c2039db3bbaae2d2
+#30: xvmaddadp *+(41382511a2000000,41232585a9900000,3fd8000000000000) AND *+(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => 413bbc1ab1cb0000 7fffffffffffffff
+#31: xvmaddadp *+(7ff8000000000000,7ff8000000000000,0018000000b77501) AND *+(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmaddmdp *+(3fd8000000000000,fff0000000000000,fff0000000000000) AND *+(404f000000000000,fff0000000000000,c0d0650f5a07b353) => fff0000000000000 fff0000000000000
+#1: xvmaddmdp *+(0018000000b77501,41232585a9900000,41382511a2000000) AND *+(7fe800000000051b,fff0000000000000,0000000000000000) => 41382511a2000000 fff0000000000000
+#2: xvmaddmdp *+(0123214569900000,fff0000000000000,0123214569900000) AND *+(0000000000000000,fff0000000000000,7ff0000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmaddmdp *+(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND *+(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmaddmdp *+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => 7ff8000000000000 7fffffffffffffff
+#5: xvmaddmdp *+(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND *+(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmaddmdp *+(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND *+(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 7ff0000000000000
+#7: xvmaddmdp *+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND *+(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmaddmdp *+(404f000000000000,8000000000000000,fff0000000000000) AND *+(0018000000b77501,8000000000000000,c0d0650f5a07b353) => fff0000000000000 c0d0650f5a07b353
+#9: xvmaddmdp *+(7fe800000000051b,8000000000000000,8000000000000000) AND *+(0123214569900000,8000000000000000,0000000000000000) => 8000000000000000 0000000000000000
+#10: xvmaddmdp *+(0000000000000000,8000000000000000,0123214569900000) AND *+(8000000000000000,8000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#11: xvmaddmdp *+(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND *+(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmaddmdp *+(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND *+(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvmaddmdp *+(7ff8000000000000,0000000000000000,8000000000000000) AND *+(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmaddmdp *+(8008340000078000,0000000000000000,0123214569900000) AND *+(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#15: xvmaddmdp *+(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND *+(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmaddmdp *+(0018000000b77501,0123214569900000,fff0000000000000) AND *+(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => fff0000000000000 411bab9728b78ae5
+#17: xvmaddmdp *+(0123214569900000,0123214569900000,8000000000000000) AND *+(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmaddmdp *+(8000000000000000,0123214569900000,404f000000000000) AND *+(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff0000000000000
+#19: xvmaddmdp *+(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND *+(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvmaddmdp *+(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND *+(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvmaddmdp *+(fff8000000000000,7ff0000000000000,8000000000000000) AND *+(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 fff0000000000000
+#22: xvmaddmdp *+(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND *+(41232585a9900000,7ff0000000000000,7ff0000000000000) => fff0000000000000 7ff0000000000000
+#23: xvmaddmdp *+(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND *+(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvmaddmdp *+(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND *+(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvmaddmdp *+(0000000000000000,fff8000000000000,8000000000000000) AND *+(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmaddmdp *+(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND *+(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmaddmdp *+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *+(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvmaddmdp *+(7ff8000000000000,fff8000000000000,fff0000000000000) AND *+(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvmaddmdp *+(8008340000078000,fff8000000000000,8000000000000000) AND *+(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 c2039db3bbaae2d2
+#30: xvmaddmdp *+(3fd8000000000000,41232585a9900000,41382511a2000000) AND *+(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => 413bbc1ab1cb0000 7fffffffffffffff
+#31: xvmaddmdp *+(0018000000b77501,7ff8000000000000,7ff8000000000000) AND *+(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmaddasp *+(ff800000,ff800000,3ec00000) AND *+(c683287b,ff800000,42780000) AND *+(49c1288d,49192c2d,00000000) AND *+(00000000,ff800000,7f800000) => ff800000 ff800000 49c1288d ff800000
+#1: xvmaddasp *+(00000000,ff800000,00000000) AND *+(7f800000,ff800000,00000000) AND *+(7fffffff,ff800000,80000000) AND *+(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmaddasp *+(ff800000,c683287b,ff800000) AND *+(c683287b,c683287b,7fffffff) AND *+(80000000,c683287b,ffffffff) AND *+(00000000,c683287b,7fc00000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvmaddasp *+(00000000,c683287b,ffc00000) AND *+(7f800000,c683287b,80000000) AND *+(7fffffff,c683287b,c683287b) AND *+(7fc00000,c683287b,49192c2d) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvmaddasp *+(ff800000,80000000,7f800000) AND *+(c683287b,80000000,00000000) AND *+(80000000,80000000,00000000) AND *+(00000000,80000000,80000000) => 7fc00000 c683287b 80000000 00000000
+#5: xvmaddasp *+(00000000,80000000,7f800000) AND *+(7f800000,80000000,ff800000) AND *+(7fffffff,80000000,7fffffff) AND *+(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmaddasp *+(ff800000,00000000,7fc00000) AND *+(c683287b,00000000,ffc00000) AND *+(80000000,00000000,80000000) AND *+(00000000,00000000,c683287b) => 7fc00000 ffc00000 80000000 00000000
+#7: xvmaddasp *+(00000000,00000000,00000000) AND *+(7f800000,00000000,7f800000) AND *+(7fffffff,00000000,00000000) AND *+(7fc00000,00000000,00000000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmaddasp *+(ff800000,00000000,80000000) AND *+(c683287b,00000000,7f800000) AND *+(80000000,00000000,ff800000) AND *+(00000000,00000000,7fffffff) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvmaddasp *+(42780000,00000000,ffffffff) AND *+(7f800000,00000000,7fc00000) AND *+(7fffffff,00000000,ffc00000) AND *+(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmaddasp *+(ff800000,7f800000,42780000) AND *+(c683287b,7f800000,00000000) AND *+(80000000,7f800000,7f800000) AND *+(00000000,7f800000,00000000) => 7fc00000 7fc00000 7f800000 7fc00000
+#11: xvmaddasp *+(00000000,7f800000,00000000) AND *+(7f800000,7f800000,80000000) AND *+(7fffffff,7f800000,7f800000) AND *+(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmaddasp *+(ff800000,ffffffff,7fffffff) AND *+(c683287b,ffffffff,ffffffff) AND *+(80000000,ffc00000,7fc00000) AND *+(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmaddasp *+(00000000,ffffffff,3ec00000) AND *+(7f800000,ffffffff,42780000) AND *+(7fffffff,ffffffff,00000000) AND *+(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmaddasp *+(ff800000,ffc00000,00000000) AND *+(c683287b,ffc00000,00000000) AND *+(80000000,ffc00000,80000000) AND *+(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmaddasp *+(49c1288d,49192c2d,ff800000) AND *+(7fc00000,7fffffff,7fffffff) AND *+(7fc00000,7fc00000,ffffffff) AND *+(ffc00000,7fc00000,7fc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvmaddmsp *+(3ec00000,ff800000,ff800000) AND *+(42780000,ff800000,c683287b) AND *+(00000000,49192c2d,49c1288d) AND *+(7f800000,ff800000,00000000) => ff800000 ff800000 49c1288d ff800000
+#1: xvmaddmsp *+(00000000,ff800000,00000000) AND *+(00000000,ff800000,7f800000) AND *+(80000000,ff800000,7fffffff) AND *+(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmaddmsp *+(ff800000,c683287b,ff800000) AND *+(7fffffff,c683287b,c683287b) AND *+(ffffffff,c683287b,80000000) AND *+(7fc00000,c683287b,00000000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvmaddmsp *+(ffc00000,c683287b,00000000) AND *+(80000000,c683287b,7f800000) AND *+(c683287b,c683287b,7fffffff) AND *+(49192c2d,c683287b,7fc00000) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvmaddmsp *+(7f800000,80000000,ff800000) AND *+(00000000,80000000,c683287b) AND *+(00000000,80000000,80000000) AND *+(80000000,80000000,00000000) => 7fc00000 c683287b 80000000 00000000
+#5: xvmaddmsp *+(7f800000,80000000,00000000) AND *+(ff800000,80000000,7f800000) AND *+(7fffffff,80000000,7fffffff) AND *+(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmaddmsp *+(7fc00000,00000000,ff800000) AND *+(ffc00000,00000000,c683287b) AND *+(80000000,00000000,80000000) AND *+(c683287b,00000000,00000000) => 7fc00000 ffc00000 80000000 00000000
+#7: xvmaddmsp *+(00000000,00000000,00000000) AND *+(7f800000,00000000,7f800000) AND *+(00000000,00000000,7fffffff) AND *+(00000000,00000000,7fc00000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmaddmsp *+(80000000,00000000,ff800000) AND *+(7f800000,00000000,c683287b) AND *+(ff800000,00000000,80000000) AND *+(7fffffff,00000000,00000000) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvmaddmsp *+(ffffffff,00000000,42780000) AND *+(7fc00000,00000000,7f800000) AND *+(ffc00000,00000000,7fffffff) AND *+(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmaddmsp *+(42780000,7f800000,ff800000) AND *+(00000000,7f800000,c683287b) AND *+(7f800000,7f800000,80000000) AND *+(00000000,7f800000,00000000) => 7fc00000 7fc00000 7f800000 7fc00000
+#11: xvmaddmsp *+(00000000,7f800000,00000000) AND *+(80000000,7f800000,7f800000) AND *+(7f800000,7f800000,7fffffff) AND *+(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmaddmsp *+(7fffffff,ffffffff,ff800000) AND *+(ffffffff,ffffffff,c683287b) AND *+(7fc00000,ffc00000,80000000) AND *+(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmaddmsp *+(3ec00000,ffffffff,00000000) AND *+(42780000,ffffffff,7f800000) AND *+(00000000,ffffffff,7fffffff) AND *+(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmaddmsp *+(00000000,ffc00000,ff800000) AND *+(00000000,ffc00000,c683287b) AND *+(80000000,ffc00000,80000000) AND *+(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmaddmsp *+(ff800000,49192c2d,49c1288d) AND *+(7fffffff,7fffffff,7fc00000) AND *+(ffffffff,7fc00000,7fc00000) AND *+(7fc00000,7fc00000,ffc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmaddadp !*+(fff0000000000000,fff0000000000000,3fd8000000000000) AND !*+(c0d0650f5a07b353,fff0000000000000,404f000000000000) => 7ff0000000000000 7ff0000000000000
+#1: xvnmaddadp !*+(41382511a2000000,41232585a9900000,0018000000b77501) AND !*+(0000000000000000,fff0000000000000,7fe800000000051b) => c1382511a2000000 7ff0000000000000
+#2: xvnmaddadp !*+(0123214569900000,fff0000000000000,0123214569900000) AND !*+(7ff0000000000000,fff0000000000000,0000000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmaddadp !*+(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND !*+(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmaddadp !*+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => 7ff8000000000000 7fffffffffffffff
+#5: xvnmaddadp !*+(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND !*+(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmaddadp !*+(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND !*+(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 fff0000000000000
+#7: xvnmaddadp !*+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND !*+(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmaddadp !*+(fff0000000000000,8000000000000000,404f000000000000) AND !*+(c0d0650f5a07b353,8000000000000000,0018000000b77501) => 7ff0000000000000 40d0650f5a07b353
+#9: xvnmaddadp !*+(8000000000000000,8000000000000000,7fe800000000051b) AND !*+(0000000000000000,8000000000000000,0123214569900000) => 0000000000000000 8000000000000000
+#10: xvnmaddadp !*+(0123214569900000,8000000000000000,0000000000000000) AND !*+(7ff0000000000000,8000000000000000,8000000000000000) => 8123214569900000 fff0000000000000
+#11: xvnmaddadp !*+(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND !*+(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmaddadp !*+(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND !*+(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmaddadp !*+(8000000000000000,0000000000000000,7ff8000000000000) AND !*+(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmaddadp !*+(0123214569900000,0000000000000000,8008340000078000) AND !*+(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 8123214569900000 fff0000000000000
+#15: xvnmaddadp !*+(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND !*+(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmaddadp !*+(fff0000000000000,0123214569900000,0018000000b77501) AND !*+(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => 7ff0000000000000 c11bab9728b78ae5
+#17: xvnmaddadp !*+(8000000000000000,0123214569900000,0123214569900000) AND !*+(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmaddadp !*+(404f000000000000,0123214569900000,8000000000000000) AND !*+(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 fff0000000000000
+#19: xvnmaddadp !*+(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND !*+(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmaddadp !*+(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND !*+(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvnmaddadp !*+(8000000000000000,7ff0000000000000,fff8000000000000) AND !*+(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 7ff0000000000000
+#22: xvnmaddadp !*+(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND !*+(7ff0000000000000,7ff0000000000000,41232585a9900000) => 7ff0000000000000 fff0000000000000
+#23: xvnmaddadp !*+(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND !*+(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmaddadp !*+(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND !*+(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvnmaddadp !*+(8000000000000000,fff8000000000000,0000000000000000) AND !*+(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmaddadp !*+(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND !*+(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmaddadp !*+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*+(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvnmaddadp !*+(fff0000000000000,fff8000000000000,7ff8000000000000) AND !*+(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvnmaddadp !*+(8000000000000000,fff8000000000000,8008340000078000) AND !*+(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 42039db3bbaae2d2
+#30: xvnmaddadp !*+(41382511a2000000,41232585a9900000,3fd8000000000000) AND !*+(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => c13bbc1ab1cb0000 7fffffffffffffff
+#31: xvnmaddadp !*+(7ff8000000000000,7ff8000000000000,0018000000b77501) AND !*+(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmaddmdp !*+(3fd8000000000000,fff0000000000000,fff0000000000000) AND !*+(404f000000000000,fff0000000000000,c0d0650f5a07b353) => 7ff0000000000000 7ff0000000000000
+#1: xvnmaddmdp !*+(0018000000b77501,41232585a9900000,41382511a2000000) AND !*+(7fe800000000051b,fff0000000000000,0000000000000000) => c1382511a2000000 7ff0000000000000
+#2: xvnmaddmdp !*+(0123214569900000,fff0000000000000,0123214569900000) AND !*+(0000000000000000,fff0000000000000,7ff0000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmaddmdp !*+(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND !*+(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmaddmdp !*+(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*+(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => 7ff8000000000000 7fffffffffffffff
+#5: xvnmaddmdp !*+(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND !*+(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmaddmdp !*+(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND !*+(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 fff0000000000000
+#7: xvnmaddmdp !*+(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND !*+(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmaddmdp !*+(404f000000000000,8000000000000000,fff0000000000000) AND !*+(0018000000b77501,8000000000000000,c0d0650f5a07b353) => 7ff0000000000000 40d0650f5a07b353
+#9: xvnmaddmdp !*+(7fe800000000051b,8000000000000000,8000000000000000) AND !*+(0123214569900000,8000000000000000,0000000000000000) => 0000000000000000 8000000000000000
+#10: xvnmaddmdp !*+(0000000000000000,8000000000000000,0123214569900000) AND !*+(8000000000000000,8000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#11: xvnmaddmdp !*+(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND !*+(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmaddmdp !*+(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND !*+(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmaddmdp !*+(7ff8000000000000,0000000000000000,8000000000000000) AND !*+(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmaddmdp !*+(8008340000078000,0000000000000000,0123214569900000) AND !*+(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#15: xvnmaddmdp !*+(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND !*+(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmaddmdp !*+(0018000000b77501,0123214569900000,fff0000000000000) AND !*+(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => 7ff0000000000000 c11bab9728b78ae5
+#17: xvnmaddmdp !*+(0123214569900000,0123214569900000,8000000000000000) AND !*+(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmaddmdp !*+(8000000000000000,0123214569900000,404f000000000000) AND !*+(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 fff0000000000000
+#19: xvnmaddmdp !*+(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND !*+(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmaddmdp !*+(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND !*+(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvnmaddmdp !*+(fff8000000000000,7ff0000000000000,8000000000000000) AND !*+(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 7ff0000000000000
+#22: xvnmaddmdp !*+(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND !*+(41232585a9900000,7ff0000000000000,7ff0000000000000) => 7ff0000000000000 fff0000000000000
+#23: xvnmaddmdp !*+(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND !*+(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmaddmdp !*+(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND !*+(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvnmaddmdp !*+(0000000000000000,fff8000000000000,8000000000000000) AND !*+(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmaddmdp !*+(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND !*+(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmaddmdp !*+(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*+(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvnmaddmdp !*+(7ff8000000000000,fff8000000000000,fff0000000000000) AND !*+(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvnmaddmdp !*+(8008340000078000,fff8000000000000,8000000000000000) AND !*+(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 42039db3bbaae2d2
+#30: xvnmaddmdp !*+(3fd8000000000000,41232585a9900000,41382511a2000000) AND !*+(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => c13bbc1ab1cb0000 7fffffffffffffff
+#31: xvnmaddmdp !*+(0018000000b77501,7ff8000000000000,7ff8000000000000) AND !*+(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmaddasp !*+(ff800000,ff800000,3ec00000) AND !*+(c683287b,ff800000,42780000) AND !*+(49c1288d,49192c2d,00000000) AND !*+(00000000,ff800000,7f800000) => 7f800000 7f800000 c9c1288d 7f800000
+#1: xvnmaddasp !*+(00000000,ff800000,00000000) AND !*+(7f800000,ff800000,00000000) AND !*+(7fffffff,ff800000,80000000) AND !*+(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmaddasp !*+(ff800000,c683287b,ff800000) AND !*+(c683287b,c683287b,7fffffff) AND !*+(80000000,c683287b,ffffffff) AND !*+(00000000,c683287b,7fc00000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvnmaddasp !*+(00000000,c683287b,ffc00000) AND !*+(7f800000,c683287b,80000000) AND !*+(7fffffff,c683287b,c683287b) AND !*+(7fc00000,c683287b,49192c2d) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvnmaddasp !*+(ff800000,80000000,7f800000) AND !*+(c683287b,80000000,00000000) AND !*+(80000000,80000000,00000000) AND !*+(00000000,80000000,80000000) => 7fc00000 4683287b 00000000 80000000
+#5: xvnmaddasp !*+(00000000,80000000,7f800000) AND !*+(7f800000,80000000,ff800000) AND !*+(7fffffff,80000000,7fffffff) AND !*+(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmaddasp !*+(ff800000,00000000,7fc00000) AND !*+(c683287b,00000000,ffc00000) AND !*+(80000000,00000000,80000000) AND !*+(00000000,00000000,c683287b) => 7fc00000 ffc00000 00000000 80000000
+#7: xvnmaddasp !*+(00000000,00000000,00000000) AND !*+(7f800000,00000000,7f800000) AND !*+(7fffffff,00000000,00000000) AND !*+(7fc00000,00000000,00000000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmaddasp !*+(ff800000,00000000,80000000) AND !*+(c683287b,00000000,7f800000) AND !*+(80000000,00000000,ff800000) AND !*+(00000000,00000000,7fffffff) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvnmaddasp !*+(42780000,00000000,ffffffff) AND !*+(7f800000,00000000,7fc00000) AND !*+(7fffffff,00000000,ffc00000) AND !*+(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmaddasp !*+(ff800000,7f800000,42780000) AND !*+(c683287b,7f800000,00000000) AND !*+(80000000,7f800000,7f800000) AND !*+(00000000,7f800000,00000000) => 7fc00000 7fc00000 ff800000 7fc00000
+#11: xvnmaddasp !*+(00000000,7f800000,00000000) AND !*+(7f800000,7f800000,80000000) AND !*+(7fffffff,7f800000,7f800000) AND !*+(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmaddasp !*+(ff800000,ffffffff,7fffffff) AND !*+(c683287b,ffffffff,ffffffff) AND !*+(80000000,ffc00000,7fc00000) AND !*+(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmaddasp !*+(00000000,ffffffff,3ec00000) AND !*+(7f800000,ffffffff,42780000) AND !*+(7fffffff,ffffffff,00000000) AND !*+(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmaddasp !*+(ff800000,ffc00000,00000000) AND !*+(c683287b,ffc00000,00000000) AND !*+(80000000,ffc00000,80000000) AND !*+(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmaddasp !*+(49c1288d,49192c2d,ff800000) AND !*+(7fc00000,7fffffff,7fffffff) AND !*+(7fc00000,7fc00000,ffffffff) AND !*+(ffc00000,7fc00000,7fc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmaddmsp !*+(3ec00000,ff800000,ff800000) AND !*+(42780000,ff800000,c683287b) AND !*+(00000000,49192c2d,49c1288d) AND !*+(7f800000,ff800000,00000000) => 7f800000 7f800000 c9c1288d 7f800000
+#1: xvnmaddmsp !*+(00000000,ff800000,00000000) AND !*+(00000000,ff800000,7f800000) AND !*+(80000000,ff800000,7fffffff) AND !*+(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmaddmsp !*+(ff800000,c683287b,ff800000) AND !*+(7fffffff,c683287b,c683287b) AND !*+(ffffffff,c683287b,80000000) AND !*+(7fc00000,c683287b,00000000) => 7fc00000 7fffffff ffffffff 7fc00000
+#3: xvnmaddmsp !*+(ffc00000,c683287b,00000000) AND !*+(80000000,c683287b,7f800000) AND !*+(c683287b,c683287b,7fffffff) AND !*+(49192c2d,c683287b,7fc00000) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvnmaddmsp !*+(7f800000,80000000,ff800000) AND !*+(00000000,80000000,c683287b) AND !*+(00000000,80000000,80000000) AND !*+(80000000,80000000,00000000) => 7fc00000 4683287b 00000000 80000000
+#5: xvnmaddmsp !*+(7f800000,80000000,00000000) AND !*+(ff800000,80000000,7f800000) AND !*+(7fffffff,80000000,7fffffff) AND !*+(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmaddmsp !*+(7fc00000,00000000,ff800000) AND !*+(ffc00000,00000000,c683287b) AND !*+(80000000,00000000,80000000) AND !*+(c683287b,00000000,00000000) => 7fc00000 ffc00000 00000000 80000000
+#7: xvnmaddmsp !*+(00000000,00000000,00000000) AND !*+(7f800000,00000000,7f800000) AND !*+(00000000,00000000,7fffffff) AND !*+(00000000,00000000,7fc00000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmaddmsp !*+(80000000,00000000,ff800000) AND !*+(7f800000,00000000,c683287b) AND !*+(ff800000,00000000,80000000) AND !*+(7fffffff,00000000,00000000) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvnmaddmsp !*+(ffffffff,00000000,42780000) AND !*+(7fc00000,00000000,7f800000) AND !*+(ffc00000,00000000,7fffffff) AND !*+(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmaddmsp !*+(42780000,7f800000,ff800000) AND !*+(00000000,7f800000,c683287b) AND !*+(7f800000,7f800000,80000000) AND !*+(00000000,7f800000,00000000) => 7fc00000 7fc00000 ff800000 7fc00000
+#11: xvnmaddmsp !*+(00000000,7f800000,00000000) AND !*+(80000000,7f800000,7f800000) AND !*+(7f800000,7f800000,7fffffff) AND !*+(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmaddmsp !*+(7fffffff,ffffffff,ff800000) AND !*+(ffffffff,ffffffff,c683287b) AND !*+(7fc00000,ffc00000,80000000) AND !*+(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmaddmsp !*+(3ec00000,ffffffff,00000000) AND !*+(42780000,ffffffff,7f800000) AND !*+(00000000,ffffffff,7fffffff) AND !*+(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmaddmsp !*+(00000000,ffc00000,ff800000) AND !*+(00000000,ffc00000,c683287b) AND !*+(80000000,ffc00000,80000000) AND !*+(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmaddmsp !*+(ff800000,49192c2d,49c1288d) AND !*+(7fffffff,7fffffff,7fc00000) AND !*+(ffffffff,7fc00000,7fc00000) AND !*+(7fc00000,7fc00000,ffc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+#0: xvmsubadp *-(fff0000000000000,fff0000000000000,3fd8000000000000) AND *-(c0d0650f5a07b353,fff0000000000000,404f000000000000) => 7ff8000000000000 fff0000000000000
+#1: xvmsubadp *-(41382511a2000000,41232585a9900000,0018000000b77501) AND *-(0000000000000000,fff0000000000000,7fe800000000051b) => c1382511a2000000 fff0000000000000
+#2: xvmsubadp *-(0123214569900000,fff0000000000000,0123214569900000) AND *-(7ff0000000000000,fff0000000000000,0000000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmsubadp *-(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND *-(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmsubadp *-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => 7ff0000000000000 7fffffffffffffff
+#5: xvmsubadp *-(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND *-(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmsubadp *-(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND *-(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 fff0000000000000
+#7: xvmsubadp *-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND *-(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmsubadp *-(fff0000000000000,8000000000000000,404f000000000000) AND *-(c0d0650f5a07b353,8000000000000000,0018000000b77501) => 7ff0000000000000 40d0650f5a07b353
+#9: xvmsubadp *-(8000000000000000,8000000000000000,7fe800000000051b) AND *-(0000000000000000,8000000000000000,0123214569900000) => 0000000000000000 8000000000000000
+#10: xvmsubadp *-(0123214569900000,8000000000000000,0000000000000000) AND *-(7ff0000000000000,8000000000000000,8000000000000000) => 8123214569900000 fff0000000000000
+#11: xvmsubadp *-(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND *-(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmsubadp *-(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND *-(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvmsubadp *-(8000000000000000,0000000000000000,7ff8000000000000) AND *-(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmsubadp *-(0123214569900000,0000000000000000,8008340000078000) AND *-(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 8123214569900000 fff0000000000000
+#15: xvmsubadp *-(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND *-(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmsubadp *-(fff0000000000000,0123214569900000,0018000000b77501) AND *-(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => 7ff0000000000000 411db83913f88150
+#17: xvmsubadp *-(8000000000000000,0123214569900000,0123214569900000) AND *-(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmsubadp *-(404f000000000000,0123214569900000,8000000000000000) AND *-(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 7ff8000000000000
+#19: xvmsubadp *-(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND *-(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvmsubadp *-(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND *-(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvmsubadp *-(8000000000000000,7ff0000000000000,fff8000000000000) AND *-(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 fff0000000000000
+#22: xvmsubadp *-(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND *-(7ff0000000000000,7ff0000000000000,41232585a9900000) => fff0000000000000 7ff8000000000000
+#23: xvmsubadp *-(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND *-(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvmsubadp *-(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND *-(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvmsubadp *-(8000000000000000,fff8000000000000,0000000000000000) AND *-(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmsubadp *-(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND *-(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmsubadp *-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *-(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvmsubadp *-(fff0000000000000,fff8000000000000,7ff8000000000000) AND *-(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvmsubadp *-(8000000000000000,fff8000000000000,8008340000078000) AND *-(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 c2039f360cc502d2
+#30: xvmsubadp *-(41382511a2000000,41232585a9900000,3fd8000000000000) AND *-(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => c1348e0892350000 7fffffffffffffff
+#31: xvmsubadp *-(7ff8000000000000,7ff8000000000000,0018000000b77501) AND *-(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmsubmdp *-(3fd8000000000000,fff0000000000000,fff0000000000000) AND *-(404f000000000000,fff0000000000000,c0d0650f5a07b353) => 7ff8000000000000 fff0000000000000
+#1: xvmsubmdp *-(0018000000b77501,41232585a9900000,41382511a2000000) AND *-(7fe800000000051b,fff0000000000000,0000000000000000) => c1382511a2000000 fff0000000000000
+#2: xvmsubmdp *-(0123214569900000,fff0000000000000,0123214569900000) AND *-(0000000000000000,fff0000000000000,7ff0000000000000) => fff0000000000000 7ff8000000000000
+#3: xvmsubmdp *-(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND *-(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvmsubmdp *-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND *-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => 7ff0000000000000 7fffffffffffffff
+#5: xvmsubmdp *-(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND *-(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvmsubmdp *-(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND *-(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 fff0000000000000
+#7: xvmsubmdp *-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND *-(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvmsubmdp *-(404f000000000000,8000000000000000,fff0000000000000) AND *-(0018000000b77501,8000000000000000,c0d0650f5a07b353) => 7ff0000000000000 40d0650f5a07b353
+#9: xvmsubmdp *-(7fe800000000051b,8000000000000000,8000000000000000) AND *-(0123214569900000,8000000000000000,0000000000000000) => 0000000000000000 8000000000000000
+#10: xvmsubmdp *-(0000000000000000,8000000000000000,0123214569900000) AND *-(8000000000000000,8000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#11: xvmsubmdp *-(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND *-(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvmsubmdp *-(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND *-(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvmsubmdp *-(7ff8000000000000,0000000000000000,8000000000000000) AND *-(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvmsubmdp *-(8008340000078000,0000000000000000,0123214569900000) AND *-(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 8123214569900000 fff0000000000000
+#15: xvmsubmdp *-(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND *-(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvmsubmdp *-(0018000000b77501,0123214569900000,fff0000000000000) AND *-(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => 7ff0000000000000 411db83913f88150
+#17: xvmsubmdp *-(0123214569900000,0123214569900000,8000000000000000) AND *-(0000000000000000,0123214569900000,0000000000000000) => 0000000000000000 0000000000000000
+#18: xvmsubmdp *-(8000000000000000,0123214569900000,404f000000000000) AND *-(7ff0000000000000,0123214569900000,7ff0000000000000) => c04f000000000000 7ff8000000000000
+#19: xvmsubmdp *-(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND *-(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvmsubmdp *-(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND *-(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvmsubmdp *-(fff8000000000000,7ff0000000000000,8000000000000000) AND *-(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 fff0000000000000
+#22: xvmsubmdp *-(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND *-(41232585a9900000,7ff0000000000000,7ff0000000000000) => fff0000000000000 7ff8000000000000
+#23: xvmsubmdp *-(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND *-(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvmsubmdp *-(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND *-(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvmsubmdp *-(0000000000000000,fff8000000000000,8000000000000000) AND *-(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvmsubmdp *-(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND *-(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvmsubmdp *-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND *-(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvmsubmdp *-(7ff8000000000000,fff8000000000000,fff0000000000000) AND *-(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvmsubmdp *-(8008340000078000,fff8000000000000,8000000000000000) AND *-(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 c2039f360cc502d2
+#30: xvmsubmdp *-(3fd8000000000000,41232585a9900000,41382511a2000000) AND *-(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => c1348e0892350000 7fffffffffffffff
+#31: xvmsubmdp *-(0018000000b77501,7ff8000000000000,7ff8000000000000) AND *-(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvmsubasp *-(ff800000,ff800000,3ec00000) AND *-(c683287b,ff800000,42780000) AND *-(49c1288d,49192c2d,00000000) AND *-(00000000,ff800000,7f800000) => 7fc00000 ff800000 c9c1288d ff800000
+#1: xvmsubasp *-(00000000,ff800000,00000000) AND *-(7f800000,ff800000,00000000) AND *-(7fffffff,ff800000,80000000) AND *-(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmsubasp *-(ff800000,c683287b,ff800000) AND *-(c683287b,c683287b,7fffffff) AND *-(80000000,c683287b,ffffffff) AND *-(00000000,c683287b,7fc00000) => 7f800000 7fffffff ffffffff 7fc00000
+#3: xvmsubasp *-(00000000,c683287b,ffc00000) AND *-(7f800000,c683287b,80000000) AND *-(7fffffff,c683287b,c683287b) AND *-(7fc00000,c683287b,49192c2d) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvmsubasp *-(ff800000,80000000,7f800000) AND *-(c683287b,80000000,00000000) AND *-(80000000,80000000,00000000) AND *-(00000000,80000000,80000000) => 7fc00000 4683287b 00000000 00000000
+#5: xvmsubasp *-(00000000,80000000,7f800000) AND *-(7f800000,80000000,ff800000) AND *-(7fffffff,80000000,7fffffff) AND *-(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmsubasp *-(ff800000,00000000,7fc00000) AND *-(c683287b,00000000,ffc00000) AND *-(80000000,00000000,80000000) AND *-(00000000,00000000,c683287b) => 7fc00000 ffc00000 00000000 80000000
+#7: xvmsubasp *-(00000000,00000000,00000000) AND *-(7f800000,00000000,7f800000) AND *-(7fffffff,00000000,00000000) AND *-(7fc00000,00000000,00000000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmsubasp *-(ff800000,00000000,80000000) AND *-(c683287b,00000000,7f800000) AND *-(80000000,00000000,ff800000) AND *-(00000000,00000000,7fffffff) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvmsubasp *-(42780000,00000000,ffffffff) AND *-(7f800000,00000000,7fc00000) AND *-(7fffffff,00000000,ffc00000) AND *-(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmsubasp *-(ff800000,7f800000,42780000) AND *-(c683287b,7f800000,00000000) AND *-(80000000,7f800000,7f800000) AND *-(00000000,7f800000,00000000) => 7f800000 7fc00000 7f800000 7fc00000
+#11: xvmsubasp *-(00000000,7f800000,00000000) AND *-(7f800000,7f800000,80000000) AND *-(7fffffff,7f800000,7f800000) AND *-(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmsubasp *-(ff800000,ffffffff,7fffffff) AND *-(c683287b,ffffffff,ffffffff) AND *-(80000000,ffc00000,7fc00000) AND *-(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmsubasp *-(00000000,ffffffff,3ec00000) AND *-(7f800000,ffffffff,42780000) AND *-(7fffffff,ffffffff,00000000) AND *-(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmsubasp *-(ff800000,ffc00000,00000000) AND *-(c683287b,ffc00000,00000000) AND *-(80000000,ffc00000,80000000) AND *-(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmsubasp *-(49c1288d,49192c2d,ff800000) AND *-(7fc00000,7fffffff,7fffffff) AND *-(7fc00000,7fc00000,ffffffff) AND *-(ffc00000,7fc00000,7fc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvmsubmsp *-(3ec00000,ff800000,ff800000) AND *-(42780000,ff800000,c683287b) AND *-(00000000,49192c2d,49c1288d) AND *-(7f800000,ff800000,00000000) => 7fc00000 ff800000 c9c1288d ff800000
+#1: xvmsubmsp *-(00000000,ff800000,00000000) AND *-(00000000,ff800000,7f800000) AND *-(80000000,ff800000,7fffffff) AND *-(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvmsubmsp *-(ff800000,c683287b,ff800000) AND *-(7fffffff,c683287b,c683287b) AND *-(ffffffff,c683287b,80000000) AND *-(7fc00000,c683287b,00000000) => 7f800000 7fffffff ffffffff 7fc00000
+#3: xvmsubmsp *-(ffc00000,c683287b,00000000) AND *-(80000000,c683287b,7f800000) AND *-(c683287b,c683287b,7fffffff) AND *-(49192c2d,c683287b,7fc00000) => ffc00000 ff800000 7fffffff 7fc00000
+#4: xvmsubmsp *-(7f800000,80000000,ff800000) AND *-(00000000,80000000,c683287b) AND *-(00000000,80000000,80000000) AND *-(80000000,80000000,00000000) => 7fc00000 4683287b 00000000 00000000
+#5: xvmsubmsp *-(7f800000,80000000,00000000) AND *-(ff800000,80000000,7f800000) AND *-(7fffffff,80000000,7fffffff) AND *-(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvmsubmsp *-(7fc00000,00000000,ff800000) AND *-(ffc00000,00000000,c683287b) AND *-(80000000,00000000,80000000) AND *-(c683287b,00000000,00000000) => 7fc00000 ffc00000 00000000 80000000
+#7: xvmsubmsp *-(00000000,00000000,00000000) AND *-(7f800000,00000000,7f800000) AND *-(00000000,00000000,7fffffff) AND *-(00000000,00000000,7fc00000) => 00000000 7fc00000 7fffffff 7fc00000
+#8: xvmsubmsp *-(80000000,00000000,ff800000) AND *-(7f800000,00000000,c683287b) AND *-(ff800000,00000000,80000000) AND *-(7fffffff,00000000,00000000) => 7f800000 7fc00000 7fc00000 7fffffff
+#9: xvmsubmsp *-(ffffffff,00000000,42780000) AND *-(7fc00000,00000000,7f800000) AND *-(ffc00000,00000000,7fffffff) AND *-(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvmsubmsp *-(42780000,7f800000,ff800000) AND *-(00000000,7f800000,c683287b) AND *-(7f800000,7f800000,80000000) AND *-(00000000,7f800000,00000000) => 7f800000 7fc00000 7f800000 7fc00000
+#11: xvmsubmsp *-(00000000,7f800000,00000000) AND *-(80000000,7f800000,7f800000) AND *-(7f800000,7f800000,7fffffff) AND *-(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvmsubmsp *-(7fffffff,ffffffff,ff800000) AND *-(ffffffff,ffffffff,c683287b) AND *-(7fc00000,ffc00000,80000000) AND *-(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvmsubmsp *-(3ec00000,ffffffff,00000000) AND *-(42780000,ffffffff,7f800000) AND *-(00000000,ffffffff,7fffffff) AND *-(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvmsubmsp *-(00000000,ffc00000,ff800000) AND *-(00000000,ffc00000,c683287b) AND *-(80000000,ffc00000,80000000) AND *-(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 7f800000
+#15: xvmsubmsp *-(ff800000,49192c2d,49c1288d) AND *-(7fffffff,7fffffff,7fc00000) AND *-(ffffffff,7fc00000,7fc00000) AND *-(7fc00000,7fc00000,ffc00000) => ff800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmsubadp !*-(fff0000000000000,fff0000000000000,3fd8000000000000) AND !*-(c0d0650f5a07b353,fff0000000000000,404f000000000000) => 7ff8000000000000 7ff0000000000000
+#1: xvnmsubadp !*-(41382511a2000000,41232585a9900000,0018000000b77501) AND !*-(0000000000000000,fff0000000000000,7fe800000000051b) => 41382511a2000000 7ff0000000000000
+#2: xvnmsubadp !*-(0123214569900000,fff0000000000000,0123214569900000) AND !*-(7ff0000000000000,fff0000000000000,0000000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmsubadp !*-(7ff7ffffffffffff,fff0000000000000,8000000000000000) AND !*-(7ff8000000000000,fff0000000000000,7ff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmsubadp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) => fff0000000000000 7fffffffffffffff
+#5: xvnmsubadp !*-(8000000000000000,c0d0650f5a07b353,fff7ffffffffffff) AND !*-(0000000000000000,c0d0650f5a07b353,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmsubadp !*-(0123214569900000,c0d0650f5a07b353,fff8000000000000) AND !*-(7ff0000000000000,c0d0650f5a07b353,8008340000078000) => fff8000000000000 7ff0000000000000
+#7: xvnmsubadp !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) AND !*-(7ff8000000000000,c0d0650f5a07b353,41232585a9900000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmsubadp !*-(fff0000000000000,8000000000000000,404f000000000000) AND !*-(c0d0650f5a07b353,8000000000000000,0018000000b77501) => fff0000000000000 c0d0650f5a07b353
+#9: xvnmsubadp !*-(8000000000000000,8000000000000000,7fe800000000051b) AND !*-(0000000000000000,8000000000000000,0123214569900000) => 8000000000000000 0000000000000000
+#10: xvnmsubadp !*-(0123214569900000,8000000000000000,0000000000000000) AND !*-(7ff0000000000000,8000000000000000,8000000000000000) => 0123214569900000 7ff0000000000000
+#11: xvnmsubadp !*-(7ff7ffffffffffff,8000000000000000,7ff0000000000000) AND !*-(7ff8000000000000,8000000000000000,fff0000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmsubadp !*-(fff0000000000000,0000000000000000,7ff7ffffffffffff) AND !*-(c0d0650f5a07b353,0000000000000000,fff7ffffffffffff) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmsubadp !*-(8000000000000000,0000000000000000,7ff8000000000000) AND !*-(0000000000000000,0000000000000000,fff8000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmsubadp !*-(0123214569900000,0000000000000000,8008340000078000) AND !*-(7ff0000000000000,0000000000000000,c0d0650f5a07b353) => 0123214569900000 7ff0000000000000
+#15: xvnmsubadp !*-(7ff7ffffffffffff,0000000000000000,3fd8000000000000) AND !*-(7ff8000000000000,0000000000000000,404f000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmsubadp !*-(fff0000000000000,0123214569900000,0018000000b77501) AND !*-(c0d0650f5a07b353,0123214569900000,7fe800000000051b) => fff0000000000000 c11db83913f88150
+#17: xvnmsubadp !*-(8000000000000000,0123214569900000,0123214569900000) AND !*-(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmsubadp !*-(404f000000000000,0123214569900000,8000000000000000) AND !*-(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff8000000000000
+#19: xvnmsubadp !*-(7ff7ffffffffffff,0123214569900000,fff0000000000000) AND !*-(7ff8000000000000,0123214569900000,7ff7ffffffffffff) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmsubadp !*-(fff0000000000000,7ff0000000000000,fff7ffffffffffff) AND !*-(c0d0650f5a07b353,7ff0000000000000,7ff8000000000000) => ffffffffffffffff 7ff8000000000000
+#21: xvnmsubadp !*-(8000000000000000,7ff0000000000000,fff8000000000000) AND !*-(0000000000000000,7ff0000000000000,8008340000078000) => fff8000000000000 7ff0000000000000
+#22: xvnmsubadp !*-(0123214569900000,7ff0000000000000,c0d0650f5a07b353) AND !*-(7ff0000000000000,7ff0000000000000,41232585a9900000) => 7ff0000000000000 7ff8000000000000
+#23: xvnmsubadp !*-(7ff7ffffffffffff,7ff0000000000000,404f000000000000) AND !*-(7ff8000000000000,7ff0000000000000,0018000000b77501) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmsubadp !*-(fff0000000000000,fff7ffffffffffff,7fe800000000051b) AND !*-(c0d0650f5a07b353,fff7ffffffffffff,0123214569900000) => ffffffffffffffff ffffffffffffffff
+#25: xvnmsubadp !*-(8000000000000000,fff8000000000000,0000000000000000) AND !*-(0000000000000000,fff8000000000000,8000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmsubadp !*-(0123214569900000,fff7ffffffffffff,7ff0000000000000) AND !*-(7ff0000000000000,fff7ffffffffffff,fff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmsubadp !*-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*-(7ff8000000000000,fff7ffffffffffff,fff7ffffffffffff) => ffffffffffffffff ffffffffffffffff
+#28: xvnmsubadp !*-(fff0000000000000,fff8000000000000,7ff8000000000000) AND !*-(c0d0650f5a07b353,fff8000000000000,fff8000000000000) => fff8000000000000 fff8000000000000
+#29: xvnmsubadp !*-(8000000000000000,fff8000000000000,8008340000078000) AND !*-(41382511a2000000,41232585a9900000,c0d0650f5a07b353) => fff8000000000000 42039f360cc502d2
+#30: xvnmsubadp !*-(41382511a2000000,41232585a9900000,3fd8000000000000) AND !*-(7ff8000000000000,7ff7ffffffffffff,404f000000000000) => 41348e0892350000 7fffffffffffffff
+#31: xvnmsubadp !*-(7ff8000000000000,7ff8000000000000,0018000000b77501) AND !*-(fff8000000000000,7ff8000000000000,7fe800000000051b) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmsubmdp !*-(3fd8000000000000,fff0000000000000,fff0000000000000) AND !*-(404f000000000000,fff0000000000000,c0d0650f5a07b353) => 7ff8000000000000 7ff0000000000000
+#1: xvnmsubmdp !*-(0018000000b77501,41232585a9900000,41382511a2000000) AND !*-(7fe800000000051b,fff0000000000000,0000000000000000) => 41382511a2000000 7ff0000000000000
+#2: xvnmsubmdp !*-(0123214569900000,fff0000000000000,0123214569900000) AND !*-(0000000000000000,fff0000000000000,7ff0000000000000) => 7ff0000000000000 7ff8000000000000
+#3: xvnmsubmdp !*-(8000000000000000,fff0000000000000,7ff7ffffffffffff) AND !*-(7ff0000000000000,fff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#4: xvnmsubmdp !*-(fff0000000000000,c0d0650f5a07b353,fff0000000000000) AND !*-(7ff7ffffffffffff,c0d0650f5a07b353,c0d0650f5a07b353) => fff0000000000000 7fffffffffffffff
+#5: xvnmsubmdp !*-(fff7ffffffffffff,c0d0650f5a07b353,8000000000000000) AND !*-(7ff8000000000000,c0d0650f5a07b353,0000000000000000) => ffffffffffffffff 7ff8000000000000
+#6: xvnmsubmdp !*-(fff8000000000000,c0d0650f5a07b353,0123214569900000) AND !*-(8008340000078000,c0d0650f5a07b353,7ff0000000000000) => fff8000000000000 7ff0000000000000
+#7: xvnmsubmdp !*-(c0d0650f5a07b353,c0d0650f5a07b353,7ff7ffffffffffff) AND !*-(41232585a9900000,c0d0650f5a07b353,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#8: xvnmsubmdp !*-(404f000000000000,8000000000000000,fff0000000000000) AND !*-(0018000000b77501,8000000000000000,c0d0650f5a07b353) => fff0000000000000 c0d0650f5a07b353
+#9: xvnmsubmdp !*-(7fe800000000051b,8000000000000000,8000000000000000) AND !*-(0123214569900000,8000000000000000,0000000000000000) => 8000000000000000 0000000000000000
+#10: xvnmsubmdp !*-(0000000000000000,8000000000000000,0123214569900000) AND !*-(8000000000000000,8000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#11: xvnmsubmdp !*-(7ff0000000000000,8000000000000000,7ff7ffffffffffff) AND !*-(fff0000000000000,8000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#12: xvnmsubmdp !*-(7ff7ffffffffffff,0000000000000000,fff0000000000000) AND !*-(fff7ffffffffffff,0000000000000000,c0d0650f5a07b353) => 7fffffffffffffff ffffffffffffffff
+#13: xvnmsubmdp !*-(7ff8000000000000,0000000000000000,8000000000000000) AND !*-(fff8000000000000,0000000000000000,0000000000000000) => 7ff8000000000000 fff8000000000000
+#14: xvnmsubmdp !*-(8008340000078000,0000000000000000,0123214569900000) AND !*-(c0d0650f5a07b353,0000000000000000,7ff0000000000000) => 0123214569900000 7ff0000000000000
+#15: xvnmsubmdp !*-(3fd8000000000000,0000000000000000,7ff7ffffffffffff) AND !*-(404f000000000000,0000000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#16: xvnmsubmdp !*-(0018000000b77501,0123214569900000,fff0000000000000) AND !*-(7fe800000000051b,0123214569900000,c0d0650f5a07b353) => fff0000000000000 c11db83913f88150
+#17: xvnmsubmdp !*-(0123214569900000,0123214569900000,8000000000000000) AND !*-(0000000000000000,0123214569900000,0000000000000000) => 8000000000000000 8000000000000000
+#18: xvnmsubmdp !*-(8000000000000000,0123214569900000,404f000000000000) AND !*-(7ff0000000000000,0123214569900000,7ff0000000000000) => 404f000000000000 7ff8000000000000
+#19: xvnmsubmdp !*-(fff0000000000000,0123214569900000,7ff7ffffffffffff) AND !*-(7ff7ffffffffffff,0123214569900000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#20: xvnmsubmdp !*-(fff7ffffffffffff,7ff0000000000000,fff0000000000000) AND !*-(7ff8000000000000,7ff0000000000000,c0d0650f5a07b353) => ffffffffffffffff 7ff8000000000000
+#21: xvnmsubmdp !*-(fff8000000000000,7ff0000000000000,8000000000000000) AND !*-(8008340000078000,7ff0000000000000,0000000000000000) => fff8000000000000 7ff0000000000000
+#22: xvnmsubmdp !*-(c0d0650f5a07b353,7ff0000000000000,0123214569900000) AND !*-(41232585a9900000,7ff0000000000000,7ff0000000000000) => 7ff0000000000000 7ff8000000000000
+#23: xvnmsubmdp !*-(404f000000000000,7ff0000000000000,7ff7ffffffffffff) AND !*-(0018000000b77501,7ff0000000000000,7ff8000000000000) => 7fffffffffffffff 7ff8000000000000
+#24: xvnmsubmdp !*-(7fe800000000051b,fff7ffffffffffff,fff0000000000000) AND !*-(0123214569900000,fff7ffffffffffff,c0d0650f5a07b353) => ffffffffffffffff ffffffffffffffff
+#25: xvnmsubmdp !*-(0000000000000000,fff8000000000000,8000000000000000) AND !*-(8000000000000000,fff8000000000000,0000000000000000) => fff8000000000000 fff8000000000000
+#26: xvnmsubmdp !*-(7ff0000000000000,fff7ffffffffffff,0123214569900000) AND !*-(fff0000000000000,fff7ffffffffffff,7ff0000000000000) => ffffffffffffffff ffffffffffffffff
+#27: xvnmsubmdp !*-(7ff7ffffffffffff,fff7ffffffffffff,7ff7ffffffffffff) AND !*-(fff7ffffffffffff,fff7ffffffffffff,7ff8000000000000) => ffffffffffffffff ffffffffffffffff
+#28: xvnmsubmdp !*-(7ff8000000000000,fff8000000000000,fff0000000000000) AND !*-(fff8000000000000,fff8000000000000,c0d0650f5a07b353) => fff8000000000000 fff8000000000000
+#29: xvnmsubmdp !*-(8008340000078000,fff8000000000000,8000000000000000) AND !*-(c0d0650f5a07b353,41232585a9900000,41382511a2000000) => fff8000000000000 42039f360cc502d2
+#30: xvnmsubmdp !*-(3fd8000000000000,41232585a9900000,41382511a2000000) AND !*-(404f000000000000,7ff7ffffffffffff,7ff8000000000000) => 41348e0892350000 7fffffffffffffff
+#31: xvnmsubmdp !*-(0018000000b77501,7ff8000000000000,7ff8000000000000) AND !*-(7fe800000000051b,7ff8000000000000,fff8000000000000) => 7ff8000000000000 7ff8000000000000
+
+#0: xvnmsubasp !*-(ff800000,ff800000,3ec00000) AND !*-(c683287b,ff800000,42780000) AND !*-(49c1288d,49192c2d,00000000) AND !*-(00000000,ff800000,7f800000) => 7fc00000 7f800000 49c1288d 7f800000
+#1: xvnmsubasp !*-(00000000,ff800000,00000000) AND !*-(7f800000,ff800000,00000000) AND !*-(7fffffff,ff800000,80000000) AND !*-(7fc00000,ff800000,7f800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmsubasp !*-(ff800000,c683287b,ff800000) AND !*-(c683287b,c683287b,7fffffff) AND !*-(80000000,c683287b,ffffffff) AND !*-(00000000,c683287b,7fc00000) => ff800000 7fffffff ffffffff 7fc00000
+#3: xvnmsubasp !*-(00000000,c683287b,ffc00000) AND !*-(7f800000,c683287b,80000000) AND !*-(7fffffff,c683287b,c683287b) AND !*-(7fc00000,c683287b,49192c2d) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvnmsubasp !*-(ff800000,80000000,7f800000) AND !*-(c683287b,80000000,00000000) AND !*-(80000000,80000000,00000000) AND !*-(00000000,80000000,80000000) => 7fc00000 c683287b 80000000 80000000
+#5: xvnmsubasp !*-(00000000,80000000,7f800000) AND !*-(7f800000,80000000,ff800000) AND !*-(7fffffff,80000000,7fffffff) AND !*-(7fc00000,80000000,ffffffff) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmsubasp !*-(ff800000,00000000,7fc00000) AND !*-(c683287b,00000000,ffc00000) AND !*-(80000000,00000000,80000000) AND !*-(00000000,00000000,c683287b) => 7fc00000 ffc00000 80000000 00000000
+#7: xvnmsubasp !*-(00000000,00000000,00000000) AND !*-(7f800000,00000000,7f800000) AND !*-(7fffffff,00000000,00000000) AND !*-(7fc00000,00000000,00000000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmsubasp !*-(ff800000,00000000,80000000) AND !*-(c683287b,00000000,7f800000) AND !*-(80000000,00000000,ff800000) AND !*-(00000000,00000000,7fffffff) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvnmsubasp !*-(42780000,00000000,ffffffff) AND !*-(7f800000,00000000,7fc00000) AND !*-(7fffffff,00000000,ffc00000) AND !*-(7fc00000,00000000,80000000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmsubasp !*-(ff800000,7f800000,42780000) AND !*-(c683287b,7f800000,00000000) AND !*-(80000000,7f800000,7f800000) AND !*-(00000000,7f800000,00000000) => ff800000 7fc00000 ff800000 7fc00000
+#11: xvnmsubasp !*-(00000000,7f800000,00000000) AND !*-(7f800000,7f800000,80000000) AND !*-(7fffffff,7f800000,7f800000) AND !*-(7fc00000,7f800000,ff800000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmsubasp !*-(ff800000,ffffffff,7fffffff) AND !*-(c683287b,ffffffff,ffffffff) AND !*-(80000000,ffc00000,7fc00000) AND !*-(00000000,ffc00000,ffc00000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmsubasp !*-(00000000,ffffffff,3ec00000) AND !*-(7f800000,ffffffff,42780000) AND !*-(7fffffff,ffffffff,00000000) AND !*-(7fc00000,ffffffff,7f800000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmsubasp !*-(ff800000,ffc00000,00000000) AND !*-(c683287b,ffc00000,00000000) AND !*-(80000000,ffc00000,80000000) AND !*-(49c1288d,49192c2d,7f800000) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmsubasp !*-(49c1288d,49192c2d,ff800000) AND !*-(7fc00000,7fffffff,7fffffff) AND !*-(7fc00000,7fc00000,ffffffff) AND !*-(ffc00000,7fc00000,7fc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+#0: xvnmsubmsp !*-(3ec00000,ff800000,ff800000) AND !*-(42780000,ff800000,c683287b) AND !*-(00000000,49192c2d,49c1288d) AND !*-(7f800000,ff800000,00000000) => 7fc00000 7f800000 49c1288d 7f800000
+#1: xvnmsubmsp !*-(00000000,ff800000,00000000) AND !*-(00000000,ff800000,7f800000) AND !*-(80000000,ff800000,7fffffff) AND !*-(7f800000,ff800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#2: xvnmsubmsp !*-(ff800000,c683287b,ff800000) AND !*-(7fffffff,c683287b,c683287b) AND !*-(ffffffff,c683287b,80000000) AND !*-(7fc00000,c683287b,00000000) => ff800000 7fffffff ffffffff 7fc00000
+#3: xvnmsubmsp !*-(ffc00000,c683287b,00000000) AND !*-(80000000,c683287b,7f800000) AND !*-(c683287b,c683287b,7fffffff) AND !*-(49192c2d,c683287b,7fc00000) => ffc00000 7f800000 7fffffff 7fc00000
+#4: xvnmsubmsp !*-(7f800000,80000000,ff800000) AND !*-(00000000,80000000,c683287b) AND !*-(00000000,80000000,80000000) AND !*-(80000000,80000000,00000000) => 7fc00000 c683287b 80000000 80000000
+#5: xvnmsubmsp !*-(7f800000,80000000,00000000) AND !*-(ff800000,80000000,7f800000) AND !*-(7fffffff,80000000,7fffffff) AND !*-(ffffffff,80000000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#6: xvnmsubmsp !*-(7fc00000,00000000,ff800000) AND !*-(ffc00000,00000000,c683287b) AND !*-(80000000,00000000,80000000) AND !*-(c683287b,00000000,00000000) => 7fc00000 ffc00000 80000000 00000000
+#7: xvnmsubmsp !*-(00000000,00000000,00000000) AND !*-(7f800000,00000000,7f800000) AND !*-(00000000,00000000,7fffffff) AND !*-(00000000,00000000,7fc00000) => 80000000 7fc00000 7fffffff 7fc00000
+#8: xvnmsubmsp !*-(80000000,00000000,ff800000) AND !*-(7f800000,00000000,c683287b) AND !*-(ff800000,00000000,80000000) AND !*-(7fffffff,00000000,00000000) => ff800000 7fc00000 7fc00000 7fffffff
+#9: xvnmsubmsp !*-(ffffffff,00000000,42780000) AND !*-(7fc00000,00000000,7f800000) AND !*-(ffc00000,00000000,7fffffff) AND !*-(80000000,00000000,7fc00000) => ffffffff 7fc00000 7fffffff 7fc00000
+#10: xvnmsubmsp !*-(42780000,7f800000,ff800000) AND !*-(00000000,7f800000,c683287b) AND !*-(7f800000,7f800000,80000000) AND !*-(00000000,7f800000,00000000) => ff800000 7fc00000 ff800000 7fc00000
+#11: xvnmsubmsp !*-(00000000,7f800000,00000000) AND !*-(80000000,7f800000,7f800000) AND !*-(7f800000,7f800000,7fffffff) AND !*-(ff800000,7f800000,7fc00000) => 7fc00000 7fc00000 7fffffff 7fc00000
+#12: xvnmsubmsp !*-(7fffffff,ffffffff,ff800000) AND !*-(ffffffff,ffffffff,c683287b) AND !*-(7fc00000,ffc00000,80000000) AND !*-(ffc00000,ffc00000,00000000) => ffffffff ffffffff ffc00000 ffc00000
+#13: xvnmsubmsp !*-(3ec00000,ffffffff,00000000) AND !*-(42780000,ffffffff,7f800000) AND !*-(00000000,ffffffff,7fffffff) AND !*-(7f800000,ffffffff,7fc00000) => ffffffff ffffffff ffffffff ffffffff
+#14: xvnmsubmsp !*-(00000000,ffc00000,ff800000) AND !*-(00000000,ffc00000,c683287b) AND !*-(80000000,ffc00000,80000000) AND !*-(7f800000,49192c2d,49c1288d) => ffc00000 ffc00000 ffc00000 ff800000
+#15: xvnmsubmsp !*-(ff800000,49192c2d,49c1288d) AND !*-(7fffffff,7fffffff,7fc00000) AND !*-(ffffffff,7fc00000,7fc00000) AND !*-(7fc00000,7fc00000,ffc00000) => 7f800000 7fffffff 7fc00000 7fc00000
+
+
+Test scalar floating point arithmetic instructions
+#0: xssqrtdp 3fd8000000000000 => 3fe3988e1409212e
+#1: xssqrtdp 404f000000000000 => 401f7efbeb8d4f12
+#2: xssqrtdp 0018000000b77501 => 2003988e14540690
+#3: xssqrtdp 7fe800000000051b => 5febb67ae8584f9d
+#4: xssqrtdp 0123214569900000 => 2088bde98d60ebe6
+#5: xssqrtdp 0000000000000000 => 0000000000000000
+#6: xssqrtdp 8000000000000000 => 8000000000000000
+#7: xssqrtdp 7ff0000000000000 => 7ff0000000000000
+#8: xssqrtdp fff0000000000000 => 7ff8000000000000
+#9: xssqrtdp 7ff7ffffffffffff => 7fffffffffffffff
+#10: xssqrtdp fff7ffffffffffff => ffffffffffffffff
+#11: xssqrtdp 7ff8000000000000 => 7ff8000000000000
+#12: xssqrtdp fff8000000000000 => fff8000000000000
+#13: xssqrtdp 8008340000078000 => 7ff8000000000000
+#14: xssqrtdp c0d0650f5a07b353 => 7ff8000000000000
+#15: xssqrtdp 41232585a9900000 => 4088c0a9258a4a8b
+#16: xssqrtdp 41382511a2000000 => 4093a7aa60f34e85
+
+#0: xsrdpim 3fd8000000000000 => 0000000000000000
+#1: xsrdpim 404f000000000000 => 404f000000000000
+#2: xsrdpim 0018000000b77501 => 0000000000000000
+#3: xsrdpim 7fe800000000051b => 7fe800000000051b
+#4: xsrdpim 0123214569900000 => 0000000000000000
+#5: xsrdpim 0000000000000000 => 0000000000000000
+#6: xsrdpim 8000000000000000 => 8000000000000000
+#7: xsrdpim 7ff0000000000000 => 7ff0000000000000
+#8: xsrdpim fff0000000000000 => fff0000000000000
+#9: xsrdpim 7ff7ffffffffffff => 7fffffffffffffff
+#10: xsrdpim fff7ffffffffffff => ffffffffffffffff
+#11: xsrdpim 7ff8000000000000 => 7ff8000000000000
+#12: xsrdpim fff8000000000000 => fff8000000000000
+#13: xsrdpim 8008340000078000 => bff0000000000000
+#14: xsrdpim c0d0650f5a07b353 => c0d0654000000000
+#15: xsrdpim 41232585a9900000 => 4123258400000000
+#16: xsrdpim 41382511a2000000 => 4138251100000000
+
+#0: xsrdpip 3fd8000000000000 => 3ff0000000000000
+#1: xsrdpip 404f000000000000 => 404f000000000000
+#2: xsrdpip 0018000000b77501 => 3ff0000000000000
+#3: xsrdpip 7fe800000000051b => 7fe800000000051b
+#4: xsrdpip 0123214569900000 => 3ff0000000000000
+#5: xsrdpip 0000000000000000 => 0000000000000000
+#6: xsrdpip 8000000000000000 => 8000000000000000
+#7: xsrdpip 7ff0000000000000 => 7ff0000000000000
+#8: xsrdpip fff0000000000000 => fff0000000000000
+#9: xsrdpip 7ff7ffffffffffff => 7fffffffffffffff
+#10: xsrdpip fff7ffffffffffff => ffffffffffffffff
+#11: xsrdpip 7ff8000000000000 => 7ff8000000000000
+#12: xsrdpip fff8000000000000 => fff8000000000000
+#13: xsrdpip 8008340000078000 => 8000000000000000
+#14: xsrdpip c0d0650f5a07b353 => c0d0650000000000
+#15: xsrdpip 41232585a9900000 => 4123258600000000
+#16: xsrdpip 41382511a2000000 => 4138251200000000
+
+#0: xstdivdp fff0000000000000,fff0000000000000 => cr e
+#1: xstdivdp fff0000000000000,c0d0650f5a07b353 => cr e
+#2: xstdivdp 41232585a9900000,41382511a2000000 => cr 8
+#3: xstdivdp fff0000000000000,0000000000000000 => cr e
+#4: xstdivdp fff0000000000000,0123214569900000 => cr e
+#5: xstdivdp fff0000000000000,7ff0000000000000 => cr e
+#6: xstdivdp fff0000000000000,7ff7ffffffffffff => cr e
+#7: xstdivdp fff0000000000000,7ff8000000000000 => cr e
+#8: xstdivdp c0d0650f5a07b353,fff0000000000000 => cr e
+#9: xstdivdp c0d0650f5a07b353,c0d0650f5a07b353 => cr 8
+#10: xstdivdp c0d0650f5a07b353,8000000000000000 => cr e
+#11: xstdivdp c0d0650f5a07b353,0000000000000000 => cr e
+#12: xstdivdp c0d0650f5a07b353,0123214569900000 => cr 8
+#13: xstdivdp c0d0650f5a07b353,7ff0000000000000 => cr e
+#14: xstdivdp c0d0650f5a07b353,7ff7ffffffffffff => cr a
+#15: xstdivdp c0d0650f5a07b353,7ff8000000000000 => cr a
+#16: xstdivdp 8000000000000000,fff0000000000000 => cr e
+#17: xstdivdp 8000000000000000,c0d0650f5a07b353 => cr 8
+#18: xstdivdp 8000000000000000,8000000000000000 => cr e
+#19: xstdivdp 8000000000000000,0000000000000000 => cr e
+#20: xstdivdp 8000000000000000,0123214569900000 => cr 8
+#21: xstdivdp 8000000000000000,7ff0000000000000 => cr e
+#22: xstdivdp 8000000000000000,7ff7ffffffffffff => cr a
+#23: xstdivdp 8000000000000000,7ff8000000000000 => cr a
+#24: xstdivdp 0000000000000000,fff0000000000000 => cr e
+#25: xstdivdp 0000000000000000,c0d0650f5a07b353 => cr 8
+#26: xstdivdp 0000000000000000,8000000000000000 => cr e
+#27: xstdivdp 0000000000000000,0000000000000000 => cr e
+#28: xstdivdp 0000000000000000,0123214569900000 => cr 8
+#29: xstdivdp 0000000000000000,7ff0000000000000 => cr e
+#30: xstdivdp 0000000000000000,7ff7ffffffffffff => cr a
+#31: xstdivdp 0000000000000000,7ff8000000000000 => cr a
+#32: xstdivdp 0123214569900000,fff0000000000000 => cr e
+#33: xstdivdp 0123214569900000,c0d0650f5a07b353 => cr a
+#34: xstdivdp 0123214569900000,8000000000000000 => cr e
+#35: xstdivdp 0123214569900000,0000000000000000 => cr e
+#36: xstdivdp 0123214569900000,404f000000000000 => cr a
+#37: xstdivdp 0123214569900000,7ff0000000000000 => cr e
+#38: xstdivdp 0123214569900000,7ff7ffffffffffff => cr a
+#39: xstdivdp 0123214569900000,7ff8000000000000 => cr a
+#40: xstdivdp 7ff0000000000000,fff0000000000000 => cr e
+#41: xstdivdp 7ff0000000000000,c0d0650f5a07b353 => cr e
+#42: xstdivdp 7ff0000000000000,8000000000000000 => cr e
+#43: xstdivdp 7ff0000000000000,0000000000000000 => cr e
+#44: xstdivdp 7ff0000000000000,0123214569900000 => cr e
+#45: xstdivdp 7ff0000000000000,7ff0000000000000 => cr e
+#46: xstdivdp 7ff0000000000000,7ff7ffffffffffff => cr e
+#47: xstdivdp 7ff0000000000000,7ff8000000000000 => cr e
+#48: xstdivdp fff7ffffffffffff,fff0000000000000 => cr e
+#49: xstdivdp fff7ffffffffffff,c0d0650f5a07b353 => cr a
+#50: xstdivdp fff8000000000000,8000000000000000 => cr e
+#51: xstdivdp fff8000000000000,0000000000000000 => cr e
+#52: xstdivdp fff7ffffffffffff,0123214569900000 => cr a
+#53: xstdivdp fff7ffffffffffff,7ff0000000000000 => cr e
+#54: xstdivdp fff7ffffffffffff,7ff7ffffffffffff => cr a
+#55: xstdivdp fff7ffffffffffff,7ff8000000000000 => cr a
+#56: xstdivdp fff8000000000000,fff0000000000000 => cr e
+#57: xstdivdp fff8000000000000,c0d0650f5a07b353 => cr a
+#58: xstdivdp fff8000000000000,8000000000000000 => cr e
+#59: xstdivdp 41232585a9900000,41382511a2000000 => cr 8
+#60: xstdivdp 41232585a9900000,41382511a2000000 => cr 8
+#61: xstdivdp 7ff7ffffffffffff,7ff8000000000000 => cr a
+#62: xstdivdp 7ff8000000000000,7ff8000000000000 => cr a
+#63: xstdivdp 7ff8000000000000,fff8000000000000 => cr a
+
+#0: xsmaxdp fff0000000000000,fff0000000000000 => fff0000000000000
+#1: xsmaxdp fff0000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#2: xsmaxdp 41232585a9900000,41382511a2000000 => 41382511a2000000
+#3: xsmaxdp fff0000000000000,0000000000000000 => 0000000000000000
+#4: xsmaxdp fff0000000000000,0123214569900000 => 0123214569900000
+#5: xsmaxdp fff0000000000000,7ff0000000000000 => 7ff0000000000000
+#6: xsmaxdp fff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#7: xsmaxdp fff0000000000000,7ff8000000000000 => fff0000000000000
+#8: xsmaxdp c0d0650f5a07b353,fff0000000000000 => c0d0650f5a07b353
+#9: xsmaxdp c0d0650f5a07b353,c0d0650f5a07b353 => c0d0650f5a07b353
+#10: xsmaxdp c0d0650f5a07b353,8000000000000000 => 8000000000000000
+#11: xsmaxdp c0d0650f5a07b353,0000000000000000 => 0000000000000000
+#12: xsmaxdp c0d0650f5a07b353,0123214569900000 => 0123214569900000
+#13: xsmaxdp c0d0650f5a07b353,7ff0000000000000 => 7ff0000000000000
+#14: xsmaxdp c0d0650f5a07b353,7ff7ffffffffffff => 7fffffffffffffff
+#15: xsmaxdp c0d0650f5a07b353,7ff8000000000000 => c0d0650f5a07b353
+#16: xsmaxdp 8000000000000000,fff0000000000000 => 8000000000000000
+#17: xsmaxdp 8000000000000000,c0d0650f5a07b353 => 8000000000000000
+#18: xsmaxdp 8000000000000000,8000000000000000 => 8000000000000000
+#19: xsmaxdp 8000000000000000,0000000000000000 => 0000000000000000
+#20: xsmaxdp 8000000000000000,0123214569900000 => 0123214569900000
+#21: xsmaxdp 8000000000000000,7ff0000000000000 => 7ff0000000000000
+#22: xsmaxdp 8000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#23: xsmaxdp 8000000000000000,7ff8000000000000 => 8000000000000000
+#24: xsmaxdp 0000000000000000,fff0000000000000 => 0000000000000000
+#25: xsmaxdp 0000000000000000,c0d0650f5a07b353 => 0000000000000000
+#26: xsmaxdp 0000000000000000,8000000000000000 => 0000000000000000
+#27: xsmaxdp 0000000000000000,0000000000000000 => 0000000000000000
+#28: xsmaxdp 0000000000000000,0123214569900000 => 0123214569900000
+#29: xsmaxdp 0000000000000000,7ff0000000000000 => 7ff0000000000000
+#30: xsmaxdp 0000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#31: xsmaxdp 0000000000000000,7ff8000000000000 => 0000000000000000
+#32: xsmaxdp 0123214569900000,fff0000000000000 => 0123214569900000
+#33: xsmaxdp 0123214569900000,c0d0650f5a07b353 => 0123214569900000
+#34: xsmaxdp 0123214569900000,8000000000000000 => 0123214569900000
+#35: xsmaxdp 0123214569900000,0000000000000000 => 0123214569900000
+#36: xsmaxdp 0123214569900000,404f000000000000 => 404f000000000000
+#37: xsmaxdp 0123214569900000,7ff0000000000000 => 7ff0000000000000
+#38: xsmaxdp 0123214569900000,7ff7ffffffffffff => 7fffffffffffffff
+#39: xsmaxdp 0123214569900000,7ff8000000000000 => 0123214569900000
+#40: xsmaxdp 7ff0000000000000,fff0000000000000 => 7ff0000000000000
+#41: xsmaxdp 7ff0000000000000,c0d0650f5a07b353 => 7ff0000000000000
+#42: xsmaxdp 7ff0000000000000,8000000000000000 => 7ff0000000000000
+#43: xsmaxdp 7ff0000000000000,0000000000000000 => 7ff0000000000000
+#44: xsmaxdp 7ff0000000000000,0123214569900000 => 7ff0000000000000
+#45: xsmaxdp 7ff0000000000000,7ff0000000000000 => 7ff0000000000000
+#46: xsmaxdp 7ff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#47: xsmaxdp 7ff0000000000000,7ff8000000000000 => 7ff0000000000000
+#48: xsmaxdp fff7ffffffffffff,fff0000000000000 => ffffffffffffffff
+#49: xsmaxdp fff7ffffffffffff,c0d0650f5a07b353 => ffffffffffffffff
+#50: xsmaxdp fff8000000000000,8000000000000000 => 8000000000000000
+#51: xsmaxdp fff8000000000000,0000000000000000 => 0000000000000000
+#52: xsmaxdp fff7ffffffffffff,0123214569900000 => ffffffffffffffff
+#53: xsmaxdp fff7ffffffffffff,7ff0000000000000 => ffffffffffffffff
+#54: xsmaxdp fff7ffffffffffff,7ff7ffffffffffff => ffffffffffffffff
+#55: xsmaxdp fff7ffffffffffff,7ff8000000000000 => ffffffffffffffff
+#56: xsmaxdp fff8000000000000,fff0000000000000 => fff0000000000000
+#57: xsmaxdp fff8000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#58: xsmaxdp fff8000000000000,8000000000000000 => 8000000000000000
+#59: xsmaxdp 41232585a9900000,41382511a2000000 => 41382511a2000000
+#60: xsmaxdp 41232585a9900000,41382511a2000000 => 41382511a2000000
+#61: xsmaxdp 7ff7ffffffffffff,7ff8000000000000 => 7fffffffffffffff
+#62: xsmaxdp 7ff8000000000000,7ff8000000000000 => 7ff8000000000000
+#63: xsmaxdp 7ff8000000000000,fff8000000000000 => 7ff8000000000000
+
+#0: xsmindp fff0000000000000,fff0000000000000 => fff0000000000000
+#1: xsmindp fff0000000000000,c0d0650f5a07b353 => fff0000000000000
+#2: xsmindp 41232585a9900000,41382511a2000000 => 41232585a9900000
+#3: xsmindp fff0000000000000,0000000000000000 => fff0000000000000
+#4: xsmindp fff0000000000000,0123214569900000 => fff0000000000000
+#5: xsmindp fff0000000000000,7ff0000000000000 => fff0000000000000
+#6: xsmindp fff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#7: xsmindp fff0000000000000,7ff8000000000000 => fff0000000000000
+#8: xsmindp c0d0650f5a07b353,fff0000000000000 => fff0000000000000
+#9: xsmindp c0d0650f5a07b353,c0d0650f5a07b353 => c0d0650f5a07b353
+#10: xsmindp c0d0650f5a07b353,8000000000000000 => c0d0650f5a07b353
+#11: xsmindp c0d0650f5a07b353,0000000000000000 => c0d0650f5a07b353
+#12: xsmindp c0d0650f5a07b353,0123214569900000 => c0d0650f5a07b353
+#13: xsmindp c0d0650f5a07b353,7ff0000000000000 => c0d0650f5a07b353
+#14: xsmindp c0d0650f5a07b353,7ff7ffffffffffff => 7fffffffffffffff
+#15: xsmindp c0d0650f5a07b353,7ff8000000000000 => c0d0650f5a07b353
+#16: xsmindp 8000000000000000,fff0000000000000 => fff0000000000000
+#17: xsmindp 8000000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#18: xsmindp 8000000000000000,8000000000000000 => 8000000000000000
+#19: xsmindp 8000000000000000,0000000000000000 => 8000000000000000
+#20: xsmindp 8000000000000000,0123214569900000 => 8000000000000000
+#21: xsmindp 8000000000000000,7ff0000000000000 => 8000000000000000
+#22: xsmindp 8000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#23: xsmindp 8000000000000000,7ff8000000000000 => 8000000000000000
+#24: xsmindp 0000000000000000,fff0000000000000 => fff0000000000000
+#25: xsmindp 0000000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#26: xsmindp 0000000000000000,8000000000000000 => 8000000000000000
+#27: xsmindp 0000000000000000,0000000000000000 => 0000000000000000
+#28: xsmindp 0000000000000000,0123214569900000 => 0000000000000000
+#29: xsmindp 0000000000000000,7ff0000000000000 => 0000000000000000
+#30: xsmindp 0000000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#31: xsmindp 0000000000000000,7ff8000000000000 => 0000000000000000
+#32: xsmindp 0123214569900000,fff0000000000000 => fff0000000000000
+#33: xsmindp 0123214569900000,c0d0650f5a07b353 => c0d0650f5a07b353
+#34: xsmindp 0123214569900000,8000000000000000 => 8000000000000000
+#35: xsmindp 0123214569900000,0000000000000000 => 0000000000000000
+#36: xsmindp 0123214569900000,404f000000000000 => 0123214569900000
+#37: xsmindp 0123214569900000,7ff0000000000000 => 0123214569900000
+#38: xsmindp 0123214569900000,7ff7ffffffffffff => 7fffffffffffffff
+#39: xsmindp 0123214569900000,7ff8000000000000 => 0123214569900000
+#40: xsmindp 7ff0000000000000,fff0000000000000 => fff0000000000000
+#41: xsmindp 7ff0000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#42: xsmindp 7ff0000000000000,8000000000000000 => 8000000000000000
+#43: xsmindp 7ff0000000000000,0000000000000000 => 0000000000000000
+#44: xsmindp 7ff0000000000000,0123214569900000 => 0123214569900000
+#45: xsmindp 7ff0000000000000,7ff0000000000000 => 7ff0000000000000
+#46: xsmindp 7ff0000000000000,7ff7ffffffffffff => 7fffffffffffffff
+#47: xsmindp 7ff0000000000000,7ff8000000000000 => 7ff0000000000000
+#48: xsmindp fff7ffffffffffff,fff0000000000000 => ffffffffffffffff
+#49: xsmindp fff7ffffffffffff,c0d0650f5a07b353 => ffffffffffffffff
+#50: xsmindp fff8000000000000,8000000000000000 => 8000000000000000
+#51: xsmindp fff8000000000000,0000000000000000 => 0000000000000000
+#52: xsmindp fff7ffffffffffff,0123214569900000 => ffffffffffffffff
+#53: xsmindp fff7ffffffffffff,7ff0000000000000 => ffffffffffffffff
+#54: xsmindp fff7ffffffffffff,7ff7ffffffffffff => ffffffffffffffff
+#55: xsmindp fff7ffffffffffff,7ff8000000000000 => ffffffffffffffff
+#56: xsmindp fff8000000000000,fff0000000000000 => fff0000000000000
+#57: xsmindp fff8000000000000,c0d0650f5a07b353 => c0d0650f5a07b353
+#58: xsmindp fff8000000000000,8000000000000000 => 8000000000000000
+#59: xsmindp 41232585a9900000,41382511a2000000 => 41232585a9900000
+#60: xsmindp 41232585a9900000,41382511a2000000 => 41232585a9900000
+#61: xsmindp 7ff7ffffffffffff,7ff8000000000000 => 7fffffffffffffff
+#62: xsmindp 7ff8000000000000,7ff8000000000000 => 7ff8000000000000
+#63: xsmindp 7ff8000000000000,fff8000000000000 => 7ff8000000000000
+
+#0: xscvdpsxws 3fd8000000000000 => 0000000000000000
+#1: xscvdpsxws 404f000000000000 => 000000000000003e
+#2: xscvdpsxws 0018000000b77501 => 0000000000000000
+#3: xscvdpsxws 7fe800000000051b => 000000007fffffff
+#4: xscvdpsxws 0123214569900000 => 0000000000000000
+#5: xscvdpsxws 0000000000000000 => 0000000000000000
+#6: xscvdpsxws 8000000000000000 => 0000000000000000
+#7: xscvdpsxws 7ff0000000000000 => 000000007fffffff
+#8: xscvdpsxws fff0000000000000 => 0000000080000000
+#9: xscvdpsxws 7ff7ffffffffffff => 0000000080000000
+#10: xscvdpsxws fff7ffffffffffff => 0000000080000000
+#11: xscvdpsxws 7ff8000000000000 => 0000000080000000
+#12: xscvdpsxws fff8000000000000 => 0000000080000000
+#13: xscvdpsxws 8008340000078000 => 0000000000000000
+#14: xscvdpsxws c0d0650f5a07b353 => 00000000ffffbe6c
+#15: xscvdpsxws 41232585a9900000 => 00000000000992c2
+#16: xscvdpsxws 41382511a2000000 => 0000000000182511
+
+#0: xscvdpuxds 3fd8000000000000 => 0000000000000000
+#1: xscvdpuxds 404f000000000000 => 000000000000003e
+#2: xscvdpuxds 0018000000b77501 => 0000000000000000
+#3: xscvdpuxds 7fe800000000051b => ffffffffffffffff
+#4: xscvdpuxds 0123214569900000 => 0000000000000000
+#5: xscvdpuxds 0000000000000000 => 0000000000000000
+#6: xscvdpuxds 8000000000000000 => 0000000000000000
+#7: xscvdpuxds 7ff0000000000000 => ffffffffffffffff
+#8: xscvdpuxds fff0000000000000 => 0000000000000000
+#9: xscvdpuxds 7ff7ffffffffffff => 0000000000000000
+#10: xscvdpuxds fff7ffffffffffff => 0000000000000000
+#11: xscvdpuxds 7ff8000000000000 => 0000000000000000
+#12: xscvdpuxds fff8000000000000 => 0000000000000000
+#13: xscvdpuxds 8008340000078000 => 0000000000000000
+#14: xscvdpuxds c0d0650f5a07b353 => 0000000000000000
+#15: xscvdpuxds 41232585a9900000 => 00000000000992c2
+#16: xscvdpuxds 41382511a2000000 => 0000000000182511
+
--- valgrind/none/tests/ppc64/test_isa_2_06_part2.c	(revision 0)
+++ valgrind/none/tests/ppc64/test_isa_2_06_part2.c	(revision 11908)
@@ -0,0 +1 @@
+#include "../ppc32/test_isa_2_06_part2.c"
--- valgrind/none/tests/ppc64/test_isa_2_06_part2.stderr.exp	(revision 0)
+++ valgrind/none/tests/ppc64/test_isa_2_06_part2.stderr.exp	(revision 11908)
@@ -0,0 +1,2 @@
+
+
--- valgrind/none/tests/ppc64/Makefile.am	(revision 11906)
+++ valgrind/none/tests/ppc64/Makefile.am	(revision 11908)
@@ -15,10 +15,12 @@ EXTRA_DIST = \
 	tw_td.stderr.exp tw_td.stdout.exp tw_td.vgtest \
 	power6_bcmp.stderr.exp power6_bcmp.stdout.exp power6_bcmp.vgtest \
 	power6_mf_gpr.stderr.exp power6_mf_gpr.stdout.exp power6_mf_gpr.vgtest \
-	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest
+	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest \
+	test_isa_2_06_part2.stderr.exp  test_isa_2_06_part2.stdout.exp  test_isa_2_06_part2.vgtest
 
 check_PROGRAMS = \
-	jm-insns lsw round std_reg_imm twi_tdi tw_td power6_bcmp power6_mf_gpr test_isa_2_06_part1
+	jm-insns lsw round std_reg_imm twi_tdi tw_td power6_bcmp power6_mf_gpr test_isa_2_06_part1 \
+	test_isa_2_06_part2
 
 AM_CFLAGS    += @FLAG_M64@
 AM_CXXFLAGS  += @FLAG_M64@
@@ -41,6 +43,9 @@ endif
 test_isa_2_06_part1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
 			@FLAG_M64@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
 
+test_isa_2_06_part2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
+			@FLAG_M64@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
+
 jm_insns_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames -maltivec \
 			@FLAG_M64@ $(ALTIVEC_FLAG)
 
--- valgrind/none/tests/ppc32/Makefile.in	2012-03-05 09:46:35.000000000 +0100
+++ valgrind/none/tests/ppc32/Makefile.in	2012-03-05 09:54:26.058585748 +0100
@@ -52,7 +52,7 @@ check_PROGRAMS = bug129390-ppc32$(EXEEXT
 	test_fx$(EXEEXT) test_gx$(EXEEXT) testVMX$(EXEEXT) \
 	twi$(EXEEXT) tw$(EXEEXT) xlc_dbl_u32$(EXEEXT) \
 	power5+_round$(EXEEXT) power6_bcmp$(EXEEXT) \
-	test_isa_2_06_part1$(EXEEXT)
+	test_isa_2_06_part1$(EXEEXT) test_isa_2_06_part2$(EXEEXT)
 subdir = none/tests/ppc32
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/configure.in
@@ -111,6 +111,12 @@ test_isa_2_06_part1_OBJECTS =  \
 test_isa_2_06_part1_LDADD = $(LDADD)
 test_isa_2_06_part1_LINK = $(CCLD) $(test_isa_2_06_part1_CFLAGS) \
 	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
+test_isa_2_06_part2_SOURCES = test_isa_2_06_part2.c
+test_isa_2_06_part2_OBJECTS =  \
+	test_isa_2_06_part2-test_isa_2_06_part2.$(OBJEXT)
+test_isa_2_06_part2_LDADD = $(LDADD)
+test_isa_2_06_part2_LINK = $(CCLD) $(test_isa_2_06_part2_CFLAGS) \
+	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
 tw_SOURCES = tw.c
 tw_OBJECTS = tw.$(OBJEXT)
 tw_LDADD = $(LDADD)
@@ -131,12 +137,13 @@ CCLD = $(CC)
 LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
 SOURCES = bug129390-ppc32.c bug139050-ppc32.c jm-insns.c ldstrev.c \
 	lsw.c mcrfs.c mftocrf.c power5+_round.c power6_bcmp.c round.c \
-	testVMX.c test_fx.c test_gx.c test_isa_2_06_part1.c tw.c twi.c \
-	xlc_dbl_u32.c
+	testVMX.c test_fx.c test_gx.c test_isa_2_06_part1.c \
+	test_isa_2_06_part2.c tw.c twi.c xlc_dbl_u32.c
 DIST_SOURCES = bug129390-ppc32.c bug139050-ppc32.c jm-insns.c \
 	ldstrev.c lsw.c mcrfs.c mftocrf.c power5+_round.c \
 	power6_bcmp.c round.c testVMX.c test_fx.c test_gx.c \
-	test_isa_2_06_part1.c tw.c twi.c xlc_dbl_u32.c
+	test_isa_2_06_part1.c test_isa_2_06_part2.c tw.c twi.c \
+	xlc_dbl_u32.c
 ETAGS = etags
 CTAGS = ctags
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
@@ -446,7 +453,8 @@ EXTRA_DIST = \
 	xlc_dbl_u32.stderr.exp xlc_dbl_u32.stdout.exp xlc_dbl_u32.vgtest \
 	power5+_round.stderr.exp power5+_round.stdout.exp power5+_round.vgtest \
 	power6_bcmp.stderr.exp power6_bcmp.stdout.exp power6_bcmp.vgtest \
-	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest
+	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest \
+	test_isa_2_06_part2.stderr.exp  test_isa_2_06_part2.stdout.exp  test_isa_2_06_part2.vgtest
 
 @HAS_ALTIVEC_FALSE@ALTIVEC_FLAG = 
 @HAS_ALTIVEC_TRUE@ALTIVEC_FLAG = -DHAS_ALTIVEC
@@ -463,6 +471,9 @@ testVMX_CFLAGS = $(AM_CFLAGS) -O -g -Wal
 test_isa_2_06_part1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
 			@FLAG_M32@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
 
+test_isa_2_06_part2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
+			@FLAG_M32@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
+
 all: all-am
 
 .SUFFIXES:
@@ -542,6 +553,9 @@ test_gx$(EXEEXT): $(test_gx_OBJECTS) $(t
 test_isa_2_06_part1$(EXEEXT): $(test_isa_2_06_part1_OBJECTS) $(test_isa_2_06_part1_DEPENDENCIES) 
 	@rm -f test_isa_2_06_part1$(EXEEXT)
 	$(test_isa_2_06_part1_LINK) $(test_isa_2_06_part1_OBJECTS) $(test_isa_2_06_part1_LDADD) $(LIBS)
+test_isa_2_06_part2$(EXEEXT): $(test_isa_2_06_part2_OBJECTS) $(test_isa_2_06_part2_DEPENDENCIES) 
+	@rm -f test_isa_2_06_part2$(EXEEXT)
+	$(test_isa_2_06_part2_LINK) $(test_isa_2_06_part2_OBJECTS) $(test_isa_2_06_part2_LDADD) $(LIBS)
 tw$(EXEEXT): $(tw_OBJECTS) $(tw_DEPENDENCIES) 
 	@rm -f tw$(EXEEXT)
 	$(LINK) $(tw_OBJECTS) $(tw_LDADD) $(LIBS)
@@ -572,6 +586,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_fx.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_gx.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tw.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/twi.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xlc_dbl_u32.Po@am__quote@
@@ -632,6 +647,20 @@ test_isa_2_06_part1-test_isa_2_06_part1.
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part1_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part1-test_isa_2_06_part1.obj `if test -f 'test_isa_2_06_part1.c'; then $(CYGPATH_W) 'test_isa_2_06_part1.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part1.c'; fi`
 
+test_isa_2_06_part2-test_isa_2_06_part2.o: test_isa_2_06_part2.c
+@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part2-test_isa_2_06_part2.o -MD -MP -MF $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo -c -o test_isa_2_06_part2-test_isa_2_06_part2.o `test -f 'test_isa_2_06_part2.c' || echo '$(srcdir)/'`test_isa_2_06_part2.c
+@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='test_isa_2_06_part2.c' object='test_isa_2_06_part2-test_isa_2_06_part2.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part2-test_isa_2_06_part2.o `test -f 'test_isa_2_06_part2.c' || echo '$(srcdir)/'`test_isa_2_06_part2.c
+
+test_isa_2_06_part2-test_isa_2_06_part2.obj: test_isa_2_06_part2.c
+@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part2-test_isa_2_06_part2.obj -MD -MP -MF $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo -c -o test_isa_2_06_part2-test_isa_2_06_part2.obj `if test -f 'test_isa_2_06_part2.c'; then $(CYGPATH_W) 'test_isa_2_06_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part2.c'; fi`
+@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='test_isa_2_06_part2.c' object='test_isa_2_06_part2-test_isa_2_06_part2.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part2-test_isa_2_06_part2.obj `if test -f 'test_isa_2_06_part2.c'; then $(CYGPATH_W) 'test_isa_2_06_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part2.c'; fi`
+
 ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
 	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
 	unique=`for i in $$list; do \
--- valgrind/none/tests/ppc64/Makefile.in	2012-03-05 09:46:35.000000000 +0100
+++ valgrind/none/tests/ppc64/Makefile.in	2012-03-05 09:54:26.190585922 +0100
@@ -49,7 +49,7 @@ DIST_COMMON = $(dist_noinst_SCRIPTS) $(s
 check_PROGRAMS = jm-insns$(EXEEXT) lsw$(EXEEXT) round$(EXEEXT) \
 	std_reg_imm$(EXEEXT) twi_tdi$(EXEEXT) tw_td$(EXEEXT) \
 	power6_bcmp$(EXEEXT) power6_mf_gpr$(EXEEXT) \
-	test_isa_2_06_part1$(EXEEXT)
+	test_isa_2_06_part1$(EXEEXT) test_isa_2_06_part2$(EXEEXT)
 subdir = none/tests/ppc64
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/configure.in
@@ -85,6 +85,12 @@ test_isa_2_06_part1_OBJECTS =  \
 test_isa_2_06_part1_LDADD = $(LDADD)
 test_isa_2_06_part1_LINK = $(CCLD) $(test_isa_2_06_part1_CFLAGS) \
 	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
+test_isa_2_06_part2_SOURCES = test_isa_2_06_part2.c
+test_isa_2_06_part2_OBJECTS =  \
+	test_isa_2_06_part2-test_isa_2_06_part2.$(OBJEXT)
+test_isa_2_06_part2_LDADD = $(LDADD)
+test_isa_2_06_part2_LINK = $(CCLD) $(test_isa_2_06_part2_CFLAGS) \
+	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
 tw_td_SOURCES = tw_td.c
 tw_td_OBJECTS = tw_td.$(OBJEXT)
 tw_td_LDADD = $(LDADD)
@@ -101,9 +107,11 @@ COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUD
 CCLD = $(CC)
 LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
 SOURCES = jm-insns.c lsw.c power6_bcmp.c power6_mf_gpr.c round.c \
-	std_reg_imm.c test_isa_2_06_part1.c tw_td.c twi_tdi.c
+	std_reg_imm.c test_isa_2_06_part1.c test_isa_2_06_part2.c \
+	tw_td.c twi_tdi.c
 DIST_SOURCES = jm-insns.c lsw.c power6_bcmp.c power6_mf_gpr.c round.c \
-	std_reg_imm.c test_isa_2_06_part1.c tw_td.c twi_tdi.c
+	std_reg_imm.c test_isa_2_06_part1.c test_isa_2_06_part2.c \
+	tw_td.c twi_tdi.c
 ETAGS = etags
 CTAGS = ctags
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
@@ -403,7 +411,8 @@ EXTRA_DIST = \
 	tw_td.stderr.exp tw_td.stdout.exp tw_td.vgtest \
 	power6_bcmp.stderr.exp power6_bcmp.stdout.exp power6_bcmp.vgtest \
 	power6_mf_gpr.stderr.exp power6_mf_gpr.stdout.exp power6_mf_gpr.vgtest \
-	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest
+	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest \
+	test_isa_2_06_part2.stderr.exp  test_isa_2_06_part2.stdout.exp  test_isa_2_06_part2.vgtest
 
 @HAS_ALTIVEC_FALSE@ALTIVEC_FLAG = 
 @HAS_ALTIVEC_TRUE@ALTIVEC_FLAG = -DHAS_ALTIVEC
@@ -414,6 +423,9 @@ EXTRA_DIST = \
 test_isa_2_06_part1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
 			@FLAG_M64@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
 
+test_isa_2_06_part2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
+			@FLAG_M64@ $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)
+
 jm_insns_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames -maltivec \
 			@FLAG_M64@ $(ALTIVEC_FLAG)
 
@@ -475,6 +487,9 @@ std_reg_imm$(EXEEXT): $(std_reg_imm_OBJE
 test_isa_2_06_part1$(EXEEXT): $(test_isa_2_06_part1_OBJECTS) $(test_isa_2_06_part1_DEPENDENCIES) 
 	@rm -f test_isa_2_06_part1$(EXEEXT)
 	$(test_isa_2_06_part1_LINK) $(test_isa_2_06_part1_OBJECTS) $(test_isa_2_06_part1_LDADD) $(LIBS)
+test_isa_2_06_part2$(EXEEXT): $(test_isa_2_06_part2_OBJECTS) $(test_isa_2_06_part2_DEPENDENCIES) 
+	@rm -f test_isa_2_06_part2$(EXEEXT)
+	$(test_isa_2_06_part2_LINK) $(test_isa_2_06_part2_OBJECTS) $(test_isa_2_06_part2_LDADD) $(LIBS)
 tw_td$(EXEEXT): $(tw_td_OBJECTS) $(tw_td_DEPENDENCIES) 
 	@rm -f tw_td$(EXEEXT)
 	$(LINK) $(tw_td_OBJECTS) $(tw_td_LDADD) $(LIBS)
@@ -495,6 +510,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/round.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/std_reg_imm.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tw_td.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/twi_tdi.Po@am__quote@
 
@@ -540,6 +556,20 @@ test_isa_2_06_part1-test_isa_2_06_part1.
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part1_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part1-test_isa_2_06_part1.obj `if test -f 'test_isa_2_06_part1.c'; then $(CYGPATH_W) 'test_isa_2_06_part1.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part1.c'; fi`
 
+test_isa_2_06_part2-test_isa_2_06_part2.o: test_isa_2_06_part2.c
+@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part2-test_isa_2_06_part2.o -MD -MP -MF $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo -c -o test_isa_2_06_part2-test_isa_2_06_part2.o `test -f 'test_isa_2_06_part2.c' || echo '$(srcdir)/'`test_isa_2_06_part2.c
+@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='test_isa_2_06_part2.c' object='test_isa_2_06_part2-test_isa_2_06_part2.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part2-test_isa_2_06_part2.o `test -f 'test_isa_2_06_part2.c' || echo '$(srcdir)/'`test_isa_2_06_part2.c
+
+test_isa_2_06_part2-test_isa_2_06_part2.obj: test_isa_2_06_part2.c
+@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part2-test_isa_2_06_part2.obj -MD -MP -MF $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo -c -o test_isa_2_06_part2-test_isa_2_06_part2.obj `if test -f 'test_isa_2_06_part2.c'; then $(CYGPATH_W) 'test_isa_2_06_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part2.c'; fi`
+@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='test_isa_2_06_part2.c' object='test_isa_2_06_part2-test_isa_2_06_part2.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part2-test_isa_2_06_part2.obj `if test -f 'test_isa_2_06_part2.c'; then $(CYGPATH_W) 'test_isa_2_06_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part2.c'; fi`
+
 ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
 	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
 	unique=`for i in $$list; do \
